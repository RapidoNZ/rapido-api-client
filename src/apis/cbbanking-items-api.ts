/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBBankingItems } from '../models';
// @ts-ignore
import { PagedCBBankingItems } from '../models';
/**
 * CBBankingItemsApi - axios parameter creator
 * @export
 */
export const CBBankingItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBBankingItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDDelete: async (itemID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemID' is not null or undefined
            assertParamExists('cBBankingItemsItemIDDelete', 'itemID', itemID)
            const localVarPath = `/CBBankingItems('{ItemID}')`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CBBankingItems/DuplicateContra is an ODATA function - use GET to call
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDDuplicateContraGet: async (itemID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemID' is not null or undefined
            assertParamExists('cBBankingItemsItemIDDuplicateContraGet', 'itemID', itemID)
            const localVarPath = `/CBBankingItems('{ItemID}')/DuplicateContra`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CBBankingItems/Duplicate is an ODATA function - use GET to call
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDDuplicateGet: async (itemID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemID' is not null or undefined
            assertParamExists('cBBankingItemsItemIDDuplicateGet', 'itemID', itemID)
            const localVarPath = `/CBBankingItems('{ItemID}')/Duplicate`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDGet: async (itemID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemID' is not null or undefined
            assertParamExists('cBBankingItemsItemIDGet', 'itemID', itemID)
            const localVarPath = `/CBBankingItems('{ItemID}')`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} itemID 
         * @param {CBBankingItems} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDPatch: async (itemID: number, body: CBBankingItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemID' is not null or undefined
            assertParamExists('cBBankingItemsItemIDPatch', 'itemID', itemID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBBankingItemsItemIDPatch', 'body', body)
            const localVarPath = `/CBBankingItems('{ItemID}')`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} itemID 
         * @param {CBBankingItems} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDPut: async (itemID: number, body: CBBankingItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemID' is not null or undefined
            assertParamExists('cBBankingItemsItemIDPut', 'itemID', itemID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBBankingItemsItemIDPut', 'body', body)
            const localVarPath = `/CBBankingItems('{ItemID}')`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CBBankingItems} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsPost: async (body: CBBankingItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBBankingItemsPost', 'body', body)
            const localVarPath = `/CBBankingItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBBankingItemsApi - functional programming interface
 * @export
 */
export const CBBankingItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBBankingItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingItemsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBBankingItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingItemsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingItemsItemIDDelete(itemID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingItemsItemIDDelete(itemID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CBBankingItems/DuplicateContra is an ODATA function - use GET to call
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingItemsItemIDDuplicateContraGet(itemID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingItemsItemIDDuplicateContraGet(itemID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CBBankingItems/Duplicate is an ODATA function - use GET to call
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingItemsItemIDDuplicateGet(itemID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingItemsItemIDDuplicateGet(itemID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingItemsItemIDGet(itemID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBBankingItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingItemsItemIDGet(itemID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} itemID 
         * @param {CBBankingItems} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingItemsItemIDPatch(itemID: number, body: CBBankingItems, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingItemsItemIDPatch(itemID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} itemID 
         * @param {CBBankingItems} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingItemsItemIDPut(itemID: number, body: CBBankingItems, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingItemsItemIDPut(itemID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CBBankingItems} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingItemsPost(body: CBBankingItems, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingItemsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBBankingItemsApi - factory interface
 * @export
 */
export const CBBankingItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBBankingItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsGet(options?: any): AxiosPromise<PagedCBBankingItems> {
            return localVarFp.cBBankingItemsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDDelete(itemID: number, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingItemsItemIDDelete(itemID, options).then((request) => request(axios, basePath));
        },
        /**
         * CBBankingItems/DuplicateContra is an ODATA function - use GET to call
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDDuplicateContraGet(itemID: number, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingItemsItemIDDuplicateContraGet(itemID, options).then((request) => request(axios, basePath));
        },
        /**
         * CBBankingItems/Duplicate is an ODATA function - use GET to call
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDDuplicateGet(itemID: number, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingItemsItemIDDuplicateGet(itemID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} itemID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDGet(itemID: number, options?: any): AxiosPromise<CBBankingItems> {
            return localVarFp.cBBankingItemsItemIDGet(itemID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} itemID 
         * @param {CBBankingItems} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDPatch(itemID: number, body: CBBankingItems, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingItemsItemIDPatch(itemID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} itemID 
         * @param {CBBankingItems} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsItemIDPut(itemID: number, body: CBBankingItems, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingItemsItemIDPut(itemID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CBBankingItems} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingItemsPost(body: CBBankingItems, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingItemsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBBankingItemsApi - interface
 * @export
 * @interface CBBankingItemsApi
 */
export interface CBBankingItemsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApiInterface
     */
    cBBankingItemsGet(options?: AxiosRequestConfig): AxiosPromise<PagedCBBankingItems>;

    /**
     * 
     * @param {number} itemID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApiInterface
     */
    cBBankingItemsItemIDDelete(itemID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CBBankingItems/DuplicateContra is an ODATA function - use GET to call
     * @param {number} itemID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApiInterface
     */
    cBBankingItemsItemIDDuplicateContraGet(itemID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CBBankingItems/Duplicate is an ODATA function - use GET to call
     * @param {number} itemID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApiInterface
     */
    cBBankingItemsItemIDDuplicateGet(itemID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} itemID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApiInterface
     */
    cBBankingItemsItemIDGet(itemID: number, options?: AxiosRequestConfig): AxiosPromise<CBBankingItems>;

    /**
     * 
     * @param {number} itemID 
     * @param {CBBankingItems} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApiInterface
     */
    cBBankingItemsItemIDPatch(itemID: number, body: CBBankingItems, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} itemID 
     * @param {CBBankingItems} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApiInterface
     */
    cBBankingItemsItemIDPut(itemID: number, body: CBBankingItems, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {CBBankingItems} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApiInterface
     */
    cBBankingItemsPost(body: CBBankingItems, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CBBankingItemsApi - object-oriented interface
 * @export
 * @class CBBankingItemsApi
 * @extends {BaseAPI}
 */
export class CBBankingItemsApi extends BaseAPI implements CBBankingItemsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApi
     */
    public cBBankingItemsGet(options?: AxiosRequestConfig) {
        return CBBankingItemsApiFp(this.configuration).cBBankingItemsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} itemID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApi
     */
    public cBBankingItemsItemIDDelete(itemID: number, options?: AxiosRequestConfig) {
        return CBBankingItemsApiFp(this.configuration).cBBankingItemsItemIDDelete(itemID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CBBankingItems/DuplicateContra is an ODATA function - use GET to call
     * @param {number} itemID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApi
     */
    public cBBankingItemsItemIDDuplicateContraGet(itemID: number, options?: AxiosRequestConfig) {
        return CBBankingItemsApiFp(this.configuration).cBBankingItemsItemIDDuplicateContraGet(itemID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CBBankingItems/Duplicate is an ODATA function - use GET to call
     * @param {number} itemID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApi
     */
    public cBBankingItemsItemIDDuplicateGet(itemID: number, options?: AxiosRequestConfig) {
        return CBBankingItemsApiFp(this.configuration).cBBankingItemsItemIDDuplicateGet(itemID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} itemID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApi
     */
    public cBBankingItemsItemIDGet(itemID: number, options?: AxiosRequestConfig) {
        return CBBankingItemsApiFp(this.configuration).cBBankingItemsItemIDGet(itemID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} itemID 
     * @param {CBBankingItems} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApi
     */
    public cBBankingItemsItemIDPatch(itemID: number, body: CBBankingItems, options?: AxiosRequestConfig) {
        return CBBankingItemsApiFp(this.configuration).cBBankingItemsItemIDPatch(itemID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} itemID 
     * @param {CBBankingItems} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApi
     */
    public cBBankingItemsItemIDPut(itemID: number, body: CBBankingItems, options?: AxiosRequestConfig) {
        return CBBankingItemsApiFp(this.configuration).cBBankingItemsItemIDPut(itemID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CBBankingItems} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingItemsApi
     */
    public cBBankingItemsPost(body: CBBankingItems, options?: AxiosRequestConfig) {
        return CBBankingItemsApiFp(this.configuration).cBBankingItemsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
