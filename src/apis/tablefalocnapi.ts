/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagedTABLEFALOCN } from '../models';
// @ts-ignore
import { TABLEFALOCN } from '../models';
/**
 * TABLEFALOCNApi - axios parameter creator
 * @export
 */
export const TABLEFALOCNApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEFALOCNAssetLocationCodeGet: async (assetLocationCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetLocationCode' is not null or undefined
            assertParamExists('tABLEFALOCNAssetLocationCodeGet', 'assetLocationCode', assetLocationCode)
            const localVarPath = `/TABLE_FALOCN('{AssetLocationCode}')`
                .replace(`{${"AssetLocationCode"}}`, encodeURIComponent(String(assetLocationCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEFALOCNGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TABLE_FALOCN`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TABLEFALOCNApi - functional programming interface
 * @export
 */
export const TABLEFALOCNApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TABLEFALOCNApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLEFALOCNAssetLocationCodeGet(assetLocationCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TABLEFALOCN>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLEFALOCNAssetLocationCodeGet(assetLocationCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLEFALOCNGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedTABLEFALOCN>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLEFALOCNGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TABLEFALOCNApi - factory interface
 * @export
 */
export const TABLEFALOCNApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TABLEFALOCNApiFp(configuration)
    return {
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEFALOCNAssetLocationCodeGet(assetLocationCode: string, options?: any): AxiosPromise<TABLEFALOCN> {
            return localVarFp.tABLEFALOCNAssetLocationCodeGet(assetLocationCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEFALOCNGet(options?: any): AxiosPromise<PagedTABLEFALOCN> {
            return localVarFp.tABLEFALOCNGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TABLEFALOCNApi - interface
 * @export
 * @interface TABLEFALOCNApi
 */
export interface TABLEFALOCNApiInterface {
    /**
     * 
     * @param {string} assetLocationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEFALOCNApiInterface
     */
    tABLEFALOCNAssetLocationCodeGet(assetLocationCode: string, options?: AxiosRequestConfig): AxiosPromise<TABLEFALOCN>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEFALOCNApiInterface
     */
    tABLEFALOCNGet(options?: AxiosRequestConfig): AxiosPromise<PagedTABLEFALOCN>;

}

/**
 * TABLEFALOCNApi - object-oriented interface
 * @export
 * @class TABLEFALOCNApi
 * @extends {BaseAPI}
 */
export class TABLEFALOCNApi extends BaseAPI implements TABLEFALOCNApiInterface {
    /**
     * 
     * @param {string} assetLocationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEFALOCNApi
     */
    public tABLEFALOCNAssetLocationCodeGet(assetLocationCode: string, options?: AxiosRequestConfig) {
        return TABLEFALOCNApiFp(this.configuration).tABLEFALOCNAssetLocationCodeGet(assetLocationCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEFALOCNApi
     */
    public tABLEFALOCNGet(options?: AxiosRequestConfig) {
        return TABLEFALOCNApiFp(this.configuration).tABLEFALOCNGet(options).then((request) => request(this.axios, this.basePath));
    }
}
