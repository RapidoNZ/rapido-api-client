/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ICCategory2 } from '../models';
// @ts-ignore
import { PagedICCategory2 } from '../models';
/**
 * ICCategory2Api - axios parameter creator
 * @export
 */
export const ICCategory2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2CodeDelete: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('iCCategory2CodeDelete', 'code', code)
            const localVarPath = `/ICCategory2('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2CodeGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('iCCategory2CodeGet', 'code', code)
            const localVarPath = `/ICCategory2('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2CodePatch: async (code: string, body: ICCategory2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('iCCategory2CodePatch', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCCategory2CodePatch', 'body', body)
            const localVarPath = `/ICCategory2('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2CodePut: async (code: string, body: ICCategory2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('iCCategory2CodePut', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCCategory2CodePut', 'body', body)
            const localVarPath = `/ICCategory2('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2Get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ICCategory2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICCategory2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2Post: async (body: ICCategory2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCCategory2Post', 'body', body)
            const localVarPath = `/ICCategory2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ICCategory2Api - functional programming interface
 * @export
 */
export const ICCategory2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ICCategory2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory2CodeDelete(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory2CodeDelete(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory2CodeGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICCategory2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory2CodeGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory2CodePatch(code: string, body: ICCategory2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory2CodePatch(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory2CodePut(code: string, body: ICCategory2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory2CodePut(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory2Get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedICCategory2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory2Get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ICCategory2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory2Post(body: ICCategory2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory2Post(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ICCategory2Api - factory interface
 * @export
 */
export const ICCategory2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ICCategory2ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2CodeDelete(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.iCCategory2CodeDelete(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2CodeGet(code: string, options?: any): AxiosPromise<ICCategory2> {
            return localVarFp.iCCategory2CodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2CodePatch(code: string, body: ICCategory2, options?: any): AxiosPromise<void> {
            return localVarFp.iCCategory2CodePatch(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2CodePut(code: string, body: ICCategory2, options?: any): AxiosPromise<void> {
            return localVarFp.iCCategory2CodePut(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2Get(options?: any): AxiosPromise<PagedICCategory2> {
            return localVarFp.iCCategory2Get(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICCategory2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory2Post(body: ICCategory2, options?: any): AxiosPromise<void> {
            return localVarFp.iCCategory2Post(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ICCategory2Api - interface
 * @export
 * @interface ICCategory2Api
 */
export interface ICCategory2ApiInterface {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2ApiInterface
     */
    iCCategory2CodeDelete(code: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2ApiInterface
     */
    iCCategory2CodeGet(code: string, options?: AxiosRequestConfig): AxiosPromise<ICCategory2>;

    /**
     * 
     * @param {string} code 
     * @param {ICCategory2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2ApiInterface
     */
    iCCategory2CodePatch(code: string, body: ICCategory2, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} code 
     * @param {ICCategory2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2ApiInterface
     */
    iCCategory2CodePut(code: string, body: ICCategory2, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2ApiInterface
     */
    iCCategory2Get(options?: AxiosRequestConfig): AxiosPromise<PagedICCategory2>;

    /**
     * 
     * @param {ICCategory2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2ApiInterface
     */
    iCCategory2Post(body: ICCategory2, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ICCategory2Api - object-oriented interface
 * @export
 * @class ICCategory2Api
 * @extends {BaseAPI}
 */
export class ICCategory2Api extends BaseAPI implements ICCategory2ApiInterface {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2Api
     */
    public iCCategory2CodeDelete(code: string, options?: AxiosRequestConfig) {
        return ICCategory2ApiFp(this.configuration).iCCategory2CodeDelete(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2Api
     */
    public iCCategory2CodeGet(code: string, options?: AxiosRequestConfig) {
        return ICCategory2ApiFp(this.configuration).iCCategory2CodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {ICCategory2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2Api
     */
    public iCCategory2CodePatch(code: string, body: ICCategory2, options?: AxiosRequestConfig) {
        return ICCategory2ApiFp(this.configuration).iCCategory2CodePatch(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {ICCategory2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2Api
     */
    public iCCategory2CodePut(code: string, body: ICCategory2, options?: AxiosRequestConfig) {
        return ICCategory2ApiFp(this.configuration).iCCategory2CodePut(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2Api
     */
    public iCCategory2Get(options?: AxiosRequestConfig) {
        return ICCategory2ApiFp(this.configuration).iCCategory2Get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ICCategory2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory2Api
     */
    public iCCategory2Post(body: ICCategory2, options?: AxiosRequestConfig) {
        return ICCategory2ApiFp(this.configuration).iCCategory2Post(body, options).then((request) => request(this.axios, this.basePath));
    }
}
