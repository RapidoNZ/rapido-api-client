/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { COBranch } from '../models';
// @ts-ignore
import { PagedCOBranch } from '../models';
/**
 * COBranchApi - axios parameter creator
 * @export
 */
export const COBranchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} branchCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchBranchCodeDelete: async (branchCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'branchCode' is not null or undefined
            assertParamExists('cOBranchBranchCodeDelete', 'branchCode', branchCode)
            const localVarPath = `/COBranch('{BranchCode}')`
                .replace(`{${"BranchCode"}}`, encodeURIComponent(String(branchCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} branchCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchBranchCodeGet: async (branchCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'branchCode' is not null or undefined
            assertParamExists('cOBranchBranchCodeGet', 'branchCode', branchCode)
            const localVarPath = `/COBranch('{BranchCode}')`
                .replace(`{${"BranchCode"}}`, encodeURIComponent(String(branchCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} branchCode 
         * @param {COBranch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchBranchCodePatch: async (branchCode: string, body: COBranch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'branchCode' is not null or undefined
            assertParamExists('cOBranchBranchCodePatch', 'branchCode', branchCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOBranchBranchCodePatch', 'body', body)
            const localVarPath = `/COBranch('{BranchCode}')`
                .replace(`{${"BranchCode"}}`, encodeURIComponent(String(branchCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} branchCode 
         * @param {COBranch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchBranchCodePut: async (branchCode: string, body: COBranch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'branchCode' is not null or undefined
            assertParamExists('cOBranchBranchCodePut', 'branchCode', branchCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOBranchBranchCodePut', 'body', body)
            const localVarPath = `/COBranch('{BranchCode}')`
                .replace(`{${"BranchCode"}}`, encodeURIComponent(String(branchCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/COBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {COBranch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchPost: async (body: COBranch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOBranchPost', 'body', body)
            const localVarPath = `/COBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * COBranchApi - functional programming interface
 * @export
 */
export const COBranchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = COBranchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} branchCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBranchBranchCodeDelete(branchCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBranchBranchCodeDelete(branchCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} branchCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBranchBranchCodeGet(branchCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<COBranch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBranchBranchCodeGet(branchCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} branchCode 
         * @param {COBranch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBranchBranchCodePatch(branchCode: string, body: COBranch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBranchBranchCodePatch(branchCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} branchCode 
         * @param {COBranch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBranchBranchCodePut(branchCode: string, body: COBranch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBranchBranchCodePut(branchCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBranchGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCOBranch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBranchGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {COBranch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBranchPost(body: COBranch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBranchPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * COBranchApi - factory interface
 * @export
 */
export const COBranchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = COBranchApiFp(configuration)
    return {
        /**
         * 
         * @param {string} branchCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchBranchCodeDelete(branchCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.cOBranchBranchCodeDelete(branchCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} branchCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchBranchCodeGet(branchCode: string, options?: any): AxiosPromise<COBranch> {
            return localVarFp.cOBranchBranchCodeGet(branchCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} branchCode 
         * @param {COBranch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchBranchCodePatch(branchCode: string, body: COBranch, options?: any): AxiosPromise<void> {
            return localVarFp.cOBranchBranchCodePatch(branchCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} branchCode 
         * @param {COBranch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchBranchCodePut(branchCode: string, body: COBranch, options?: any): AxiosPromise<void> {
            return localVarFp.cOBranchBranchCodePut(branchCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchGet(options?: any): AxiosPromise<PagedCOBranch> {
            return localVarFp.cOBranchGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {COBranch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBranchPost(body: COBranch, options?: any): AxiosPromise<void> {
            return localVarFp.cOBranchPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * COBranchApi - interface
 * @export
 * @interface COBranchApi
 */
export interface COBranchApiInterface {
    /**
     * 
     * @param {string} branchCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApiInterface
     */
    cOBranchBranchCodeDelete(branchCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} branchCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApiInterface
     */
    cOBranchBranchCodeGet(branchCode: string, options?: AxiosRequestConfig): AxiosPromise<COBranch>;

    /**
     * 
     * @param {string} branchCode 
     * @param {COBranch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApiInterface
     */
    cOBranchBranchCodePatch(branchCode: string, body: COBranch, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} branchCode 
     * @param {COBranch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApiInterface
     */
    cOBranchBranchCodePut(branchCode: string, body: COBranch, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApiInterface
     */
    cOBranchGet(options?: AxiosRequestConfig): AxiosPromise<PagedCOBranch>;

    /**
     * 
     * @param {COBranch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApiInterface
     */
    cOBranchPost(body: COBranch, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * COBranchApi - object-oriented interface
 * @export
 * @class COBranchApi
 * @extends {BaseAPI}
 */
export class COBranchApi extends BaseAPI implements COBranchApiInterface {
    /**
     * 
     * @param {string} branchCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApi
     */
    public cOBranchBranchCodeDelete(branchCode: string, options?: AxiosRequestConfig) {
        return COBranchApiFp(this.configuration).cOBranchBranchCodeDelete(branchCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} branchCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApi
     */
    public cOBranchBranchCodeGet(branchCode: string, options?: AxiosRequestConfig) {
        return COBranchApiFp(this.configuration).cOBranchBranchCodeGet(branchCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} branchCode 
     * @param {COBranch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApi
     */
    public cOBranchBranchCodePatch(branchCode: string, body: COBranch, options?: AxiosRequestConfig) {
        return COBranchApiFp(this.configuration).cOBranchBranchCodePatch(branchCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} branchCode 
     * @param {COBranch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApi
     */
    public cOBranchBranchCodePut(branchCode: string, body: COBranch, options?: AxiosRequestConfig) {
        return COBranchApiFp(this.configuration).cOBranchBranchCodePut(branchCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApi
     */
    public cOBranchGet(options?: AxiosRequestConfig) {
        return COBranchApiFp(this.configuration).cOBranchGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {COBranch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBranchApi
     */
    public cOBranchPost(body: COBranch, options?: AxiosRequestConfig) {
        return COBranchApiFp(this.configuration).cOBranchPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
