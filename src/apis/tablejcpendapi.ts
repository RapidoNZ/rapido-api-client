/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagedTABLEJCPEND } from '../models';
// @ts-ignore
import { TABLEJCPEND } from '../models';
/**
 * TABLEJCPENDApi - axios parameter creator
 * @export
 */
export const TABLEJCPENDApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEJCPENDGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TABLE_JCPEND`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sourceModule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEJCPENDSourceModuleGet: async (sourceModule: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceModule' is not null or undefined
            assertParamExists('tABLEJCPENDSourceModuleGet', 'sourceModule', sourceModule)
            const localVarPath = `/TABLE_JCPEND('{SourceModule}')`
                .replace(`{${"SourceModule"}}`, encodeURIComponent(String(sourceModule)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TABLEJCPENDApi - functional programming interface
 * @export
 */
export const TABLEJCPENDApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TABLEJCPENDApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLEJCPENDGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedTABLEJCPEND>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLEJCPENDGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sourceModule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLEJCPENDSourceModuleGet(sourceModule: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TABLEJCPEND>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLEJCPENDSourceModuleGet(sourceModule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TABLEJCPENDApi - factory interface
 * @export
 */
export const TABLEJCPENDApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TABLEJCPENDApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEJCPENDGet(options?: any): AxiosPromise<PagedTABLEJCPEND> {
            return localVarFp.tABLEJCPENDGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sourceModule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEJCPENDSourceModuleGet(sourceModule: string, options?: any): AxiosPromise<TABLEJCPEND> {
            return localVarFp.tABLEJCPENDSourceModuleGet(sourceModule, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TABLEJCPENDApi - interface
 * @export
 * @interface TABLEJCPENDApi
 */
export interface TABLEJCPENDApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEJCPENDApiInterface
     */
    tABLEJCPENDGet(options?: AxiosRequestConfig): AxiosPromise<PagedTABLEJCPEND>;

    /**
     * 
     * @param {string} sourceModule 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEJCPENDApiInterface
     */
    tABLEJCPENDSourceModuleGet(sourceModule: string, options?: AxiosRequestConfig): AxiosPromise<TABLEJCPEND>;

}

/**
 * TABLEJCPENDApi - object-oriented interface
 * @export
 * @class TABLEJCPENDApi
 * @extends {BaseAPI}
 */
export class TABLEJCPENDApi extends BaseAPI implements TABLEJCPENDApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEJCPENDApi
     */
    public tABLEJCPENDGet(options?: AxiosRequestConfig) {
        return TABLEJCPENDApiFp(this.configuration).tABLEJCPENDGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sourceModule 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEJCPENDApi
     */
    public tABLEJCPENDSourceModuleGet(sourceModule: string, options?: AxiosRequestConfig) {
        return TABLEJCPENDApiFp(this.configuration).tABLEJCPENDSourceModuleGet(sourceModule, options).then((request) => request(this.axios, this.basePath));
    }
}
