/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBBankingSummary } from '../models';
// @ts-ignore
import { PagedCBBankingSummary } from '../models';
/**
 * CBBankingSummaryApi - axios parameter creator
 * @export
 */
export const CBBankingSummaryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummaryGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBBankingSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CBBankingSummary} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummaryPost: async (body: CBBankingSummary, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBBankingSummaryPost', 'body', body)
            const localVarPath = `/CBBankingSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummarySummaryIDDelete: async (summaryID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'summaryID' is not null or undefined
            assertParamExists('cBBankingSummarySummaryIDDelete', 'summaryID', summaryID)
            const localVarPath = `/CBBankingSummary('{SummaryID}')`
                .replace(`{${"SummaryID"}}`, encodeURIComponent(String(summaryID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummarySummaryIDGet: async (summaryID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'summaryID' is not null or undefined
            assertParamExists('cBBankingSummarySummaryIDGet', 'summaryID', summaryID)
            const localVarPath = `/CBBankingSummary('{SummaryID}')`
                .replace(`{${"SummaryID"}}`, encodeURIComponent(String(summaryID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {CBBankingSummary} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummarySummaryIDPatch: async (summaryID: number, body: CBBankingSummary, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'summaryID' is not null or undefined
            assertParamExists('cBBankingSummarySummaryIDPatch', 'summaryID', summaryID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBBankingSummarySummaryIDPatch', 'body', body)
            const localVarPath = `/CBBankingSummary('{SummaryID}')`
                .replace(`{${"SummaryID"}}`, encodeURIComponent(String(summaryID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {CBBankingSummary} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummarySummaryIDPut: async (summaryID: number, body: CBBankingSummary, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'summaryID' is not null or undefined
            assertParamExists('cBBankingSummarySummaryIDPut', 'summaryID', summaryID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBBankingSummarySummaryIDPut', 'body', body)
            const localVarPath = `/CBBankingSummary('{SummaryID}')`
                .replace(`{${"SummaryID"}}`, encodeURIComponent(String(summaryID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBBankingSummaryApi - functional programming interface
 * @export
 */
export const CBBankingSummaryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBBankingSummaryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingSummaryGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBBankingSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingSummaryGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CBBankingSummary} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingSummaryPost(body: CBBankingSummary, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingSummaryPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingSummarySummaryIDDelete(summaryID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingSummarySummaryIDDelete(summaryID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingSummarySummaryIDGet(summaryID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBBankingSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingSummarySummaryIDGet(summaryID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {CBBankingSummary} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingSummarySummaryIDPatch(summaryID: number, body: CBBankingSummary, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingSummarySummaryIDPatch(summaryID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {CBBankingSummary} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankingSummarySummaryIDPut(summaryID: number, body: CBBankingSummary, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankingSummarySummaryIDPut(summaryID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBBankingSummaryApi - factory interface
 * @export
 */
export const CBBankingSummaryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBBankingSummaryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummaryGet(options?: any): AxiosPromise<PagedCBBankingSummary> {
            return localVarFp.cBBankingSummaryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CBBankingSummary} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummaryPost(body: CBBankingSummary, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingSummaryPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummarySummaryIDDelete(summaryID: number, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingSummarySummaryIDDelete(summaryID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummarySummaryIDGet(summaryID: number, options?: any): AxiosPromise<CBBankingSummary> {
            return localVarFp.cBBankingSummarySummaryIDGet(summaryID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {CBBankingSummary} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummarySummaryIDPatch(summaryID: number, body: CBBankingSummary, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingSummarySummaryIDPatch(summaryID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} summaryID 
         * @param {CBBankingSummary} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankingSummarySummaryIDPut(summaryID: number, body: CBBankingSummary, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankingSummarySummaryIDPut(summaryID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBBankingSummaryApi - interface
 * @export
 * @interface CBBankingSummaryApi
 */
export interface CBBankingSummaryApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApiInterface
     */
    cBBankingSummaryGet(options?: AxiosRequestConfig): AxiosPromise<PagedCBBankingSummary>;

    /**
     * 
     * @param {CBBankingSummary} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApiInterface
     */
    cBBankingSummaryPost(body: CBBankingSummary, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} summaryID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApiInterface
     */
    cBBankingSummarySummaryIDDelete(summaryID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} summaryID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApiInterface
     */
    cBBankingSummarySummaryIDGet(summaryID: number, options?: AxiosRequestConfig): AxiosPromise<CBBankingSummary>;

    /**
     * 
     * @param {number} summaryID 
     * @param {CBBankingSummary} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApiInterface
     */
    cBBankingSummarySummaryIDPatch(summaryID: number, body: CBBankingSummary, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} summaryID 
     * @param {CBBankingSummary} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApiInterface
     */
    cBBankingSummarySummaryIDPut(summaryID: number, body: CBBankingSummary, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CBBankingSummaryApi - object-oriented interface
 * @export
 * @class CBBankingSummaryApi
 * @extends {BaseAPI}
 */
export class CBBankingSummaryApi extends BaseAPI implements CBBankingSummaryApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApi
     */
    public cBBankingSummaryGet(options?: AxiosRequestConfig) {
        return CBBankingSummaryApiFp(this.configuration).cBBankingSummaryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CBBankingSummary} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApi
     */
    public cBBankingSummaryPost(body: CBBankingSummary, options?: AxiosRequestConfig) {
        return CBBankingSummaryApiFp(this.configuration).cBBankingSummaryPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} summaryID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApi
     */
    public cBBankingSummarySummaryIDDelete(summaryID: number, options?: AxiosRequestConfig) {
        return CBBankingSummaryApiFp(this.configuration).cBBankingSummarySummaryIDDelete(summaryID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} summaryID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApi
     */
    public cBBankingSummarySummaryIDGet(summaryID: number, options?: AxiosRequestConfig) {
        return CBBankingSummaryApiFp(this.configuration).cBBankingSummarySummaryIDGet(summaryID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} summaryID 
     * @param {CBBankingSummary} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApi
     */
    public cBBankingSummarySummaryIDPatch(summaryID: number, body: CBBankingSummary, options?: AxiosRequestConfig) {
        return CBBankingSummaryApiFp(this.configuration).cBBankingSummarySummaryIDPatch(summaryID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} summaryID 
     * @param {CBBankingSummary} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankingSummaryApi
     */
    public cBBankingSummarySummaryIDPut(summaryID: number, body: CBBankingSummary, options?: AxiosRequestConfig) {
        return CBBankingSummaryApiFp(this.configuration).cBBankingSummarySummaryIDPut(summaryID, body, options).then((request) => request(this.axios, this.basePath));
    }
}
