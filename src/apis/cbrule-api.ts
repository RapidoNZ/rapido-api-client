/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBRule } from '../models';
// @ts-ignore
import { PagedCBRule } from '../models';
/**
 * CBRuleApi - axios parameter creator
 * @export
 */
export const CBRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CBRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRulePost: async (body: CBRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBRulePost', 'body', body)
            const localVarPath = `/CBRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleRuleIDDelete: async (ruleID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleID' is not null or undefined
            assertParamExists('cBRuleRuleIDDelete', 'ruleID', ruleID)
            const localVarPath = `/CBRule('{RuleID}')`
                .replace(`{${"RuleID"}}`, encodeURIComponent(String(ruleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleRuleIDGet: async (ruleID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleID' is not null or undefined
            assertParamExists('cBRuleRuleIDGet', 'ruleID', ruleID)
            const localVarPath = `/CBRule('{RuleID}')`
                .replace(`{${"RuleID"}}`, encodeURIComponent(String(ruleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {CBRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleRuleIDPatch: async (ruleID: number, body: CBRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleID' is not null or undefined
            assertParamExists('cBRuleRuleIDPatch', 'ruleID', ruleID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBRuleRuleIDPatch', 'body', body)
            const localVarPath = `/CBRule('{RuleID}')`
                .replace(`{${"RuleID"}}`, encodeURIComponent(String(ruleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {CBRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleRuleIDPut: async (ruleID: number, body: CBRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleID' is not null or undefined
            assertParamExists('cBRuleRuleIDPut', 'ruleID', ruleID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBRuleRuleIDPut', 'body', body)
            const localVarPath = `/CBRule('{RuleID}')`
                .replace(`{${"RuleID"}}`, encodeURIComponent(String(ruleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBRuleApi - functional programming interface
 * @export
 */
export const CBRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBRuleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBRuleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CBRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBRulePost(body: CBRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBRulePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBRuleRuleIDDelete(ruleID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBRuleRuleIDDelete(ruleID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBRuleRuleIDGet(ruleID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBRuleRuleIDGet(ruleID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {CBRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBRuleRuleIDPatch(ruleID: number, body: CBRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBRuleRuleIDPatch(ruleID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {CBRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBRuleRuleIDPut(ruleID: number, body: CBRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBRuleRuleIDPut(ruleID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBRuleApi - factory interface
 * @export
 */
export const CBRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBRuleApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleGet(options?: any): AxiosPromise<PagedCBRule> {
            return localVarFp.cBRuleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CBRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRulePost(body: CBRule, options?: any): AxiosPromise<void> {
            return localVarFp.cBRulePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleRuleIDDelete(ruleID: number, options?: any): AxiosPromise<void> {
            return localVarFp.cBRuleRuleIDDelete(ruleID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleRuleIDGet(ruleID: number, options?: any): AxiosPromise<CBRule> {
            return localVarFp.cBRuleRuleIDGet(ruleID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {CBRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleRuleIDPatch(ruleID: number, body: CBRule, options?: any): AxiosPromise<void> {
            return localVarFp.cBRuleRuleIDPatch(ruleID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {CBRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBRuleRuleIDPut(ruleID: number, body: CBRule, options?: any): AxiosPromise<void> {
            return localVarFp.cBRuleRuleIDPut(ruleID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBRuleApi - interface
 * @export
 * @interface CBRuleApi
 */
export interface CBRuleApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApiInterface
     */
    cBRuleGet(options?: AxiosRequestConfig): AxiosPromise<PagedCBRule>;

    /**
     * 
     * @param {CBRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApiInterface
     */
    cBRulePost(body: CBRule, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} ruleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApiInterface
     */
    cBRuleRuleIDDelete(ruleID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} ruleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApiInterface
     */
    cBRuleRuleIDGet(ruleID: number, options?: AxiosRequestConfig): AxiosPromise<CBRule>;

    /**
     * 
     * @param {number} ruleID 
     * @param {CBRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApiInterface
     */
    cBRuleRuleIDPatch(ruleID: number, body: CBRule, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} ruleID 
     * @param {CBRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApiInterface
     */
    cBRuleRuleIDPut(ruleID: number, body: CBRule, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CBRuleApi - object-oriented interface
 * @export
 * @class CBRuleApi
 * @extends {BaseAPI}
 */
export class CBRuleApi extends BaseAPI implements CBRuleApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApi
     */
    public cBRuleGet(options?: AxiosRequestConfig) {
        return CBRuleApiFp(this.configuration).cBRuleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CBRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApi
     */
    public cBRulePost(body: CBRule, options?: AxiosRequestConfig) {
        return CBRuleApiFp(this.configuration).cBRulePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} ruleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApi
     */
    public cBRuleRuleIDDelete(ruleID: number, options?: AxiosRequestConfig) {
        return CBRuleApiFp(this.configuration).cBRuleRuleIDDelete(ruleID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} ruleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApi
     */
    public cBRuleRuleIDGet(ruleID: number, options?: AxiosRequestConfig) {
        return CBRuleApiFp(this.configuration).cBRuleRuleIDGet(ruleID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} ruleID 
     * @param {CBRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApi
     */
    public cBRuleRuleIDPatch(ruleID: number, body: CBRule, options?: AxiosRequestConfig) {
        return CBRuleApiFp(this.configuration).cBRuleRuleIDPatch(ruleID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} ruleID 
     * @param {CBRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBRuleApi
     */
    public cBRuleRuleIDPut(ruleID: number, body: CBRule, options?: AxiosRequestConfig) {
        return CBRuleApiFp(this.configuration).cBRuleRuleIDPut(ruleID, body, options).then((request) => request(this.axios, this.basePath));
    }
}
