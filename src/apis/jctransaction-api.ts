/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JCTransaction } from '../models';
// @ts-ignore
import { PagedJCTransaction } from '../models';
/**
 * JCTransactionApi - axios parameter creator
 * @export
 */
export const JCTransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/JCTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JCTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionPost: async (body: JCTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCTransactionPost', 'body', body)
            const localVarPath = `/JCTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDDelete: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('jCTransactionTransactionIDDelete', 'transactionID', transactionID)
            const localVarPath = `/JCTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * JCTransaction/DuplicateContra is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDDuplicateContraGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('jCTransactionTransactionIDDuplicateContraGet', 'transactionID', transactionID)
            const localVarPath = `/JCTransaction('{TransactionID}')/DuplicateContra`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * JCTransaction/Duplicate is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDDuplicateGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('jCTransactionTransactionIDDuplicateGet', 'transactionID', transactionID)
            const localVarPath = `/JCTransaction('{TransactionID}')/Duplicate`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('jCTransactionTransactionIDGet', 'transactionID', transactionID)
            const localVarPath = `/JCTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {JCTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDPatch: async (transactionID: number, body: JCTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('jCTransactionTransactionIDPatch', 'transactionID', transactionID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCTransactionTransactionIDPatch', 'body', body)
            const localVarPath = `/JCTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {JCTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDPut: async (transactionID: number, body: JCTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('jCTransactionTransactionIDPut', 'transactionID', transactionID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCTransactionTransactionIDPut', 'body', body)
            const localVarPath = `/JCTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JCTransactionApi - functional programming interface
 * @export
 */
export const JCTransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JCTransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCTransactionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedJCTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCTransactionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JCTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCTransactionPost(body: JCTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCTransactionPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCTransactionTransactionIDDelete(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * JCTransaction/DuplicateContra is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCTransactionTransactionIDDuplicateContraGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * JCTransaction/Duplicate is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCTransactionTransactionIDDuplicateGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCTransactionTransactionIDDuplicateGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JCTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCTransactionTransactionIDGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {JCTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCTransactionTransactionIDPatch(transactionID: number, body: JCTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCTransactionTransactionIDPatch(transactionID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {JCTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCTransactionTransactionIDPut(transactionID: number, body: JCTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCTransactionTransactionIDPut(transactionID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JCTransactionApi - factory interface
 * @export
 */
export const JCTransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JCTransactionApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionGet(options?: any): AxiosPromise<PagedJCTransaction> {
            return localVarFp.jCTransactionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JCTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionPost(body: JCTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.jCTransactionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDDelete(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.jCTransactionTransactionIDDelete(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * JCTransaction/DuplicateContra is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.jCTransactionTransactionIDDuplicateContraGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * JCTransaction/Duplicate is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDDuplicateGet(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.jCTransactionTransactionIDDuplicateGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDGet(transactionID: number, options?: any): AxiosPromise<JCTransaction> {
            return localVarFp.jCTransactionTransactionIDGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {JCTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDPatch(transactionID: number, body: JCTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.jCTransactionTransactionIDPatch(transactionID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {JCTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCTransactionTransactionIDPut(transactionID: number, body: JCTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.jCTransactionTransactionIDPut(transactionID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JCTransactionApi - interface
 * @export
 * @interface JCTransactionApi
 */
export interface JCTransactionApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApiInterface
     */
    jCTransactionGet(options?: AxiosRequestConfig): AxiosPromise<PagedJCTransaction>;

    /**
     * 
     * @param {JCTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApiInterface
     */
    jCTransactionPost(body: JCTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApiInterface
     */
    jCTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * JCTransaction/DuplicateContra is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApiInterface
     */
    jCTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * JCTransaction/Duplicate is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApiInterface
     */
    jCTransactionTransactionIDDuplicateGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApiInterface
     */
    jCTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<JCTransaction>;

    /**
     * 
     * @param {number} transactionID 
     * @param {JCTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApiInterface
     */
    jCTransactionTransactionIDPatch(transactionID: number, body: JCTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {JCTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApiInterface
     */
    jCTransactionTransactionIDPut(transactionID: number, body: JCTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * JCTransactionApi - object-oriented interface
 * @export
 * @class JCTransactionApi
 * @extends {BaseAPI}
 */
export class JCTransactionApi extends BaseAPI implements JCTransactionApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApi
     */
    public jCTransactionGet(options?: AxiosRequestConfig) {
        return JCTransactionApiFp(this.configuration).jCTransactionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JCTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApi
     */
    public jCTransactionPost(body: JCTransaction, options?: AxiosRequestConfig) {
        return JCTransactionApiFp(this.configuration).jCTransactionPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApi
     */
    public jCTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig) {
        return JCTransactionApiFp(this.configuration).jCTransactionTransactionIDDelete(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * JCTransaction/DuplicateContra is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApi
     */
    public jCTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: AxiosRequestConfig) {
        return JCTransactionApiFp(this.configuration).jCTransactionTransactionIDDuplicateContraGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * JCTransaction/Duplicate is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApi
     */
    public jCTransactionTransactionIDDuplicateGet(transactionID: number, options?: AxiosRequestConfig) {
        return JCTransactionApiFp(this.configuration).jCTransactionTransactionIDDuplicateGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApi
     */
    public jCTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig) {
        return JCTransactionApiFp(this.configuration).jCTransactionTransactionIDGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {JCTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApi
     */
    public jCTransactionTransactionIDPatch(transactionID: number, body: JCTransaction, options?: AxiosRequestConfig) {
        return JCTransactionApiFp(this.configuration).jCTransactionTransactionIDPatch(transactionID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {JCTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCTransactionApi
     */
    public jCTransactionTransactionIDPut(transactionID: number, body: JCTransaction, options?: AxiosRequestConfig) {
        return JCTransactionApiFp(this.configuration).jCTransactionTransactionIDPut(transactionID, body, options).then((request) => request(this.axios, this.basePath));
    }
}
