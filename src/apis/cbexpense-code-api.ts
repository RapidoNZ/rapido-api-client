/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBExpenseCode } from '../models';
// @ts-ignore
import { PagedCBExpenseCode } from '../models';
/**
 * CBExpenseCodeApi - axios parameter creator
 * @export
 */
export const CBExpenseCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeAnalysisCodeDelete: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('cBExpenseCodeAnalysisCodeDelete', 'analysisCode', analysisCode)
            const localVarPath = `/CBExpenseCode('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeAnalysisCodeGet: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('cBExpenseCodeAnalysisCodeGet', 'analysisCode', analysisCode)
            const localVarPath = `/CBExpenseCode('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBExpenseCode} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeAnalysisCodePatch: async (analysisCode: string, body: CBExpenseCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('cBExpenseCodeAnalysisCodePatch', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBExpenseCodeAnalysisCodePatch', 'body', body)
            const localVarPath = `/CBExpenseCode('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBExpenseCode} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeAnalysisCodePut: async (analysisCode: string, body: CBExpenseCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('cBExpenseCodeAnalysisCodePut', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBExpenseCodeAnalysisCodePut', 'body', body)
            const localVarPath = `/CBExpenseCode('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBExpenseCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CBExpenseCode} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodePost: async (body: CBExpenseCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBExpenseCodePost', 'body', body)
            const localVarPath = `/CBExpenseCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBExpenseCodeApi - functional programming interface
 * @export
 */
export const CBExpenseCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBExpenseCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBExpenseCodeAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBExpenseCodeAnalysisCodeDelete(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBExpenseCodeAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBExpenseCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBExpenseCodeAnalysisCodeGet(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBExpenseCode} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBExpenseCodeAnalysisCodePatch(analysisCode: string, body: CBExpenseCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBExpenseCodeAnalysisCodePatch(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBExpenseCode} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBExpenseCodeAnalysisCodePut(analysisCode: string, body: CBExpenseCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBExpenseCodeAnalysisCodePut(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBExpenseCodeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBExpenseCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBExpenseCodeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CBExpenseCode} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBExpenseCodePost(body: CBExpenseCode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBExpenseCodePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBExpenseCodeApi - factory interface
 * @export
 */
export const CBExpenseCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBExpenseCodeApiFp(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeAnalysisCodeDelete(analysisCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.cBExpenseCodeAnalysisCodeDelete(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeAnalysisCodeGet(analysisCode: string, options?: any): AxiosPromise<CBExpenseCode> {
            return localVarFp.cBExpenseCodeAnalysisCodeGet(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBExpenseCode} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeAnalysisCodePatch(analysisCode: string, body: CBExpenseCode, options?: any): AxiosPromise<void> {
            return localVarFp.cBExpenseCodeAnalysisCodePatch(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBExpenseCode} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeAnalysisCodePut(analysisCode: string, body: CBExpenseCode, options?: any): AxiosPromise<void> {
            return localVarFp.cBExpenseCodeAnalysisCodePut(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodeGet(options?: any): AxiosPromise<PagedCBExpenseCode> {
            return localVarFp.cBExpenseCodeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CBExpenseCode} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBExpenseCodePost(body: CBExpenseCode, options?: any): AxiosPromise<void> {
            return localVarFp.cBExpenseCodePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBExpenseCodeApi - interface
 * @export
 * @interface CBExpenseCodeApi
 */
export interface CBExpenseCodeApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApiInterface
     */
    cBExpenseCodeAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApiInterface
     */
    cBExpenseCodeAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<CBExpenseCode>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {CBExpenseCode} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApiInterface
     */
    cBExpenseCodeAnalysisCodePatch(analysisCode: string, body: CBExpenseCode, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {CBExpenseCode} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApiInterface
     */
    cBExpenseCodeAnalysisCodePut(analysisCode: string, body: CBExpenseCode, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApiInterface
     */
    cBExpenseCodeGet(options?: AxiosRequestConfig): AxiosPromise<PagedCBExpenseCode>;

    /**
     * 
     * @param {CBExpenseCode} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApiInterface
     */
    cBExpenseCodePost(body: CBExpenseCode, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CBExpenseCodeApi - object-oriented interface
 * @export
 * @class CBExpenseCodeApi
 * @extends {BaseAPI}
 */
export class CBExpenseCodeApi extends BaseAPI implements CBExpenseCodeApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApi
     */
    public cBExpenseCodeAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig) {
        return CBExpenseCodeApiFp(this.configuration).cBExpenseCodeAnalysisCodeDelete(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApi
     */
    public cBExpenseCodeAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig) {
        return CBExpenseCodeApiFp(this.configuration).cBExpenseCodeAnalysisCodeGet(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {CBExpenseCode} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApi
     */
    public cBExpenseCodeAnalysisCodePatch(analysisCode: string, body: CBExpenseCode, options?: AxiosRequestConfig) {
        return CBExpenseCodeApiFp(this.configuration).cBExpenseCodeAnalysisCodePatch(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {CBExpenseCode} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApi
     */
    public cBExpenseCodeAnalysisCodePut(analysisCode: string, body: CBExpenseCode, options?: AxiosRequestConfig) {
        return CBExpenseCodeApiFp(this.configuration).cBExpenseCodeAnalysisCodePut(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApi
     */
    public cBExpenseCodeGet(options?: AxiosRequestConfig) {
        return CBExpenseCodeApiFp(this.configuration).cBExpenseCodeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CBExpenseCode} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBExpenseCodeApi
     */
    public cBExpenseCodePost(body: CBExpenseCode, options?: AxiosRequestConfig) {
        return CBExpenseCodeApiFp(this.configuration).cBExpenseCodePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
