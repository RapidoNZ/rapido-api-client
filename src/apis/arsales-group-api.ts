/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARSalesGroup } from '../models';
// @ts-ignore
import { PagedARSalesGroup } from '../models';
/**
 * ARSalesGroupApi - axios parameter creator
 * @export
 */
export const ARSalesGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupAnalysisCodeDelete: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aRSalesGroupAnalysisCodeDelete', 'analysisCode', analysisCode)
            const localVarPath = `/ARSalesGroup('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupAnalysisCodeGet: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aRSalesGroupAnalysisCodeGet', 'analysisCode', analysisCode)
            const localVarPath = `/ARSalesGroup('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {ARSalesGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupAnalysisCodePatch: async (analysisCode: string, body: ARSalesGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aRSalesGroupAnalysisCodePatch', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesGroupAnalysisCodePatch', 'body', body)
            const localVarPath = `/ARSalesGroup('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {ARSalesGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupAnalysisCodePut: async (analysisCode: string, body: ARSalesGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aRSalesGroupAnalysisCodePut', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesGroupAnalysisCodePut', 'body', body)
            const localVarPath = `/ARSalesGroup('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARSalesGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ARSalesGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupPost: async (body: ARSalesGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesGroupPost', 'body', body)
            const localVarPath = `/ARSalesGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARSalesGroupApi - functional programming interface
 * @export
 */
export const ARSalesGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARSalesGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesGroupAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesGroupAnalysisCodeDelete(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesGroupAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARSalesGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesGroupAnalysisCodeGet(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {ARSalesGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesGroupAnalysisCodePatch(analysisCode: string, body: ARSalesGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesGroupAnalysisCodePatch(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {ARSalesGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesGroupAnalysisCodePut(analysisCode: string, body: ARSalesGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesGroupAnalysisCodePut(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesGroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARSalesGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesGroupGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ARSalesGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesGroupPost(body: ARSalesGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesGroupPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARSalesGroupApi - factory interface
 * @export
 */
export const ARSalesGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARSalesGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupAnalysisCodeDelete(analysisCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesGroupAnalysisCodeDelete(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupAnalysisCodeGet(analysisCode: string, options?: any): AxiosPromise<ARSalesGroup> {
            return localVarFp.aRSalesGroupAnalysisCodeGet(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {ARSalesGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupAnalysisCodePatch(analysisCode: string, body: ARSalesGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesGroupAnalysisCodePatch(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {ARSalesGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupAnalysisCodePut(analysisCode: string, body: ARSalesGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesGroupAnalysisCodePut(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupGet(options?: any): AxiosPromise<PagedARSalesGroup> {
            return localVarFp.aRSalesGroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ARSalesGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesGroupPost(body: ARSalesGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesGroupPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARSalesGroupApi - interface
 * @export
 * @interface ARSalesGroupApi
 */
export interface ARSalesGroupApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApiInterface
     */
    aRSalesGroupAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApiInterface
     */
    aRSalesGroupAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<ARSalesGroup>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {ARSalesGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApiInterface
     */
    aRSalesGroupAnalysisCodePatch(analysisCode: string, body: ARSalesGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {ARSalesGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApiInterface
     */
    aRSalesGroupAnalysisCodePut(analysisCode: string, body: ARSalesGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApiInterface
     */
    aRSalesGroupGet(options?: AxiosRequestConfig): AxiosPromise<PagedARSalesGroup>;

    /**
     * 
     * @param {ARSalesGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApiInterface
     */
    aRSalesGroupPost(body: ARSalesGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ARSalesGroupApi - object-oriented interface
 * @export
 * @class ARSalesGroupApi
 * @extends {BaseAPI}
 */
export class ARSalesGroupApi extends BaseAPI implements ARSalesGroupApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApi
     */
    public aRSalesGroupAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig) {
        return ARSalesGroupApiFp(this.configuration).aRSalesGroupAnalysisCodeDelete(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApi
     */
    public aRSalesGroupAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig) {
        return ARSalesGroupApiFp(this.configuration).aRSalesGroupAnalysisCodeGet(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {ARSalesGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApi
     */
    public aRSalesGroupAnalysisCodePatch(analysisCode: string, body: ARSalesGroup, options?: AxiosRequestConfig) {
        return ARSalesGroupApiFp(this.configuration).aRSalesGroupAnalysisCodePatch(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {ARSalesGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApi
     */
    public aRSalesGroupAnalysisCodePut(analysisCode: string, body: ARSalesGroup, options?: AxiosRequestConfig) {
        return ARSalesGroupApiFp(this.configuration).aRSalesGroupAnalysisCodePut(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApi
     */
    public aRSalesGroupGet(options?: AxiosRequestConfig) {
        return ARSalesGroupApiFp(this.configuration).aRSalesGroupGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ARSalesGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesGroupApi
     */
    public aRSalesGroupPost(body: ARSalesGroup, options?: AxiosRequestConfig) {
        return ARSalesGroupApiFp(this.configuration).aRSalesGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
