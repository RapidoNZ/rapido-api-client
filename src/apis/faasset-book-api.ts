/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FAAssetBook } from '../models';
// @ts-ignore
import { PagedFAAssetBook } from '../models';
/**
 * FAAssetBookApi - axios parameter creator
 * @export
 */
export const FAAssetBookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} bookCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookBookCodeDelete: async (bookCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookCode' is not null or undefined
            assertParamExists('fAAssetBookBookCodeDelete', 'bookCode', bookCode)
            const localVarPath = `/FAAssetBook('{BookCode}')`
                .replace(`{${"BookCode"}}`, encodeURIComponent(String(bookCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookBookCodeGet: async (bookCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookCode' is not null or undefined
            assertParamExists('fAAssetBookBookCodeGet', 'bookCode', bookCode)
            const localVarPath = `/FAAssetBook('{BookCode}')`
                .replace(`{${"BookCode"}}`, encodeURIComponent(String(bookCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FAAssetBook} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookBookCodePatch: async (bookCode: string, body: FAAssetBook, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookCode' is not null or undefined
            assertParamExists('fAAssetBookBookCodePatch', 'bookCode', bookCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetBookBookCodePatch', 'body', body)
            const localVarPath = `/FAAssetBook('{BookCode}')`
                .replace(`{${"BookCode"}}`, encodeURIComponent(String(bookCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FAAssetBook} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookBookCodePut: async (bookCode: string, body: FAAssetBook, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookCode' is not null or undefined
            assertParamExists('fAAssetBookBookCodePut', 'bookCode', bookCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetBookBookCodePut', 'body', body)
            const localVarPath = `/FAAssetBook('{BookCode}')`
                .replace(`{${"BookCode"}}`, encodeURIComponent(String(bookCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/FAAssetBook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FAAssetBook} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookPost: async (body: FAAssetBook, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetBookPost', 'body', body)
            const localVarPath = `/FAAssetBook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAAssetBookApi - functional programming interface
 * @export
 */
export const FAAssetBookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAAssetBookApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} bookCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetBookBookCodeDelete(bookCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetBookBookCodeDelete(bookCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetBookBookCodeGet(bookCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAAssetBook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetBookBookCodeGet(bookCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FAAssetBook} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetBookBookCodePatch(bookCode: string, body: FAAssetBook, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetBookBookCodePatch(bookCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FAAssetBook} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetBookBookCodePut(bookCode: string, body: FAAssetBook, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetBookBookCodePut(bookCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetBookGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedFAAssetBook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetBookGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FAAssetBook} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetBookPost(body: FAAssetBook, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetBookPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FAAssetBookApi - factory interface
 * @export
 */
export const FAAssetBookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAAssetBookApiFp(configuration)
    return {
        /**
         * 
         * @param {string} bookCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookBookCodeDelete(bookCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetBookBookCodeDelete(bookCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookBookCodeGet(bookCode: string, options?: any): AxiosPromise<FAAssetBook> {
            return localVarFp.fAAssetBookBookCodeGet(bookCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FAAssetBook} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookBookCodePatch(bookCode: string, body: FAAssetBook, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetBookBookCodePatch(bookCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FAAssetBook} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookBookCodePut(bookCode: string, body: FAAssetBook, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetBookBookCodePut(bookCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookGet(options?: any): AxiosPromise<PagedFAAssetBook> {
            return localVarFp.fAAssetBookGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FAAssetBook} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetBookPost(body: FAAssetBook, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetBookPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAAssetBookApi - interface
 * @export
 * @interface FAAssetBookApi
 */
export interface FAAssetBookApiInterface {
    /**
     * 
     * @param {string} bookCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApiInterface
     */
    fAAssetBookBookCodeDelete(bookCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} bookCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApiInterface
     */
    fAAssetBookBookCodeGet(bookCode: string, options?: AxiosRequestConfig): AxiosPromise<FAAssetBook>;

    /**
     * 
     * @param {string} bookCode 
     * @param {FAAssetBook} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApiInterface
     */
    fAAssetBookBookCodePatch(bookCode: string, body: FAAssetBook, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} bookCode 
     * @param {FAAssetBook} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApiInterface
     */
    fAAssetBookBookCodePut(bookCode: string, body: FAAssetBook, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApiInterface
     */
    fAAssetBookGet(options?: AxiosRequestConfig): AxiosPromise<PagedFAAssetBook>;

    /**
     * 
     * @param {FAAssetBook} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApiInterface
     */
    fAAssetBookPost(body: FAAssetBook, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * FAAssetBookApi - object-oriented interface
 * @export
 * @class FAAssetBookApi
 * @extends {BaseAPI}
 */
export class FAAssetBookApi extends BaseAPI implements FAAssetBookApiInterface {
    /**
     * 
     * @param {string} bookCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApi
     */
    public fAAssetBookBookCodeDelete(bookCode: string, options?: AxiosRequestConfig) {
        return FAAssetBookApiFp(this.configuration).fAAssetBookBookCodeDelete(bookCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bookCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApi
     */
    public fAAssetBookBookCodeGet(bookCode: string, options?: AxiosRequestConfig) {
        return FAAssetBookApiFp(this.configuration).fAAssetBookBookCodeGet(bookCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bookCode 
     * @param {FAAssetBook} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApi
     */
    public fAAssetBookBookCodePatch(bookCode: string, body: FAAssetBook, options?: AxiosRequestConfig) {
        return FAAssetBookApiFp(this.configuration).fAAssetBookBookCodePatch(bookCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bookCode 
     * @param {FAAssetBook} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApi
     */
    public fAAssetBookBookCodePut(bookCode: string, body: FAAssetBook, options?: AxiosRequestConfig) {
        return FAAssetBookApiFp(this.configuration).fAAssetBookBookCodePut(bookCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApi
     */
    public fAAssetBookGet(options?: AxiosRequestConfig) {
        return FAAssetBookApiFp(this.configuration).fAAssetBookGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FAAssetBook} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetBookApi
     */
    public fAAssetBookPost(body: FAAssetBook, options?: AxiosRequestConfig) {
        return FAAssetBookApiFp(this.configuration).fAAssetBookPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
