/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JCInvoiceAmounts } from '../models';
// @ts-ignore
import { PagedJCInvoiceAmounts } from '../models';
/**
 * JCInvoiceAmountsApi - axios parameter creator
 * @export
 */
export const JCInvoiceAmountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCInvoiceAmountsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/JCInvoiceAmounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCInvoiceAmountsJobCodeGet: async (jobCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCInvoiceAmountsJobCodeGet', 'jobCode', jobCode)
            const localVarPath = `/JCInvoiceAmounts('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCInvoiceAmounts} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCInvoiceAmountsJobCodePatch: async (jobCode: string, body: JCInvoiceAmounts, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCInvoiceAmountsJobCodePatch', 'jobCode', jobCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCInvoiceAmountsJobCodePatch', 'body', body)
            const localVarPath = `/JCInvoiceAmounts('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCInvoiceAmounts} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCInvoiceAmountsJobCodePut: async (jobCode: string, body: JCInvoiceAmounts, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCInvoiceAmountsJobCodePut', 'jobCode', jobCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCInvoiceAmountsJobCodePut', 'body', body)
            const localVarPath = `/JCInvoiceAmounts('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JCInvoiceAmountsApi - functional programming interface
 * @export
 */
export const JCInvoiceAmountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JCInvoiceAmountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCInvoiceAmountsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedJCInvoiceAmounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCInvoiceAmountsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCInvoiceAmountsJobCodeGet(jobCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JCInvoiceAmounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCInvoiceAmountsJobCodeGet(jobCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCInvoiceAmounts} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCInvoiceAmountsJobCodePatch(jobCode: string, body: JCInvoiceAmounts, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCInvoiceAmountsJobCodePatch(jobCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCInvoiceAmounts} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCInvoiceAmountsJobCodePut(jobCode: string, body: JCInvoiceAmounts, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCInvoiceAmountsJobCodePut(jobCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JCInvoiceAmountsApi - factory interface
 * @export
 */
export const JCInvoiceAmountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JCInvoiceAmountsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCInvoiceAmountsGet(options?: any): AxiosPromise<PagedJCInvoiceAmounts> {
            return localVarFp.jCInvoiceAmountsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCInvoiceAmountsJobCodeGet(jobCode: string, options?: any): AxiosPromise<JCInvoiceAmounts> {
            return localVarFp.jCInvoiceAmountsJobCodeGet(jobCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCInvoiceAmounts} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCInvoiceAmountsJobCodePatch(jobCode: string, body: JCInvoiceAmounts, options?: any): AxiosPromise<void> {
            return localVarFp.jCInvoiceAmountsJobCodePatch(jobCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCInvoiceAmounts} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCInvoiceAmountsJobCodePut(jobCode: string, body: JCInvoiceAmounts, options?: any): AxiosPromise<void> {
            return localVarFp.jCInvoiceAmountsJobCodePut(jobCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JCInvoiceAmountsApi - interface
 * @export
 * @interface JCInvoiceAmountsApi
 */
export interface JCInvoiceAmountsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCInvoiceAmountsApiInterface
     */
    jCInvoiceAmountsGet(options?: AxiosRequestConfig): AxiosPromise<PagedJCInvoiceAmounts>;

    /**
     * 
     * @param {string} jobCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCInvoiceAmountsApiInterface
     */
    jCInvoiceAmountsJobCodeGet(jobCode: string, options?: AxiosRequestConfig): AxiosPromise<JCInvoiceAmounts>;

    /**
     * 
     * @param {string} jobCode 
     * @param {JCInvoiceAmounts} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCInvoiceAmountsApiInterface
     */
    jCInvoiceAmountsJobCodePatch(jobCode: string, body: JCInvoiceAmounts, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} jobCode 
     * @param {JCInvoiceAmounts} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCInvoiceAmountsApiInterface
     */
    jCInvoiceAmountsJobCodePut(jobCode: string, body: JCInvoiceAmounts, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * JCInvoiceAmountsApi - object-oriented interface
 * @export
 * @class JCInvoiceAmountsApi
 * @extends {BaseAPI}
 */
export class JCInvoiceAmountsApi extends BaseAPI implements JCInvoiceAmountsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCInvoiceAmountsApi
     */
    public jCInvoiceAmountsGet(options?: AxiosRequestConfig) {
        return JCInvoiceAmountsApiFp(this.configuration).jCInvoiceAmountsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCInvoiceAmountsApi
     */
    public jCInvoiceAmountsJobCodeGet(jobCode: string, options?: AxiosRequestConfig) {
        return JCInvoiceAmountsApiFp(this.configuration).jCInvoiceAmountsJobCodeGet(jobCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {JCInvoiceAmounts} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCInvoiceAmountsApi
     */
    public jCInvoiceAmountsJobCodePatch(jobCode: string, body: JCInvoiceAmounts, options?: AxiosRequestConfig) {
        return JCInvoiceAmountsApiFp(this.configuration).jCInvoiceAmountsJobCodePatch(jobCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {JCInvoiceAmounts} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCInvoiceAmountsApi
     */
    public jCInvoiceAmountsJobCodePut(jobCode: string, body: JCInvoiceAmounts, options?: AxiosRequestConfig) {
        return JCInvoiceAmountsApiFp(this.configuration).jCInvoiceAmountsJobCodePut(jobCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
