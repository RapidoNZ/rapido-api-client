/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { COUser } from '../models';
// @ts-ignore
import { PagedCOUser } from '../models';
/**
 * COUserApi - axios parameter creator
 * @export
 */
export const COUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/COUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {COUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserPost: async (body: COUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOUserPost', 'body', body)
            const localVarPath = `/COUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserUserCodeDelete: async (userCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCode' is not null or undefined
            assertParamExists('cOUserUserCodeDelete', 'userCode', userCode)
            const localVarPath = `/COUser('{UserCode}')`
                .replace(`{${"UserCode"}}`, encodeURIComponent(String(userCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserUserCodeGet: async (userCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCode' is not null or undefined
            assertParamExists('cOUserUserCodeGet', 'userCode', userCode)
            const localVarPath = `/COUser('{UserCode}')`
                .replace(`{${"UserCode"}}`, encodeURIComponent(String(userCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userCode 
         * @param {COUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserUserCodePatch: async (userCode: string, body: COUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCode' is not null or undefined
            assertParamExists('cOUserUserCodePatch', 'userCode', userCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOUserUserCodePatch', 'body', body)
            const localVarPath = `/COUser('{UserCode}')`
                .replace(`{${"UserCode"}}`, encodeURIComponent(String(userCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userCode 
         * @param {COUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserUserCodePut: async (userCode: string, body: COUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCode' is not null or undefined
            assertParamExists('cOUserUserCodePut', 'userCode', userCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOUserUserCodePut', 'body', body)
            const localVarPath = `/COUser('{UserCode}')`
                .replace(`{${"UserCode"}}`, encodeURIComponent(String(userCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * COUserApi - functional programming interface
 * @export
 */
export const COUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = COUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCOUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {COUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOUserPost(body: COUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOUserPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOUserUserCodeDelete(userCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOUserUserCodeDelete(userCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOUserUserCodeGet(userCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<COUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOUserUserCodeGet(userCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userCode 
         * @param {COUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOUserUserCodePatch(userCode: string, body: COUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOUserUserCodePatch(userCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userCode 
         * @param {COUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOUserUserCodePut(userCode: string, body: COUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOUserUserCodePut(userCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * COUserApi - factory interface
 * @export
 */
export const COUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = COUserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserGet(options?: any): AxiosPromise<PagedCOUser> {
            return localVarFp.cOUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {COUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserPost(body: COUser, options?: any): AxiosPromise<void> {
            return localVarFp.cOUserPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserUserCodeDelete(userCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.cOUserUserCodeDelete(userCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserUserCodeGet(userCode: string, options?: any): AxiosPromise<COUser> {
            return localVarFp.cOUserUserCodeGet(userCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userCode 
         * @param {COUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserUserCodePatch(userCode: string, body: COUser, options?: any): AxiosPromise<void> {
            return localVarFp.cOUserUserCodePatch(userCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userCode 
         * @param {COUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOUserUserCodePut(userCode: string, body: COUser, options?: any): AxiosPromise<void> {
            return localVarFp.cOUserUserCodePut(userCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * COUserApi - interface
 * @export
 * @interface COUserApi
 */
export interface COUserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApiInterface
     */
    cOUserGet(options?: AxiosRequestConfig): AxiosPromise<PagedCOUser>;

    /**
     * 
     * @param {COUser} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApiInterface
     */
    cOUserPost(body: COUser, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} userCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApiInterface
     */
    cOUserUserCodeDelete(userCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} userCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApiInterface
     */
    cOUserUserCodeGet(userCode: string, options?: AxiosRequestConfig): AxiosPromise<COUser>;

    /**
     * 
     * @param {string} userCode 
     * @param {COUser} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApiInterface
     */
    cOUserUserCodePatch(userCode: string, body: COUser, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} userCode 
     * @param {COUser} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApiInterface
     */
    cOUserUserCodePut(userCode: string, body: COUser, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * COUserApi - object-oriented interface
 * @export
 * @class COUserApi
 * @extends {BaseAPI}
 */
export class COUserApi extends BaseAPI implements COUserApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApi
     */
    public cOUserGet(options?: AxiosRequestConfig) {
        return COUserApiFp(this.configuration).cOUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {COUser} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApi
     */
    public cOUserPost(body: COUser, options?: AxiosRequestConfig) {
        return COUserApiFp(this.configuration).cOUserPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApi
     */
    public cOUserUserCodeDelete(userCode: string, options?: AxiosRequestConfig) {
        return COUserApiFp(this.configuration).cOUserUserCodeDelete(userCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApi
     */
    public cOUserUserCodeGet(userCode: string, options?: AxiosRequestConfig) {
        return COUserApiFp(this.configuration).cOUserUserCodeGet(userCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userCode 
     * @param {COUser} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApi
     */
    public cOUserUserCodePatch(userCode: string, body: COUser, options?: AxiosRequestConfig) {
        return COUserApiFp(this.configuration).cOUserUserCodePatch(userCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userCode 
     * @param {COUser} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COUserApi
     */
    public cOUserUserCodePut(userCode: string, body: COUser, options?: AxiosRequestConfig) {
        return COUserApiFp(this.configuration).cOUserUserCodePut(userCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
