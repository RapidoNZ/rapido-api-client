/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARSalesPerson } from '../models';
// @ts-ignore
import { PagedARSalesPerson } from '../models';
/**
 * ARSalesPersonApi - axios parameter creator
 * @export
 */
export const ARSalesPersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARSalesPerson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ARSalesPerson} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonPost: async (body: ARSalesPerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesPersonPost', 'body', body)
            const localVarPath = `/ARSalesPerson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonSalesPersonCodeDelete: async (salesPersonCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesPersonCode' is not null or undefined
            assertParamExists('aRSalesPersonSalesPersonCodeDelete', 'salesPersonCode', salesPersonCode)
            const localVarPath = `/ARSalesPerson('{SalesPersonCode}')`
                .replace(`{${"SalesPersonCode"}}`, encodeURIComponent(String(salesPersonCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonSalesPersonCodeGet: async (salesPersonCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesPersonCode' is not null or undefined
            assertParamExists('aRSalesPersonSalesPersonCodeGet', 'salesPersonCode', salesPersonCode)
            const localVarPath = `/ARSalesPerson('{SalesPersonCode}')`
                .replace(`{${"SalesPersonCode"}}`, encodeURIComponent(String(salesPersonCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPerson} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonSalesPersonCodePatch: async (salesPersonCode: string, body: ARSalesPerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesPersonCode' is not null or undefined
            assertParamExists('aRSalesPersonSalesPersonCodePatch', 'salesPersonCode', salesPersonCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesPersonSalesPersonCodePatch', 'body', body)
            const localVarPath = `/ARSalesPerson('{SalesPersonCode}')`
                .replace(`{${"SalesPersonCode"}}`, encodeURIComponent(String(salesPersonCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPerson} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonSalesPersonCodePut: async (salesPersonCode: string, body: ARSalesPerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesPersonCode' is not null or undefined
            assertParamExists('aRSalesPersonSalesPersonCodePut', 'salesPersonCode', salesPersonCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesPersonSalesPersonCodePut', 'body', body)
            const localVarPath = `/ARSalesPerson('{SalesPersonCode}')`
                .replace(`{${"SalesPersonCode"}}`, encodeURIComponent(String(salesPersonCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARSalesPersonApi - functional programming interface
 * @export
 */
export const ARSalesPersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARSalesPersonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARSalesPerson>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ARSalesPerson} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonPost(body: ARSalesPerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonSalesPersonCodeDelete(salesPersonCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonSalesPersonCodeDelete(salesPersonCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonSalesPersonCodeGet(salesPersonCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARSalesPerson>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonSalesPersonCodeGet(salesPersonCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPerson} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonSalesPersonCodePatch(salesPersonCode: string, body: ARSalesPerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonSalesPersonCodePatch(salesPersonCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPerson} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonSalesPersonCodePut(salesPersonCode: string, body: ARSalesPerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonSalesPersonCodePut(salesPersonCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARSalesPersonApi - factory interface
 * @export
 */
export const ARSalesPersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARSalesPersonApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonGet(options?: any): AxiosPromise<PagedARSalesPerson> {
            return localVarFp.aRSalesPersonGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ARSalesPerson} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonPost(body: ARSalesPerson, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesPersonPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonSalesPersonCodeDelete(salesPersonCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesPersonSalesPersonCodeDelete(salesPersonCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonSalesPersonCodeGet(salesPersonCode: string, options?: any): AxiosPromise<ARSalesPerson> {
            return localVarFp.aRSalesPersonSalesPersonCodeGet(salesPersonCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPerson} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonSalesPersonCodePatch(salesPersonCode: string, body: ARSalesPerson, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesPersonSalesPersonCodePatch(salesPersonCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPerson} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonSalesPersonCodePut(salesPersonCode: string, body: ARSalesPerson, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesPersonSalesPersonCodePut(salesPersonCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARSalesPersonApi - interface
 * @export
 * @interface ARSalesPersonApi
 */
export interface ARSalesPersonApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApiInterface
     */
    aRSalesPersonGet(options?: AxiosRequestConfig): AxiosPromise<PagedARSalesPerson>;

    /**
     * 
     * @param {ARSalesPerson} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApiInterface
     */
    aRSalesPersonPost(body: ARSalesPerson, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApiInterface
     */
    aRSalesPersonSalesPersonCodeDelete(salesPersonCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApiInterface
     */
    aRSalesPersonSalesPersonCodeGet(salesPersonCode: string, options?: AxiosRequestConfig): AxiosPromise<ARSalesPerson>;

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {ARSalesPerson} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApiInterface
     */
    aRSalesPersonSalesPersonCodePatch(salesPersonCode: string, body: ARSalesPerson, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {ARSalesPerson} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApiInterface
     */
    aRSalesPersonSalesPersonCodePut(salesPersonCode: string, body: ARSalesPerson, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ARSalesPersonApi - object-oriented interface
 * @export
 * @class ARSalesPersonApi
 * @extends {BaseAPI}
 */
export class ARSalesPersonApi extends BaseAPI implements ARSalesPersonApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApi
     */
    public aRSalesPersonGet(options?: AxiosRequestConfig) {
        return ARSalesPersonApiFp(this.configuration).aRSalesPersonGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ARSalesPerson} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApi
     */
    public aRSalesPersonPost(body: ARSalesPerson, options?: AxiosRequestConfig) {
        return ARSalesPersonApiFp(this.configuration).aRSalesPersonPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApi
     */
    public aRSalesPersonSalesPersonCodeDelete(salesPersonCode: string, options?: AxiosRequestConfig) {
        return ARSalesPersonApiFp(this.configuration).aRSalesPersonSalesPersonCodeDelete(salesPersonCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApi
     */
    public aRSalesPersonSalesPersonCodeGet(salesPersonCode: string, options?: AxiosRequestConfig) {
        return ARSalesPersonApiFp(this.configuration).aRSalesPersonSalesPersonCodeGet(salesPersonCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {ARSalesPerson} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApi
     */
    public aRSalesPersonSalesPersonCodePatch(salesPersonCode: string, body: ARSalesPerson, options?: AxiosRequestConfig) {
        return ARSalesPersonApiFp(this.configuration).aRSalesPersonSalesPersonCodePatch(salesPersonCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {ARSalesPerson} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonApi
     */
    public aRSalesPersonSalesPersonCodePut(salesPersonCode: string, body: ARSalesPerson, options?: AxiosRequestConfig) {
        return ARSalesPersonApiFp(this.configuration).aRSalesPersonSalesPersonCodePut(salesPersonCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
