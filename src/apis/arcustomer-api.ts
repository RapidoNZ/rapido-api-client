/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARCustomer } from '../models';
// @ts-ignore
import { PagedARCustomer } from '../models';
/**
 * ARCustomerApi - axios parameter creator
 * @export
 */
export const ARCustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodeDelete: async (customerCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRCustomerCustomerCodeDelete', 'customerCode', customerCode)
            const localVarPath = `/ARCustomer('{CustomerCode}')`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodeGet: async (customerCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRCustomerCustomerCodeGet', 'customerCode', customerCode)
            const localVarPath = `/ARCustomer('{CustomerCode}')`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARCustomer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePatch: async (customerCode: string, body: ARCustomer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRCustomerCustomerCodePatch', 'customerCode', customerCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRCustomerCustomerCodePatch', 'body', body)
            const localVarPath = `/ARCustomer('{CustomerCode}')`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ARCustomer/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {string} [address] 
         * @param {number} [contact] 
         * @param {string} [deliveryCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePrintLabelGet: async (customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, deliveryCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRCustomerCustomerCodePrintLabelGet', 'customerCode', customerCode)
            const localVarPath = `/ARCustomer('{CustomerCode}')/PrintLabel`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }

            if (address !== undefined) {
                localVarQueryParameter['Address'] = address;
            }

            if (contact !== undefined) {
                localVarQueryParameter['Contact'] = contact;
            }

            if (deliveryCode !== undefined) {
                localVarQueryParameter['DeliveryCode'] = deliveryCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ARCustomer/PrintSheet is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePrintSheetGet: async (customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRCustomerCustomerCodePrintSheetGet', 'customerCode', customerCode)
            const localVarPath = `/ARCustomer('{CustomerCode}')/PrintSheet`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ARCustomer/PrintStatement is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePrintStatementGet: async (customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRCustomerCustomerCodePrintStatementGet', 'customerCode', customerCode)
            const localVarPath = `/ARCustomer('{CustomerCode}')/PrintStatement`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARCustomer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePut: async (customerCode: string, body: ARCustomer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRCustomerCustomerCodePut', 'customerCode', customerCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRCustomerCustomerCodePut', 'body', body)
            const localVarPath = `/ARCustomer('{CustomerCode}')`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARCustomer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ARCustomer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerPost: async (body: ARCustomer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRCustomerPost', 'body', body)
            const localVarPath = `/ARCustomer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARCustomerApi - functional programming interface
 * @export
 */
export const ARCustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARCustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerCustomerCodeDelete(customerCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerCustomerCodeDelete(customerCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerCustomerCodeGet(customerCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerCustomerCodeGet(customerCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARCustomer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerCustomerCodePatch(customerCode: string, body: ARCustomer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerCustomerCodePatch(customerCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ARCustomer/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {string} [address] 
         * @param {number} [contact] 
         * @param {string} [deliveryCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerCustomerCodePrintLabelGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, deliveryCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerCustomerCodePrintLabelGet(customerCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, address, contact, deliveryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ARCustomer/PrintSheet is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerCustomerCodePrintSheetGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerCustomerCodePrintSheetGet(customerCode, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ARCustomer/PrintStatement is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerCustomerCodePrintStatementGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerCustomerCodePrintStatementGet(customerCode, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARCustomer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerCustomerCodePut(customerCode: string, body: ARCustomer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerCustomerCodePut(customerCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ARCustomer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerPost(body: ARCustomer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARCustomerApi - factory interface
 * @export
 */
export const ARCustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARCustomerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodeDelete(customerCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerCustomerCodeDelete(customerCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodeGet(customerCode: string, options?: any): AxiosPromise<ARCustomer> {
            return localVarFp.aRCustomerCustomerCodeGet(customerCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARCustomer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePatch(customerCode: string, body: ARCustomer, options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerCustomerCodePatch(customerCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * ARCustomer/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {string} [address] 
         * @param {number} [contact] 
         * @param {string} [deliveryCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePrintLabelGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, deliveryCode?: string, options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerCustomerCodePrintLabelGet(customerCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, address, contact, deliveryCode, options).then((request) => request(axios, basePath));
        },
        /**
         * ARCustomer/PrintSheet is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePrintSheetGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerCustomerCodePrintSheetGet(customerCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * ARCustomer/PrintStatement is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePrintStatementGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerCustomerCodePrintStatementGet(customerCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARCustomer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerCustomerCodePut(customerCode: string, body: ARCustomer, options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerCustomerCodePut(customerCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGet(options?: any): AxiosPromise<PagedARCustomer> {
            return localVarFp.aRCustomerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ARCustomer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerPost(body: ARCustomer, options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARCustomerApi - interface
 * @export
 * @interface ARCustomerApi
 */
export interface ARCustomerApiInterface {
    /**
     * 
     * @param {string} customerCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApiInterface
     */
    aRCustomerCustomerCodeDelete(customerCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} customerCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApiInterface
     */
    aRCustomerCustomerCodeGet(customerCode: string, options?: AxiosRequestConfig): AxiosPromise<ARCustomer>;

    /**
     * 
     * @param {string} customerCode 
     * @param {ARCustomer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApiInterface
     */
    aRCustomerCustomerCodePatch(customerCode: string, body: ARCustomer, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ARCustomer/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} customerCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {string} [address] 
     * @param {number} [contact] 
     * @param {string} [deliveryCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApiInterface
     */
    aRCustomerCustomerCodePrintLabelGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, deliveryCode?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ARCustomer/PrintSheet is an ODATA function and Action - use either GET or POST to call
     * @param {string} customerCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApiInterface
     */
    aRCustomerCustomerCodePrintSheetGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ARCustomer/PrintStatement is an ODATA function and Action - use either GET or POST to call
     * @param {string} customerCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApiInterface
     */
    aRCustomerCustomerCodePrintStatementGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} customerCode 
     * @param {ARCustomer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApiInterface
     */
    aRCustomerCustomerCodePut(customerCode: string, body: ARCustomer, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApiInterface
     */
    aRCustomerGet(options?: AxiosRequestConfig): AxiosPromise<PagedARCustomer>;

    /**
     * 
     * @param {ARCustomer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApiInterface
     */
    aRCustomerPost(body: ARCustomer, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ARCustomerApi - object-oriented interface
 * @export
 * @class ARCustomerApi
 * @extends {BaseAPI}
 */
export class ARCustomerApi extends BaseAPI implements ARCustomerApiInterface {
    /**
     * 
     * @param {string} customerCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApi
     */
    public aRCustomerCustomerCodeDelete(customerCode: string, options?: AxiosRequestConfig) {
        return ARCustomerApiFp(this.configuration).aRCustomerCustomerCodeDelete(customerCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApi
     */
    public aRCustomerCustomerCodeGet(customerCode: string, options?: AxiosRequestConfig) {
        return ARCustomerApiFp(this.configuration).aRCustomerCustomerCodeGet(customerCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerCode 
     * @param {ARCustomer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApi
     */
    public aRCustomerCustomerCodePatch(customerCode: string, body: ARCustomer, options?: AxiosRequestConfig) {
        return ARCustomerApiFp(this.configuration).aRCustomerCustomerCodePatch(customerCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ARCustomer/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} customerCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {string} [address] 
     * @param {number} [contact] 
     * @param {string} [deliveryCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApi
     */
    public aRCustomerCustomerCodePrintLabelGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, deliveryCode?: string, options?: AxiosRequestConfig) {
        return ARCustomerApiFp(this.configuration).aRCustomerCustomerCodePrintLabelGet(customerCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, address, contact, deliveryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ARCustomer/PrintSheet is an ODATA function and Action - use either GET or POST to call
     * @param {string} customerCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApi
     */
    public aRCustomerCustomerCodePrintSheetGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return ARCustomerApiFp(this.configuration).aRCustomerCustomerCodePrintSheetGet(customerCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ARCustomer/PrintStatement is an ODATA function and Action - use either GET or POST to call
     * @param {string} customerCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApi
     */
    public aRCustomerCustomerCodePrintStatementGet(customerCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return ARCustomerApiFp(this.configuration).aRCustomerCustomerCodePrintStatementGet(customerCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerCode 
     * @param {ARCustomer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApi
     */
    public aRCustomerCustomerCodePut(customerCode: string, body: ARCustomer, options?: AxiosRequestConfig) {
        return ARCustomerApiFp(this.configuration).aRCustomerCustomerCodePut(customerCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApi
     */
    public aRCustomerGet(options?: AxiosRequestConfig) {
        return ARCustomerApiFp(this.configuration).aRCustomerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ARCustomer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerApi
     */
    public aRCustomerPost(body: ARCustomer, options?: AxiosRequestConfig) {
        return ARCustomerApiFp(this.configuration).aRCustomerPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
