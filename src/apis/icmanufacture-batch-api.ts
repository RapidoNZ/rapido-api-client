/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ICManufactureBatch } from '../models';
// @ts-ignore
import { PagedICManufactureBatch } from '../models';
/**
 * ICManufactureBatchApi - axios parameter creator
 * @export
 */
export const ICManufactureBatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchBatchIDDelete: async (batchID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('iCManufactureBatchBatchIDDelete', 'batchID', batchID)
            const localVarPath = `/ICManufactureBatch('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchBatchIDGet: async (batchID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('iCManufactureBatchBatchIDGet', 'batchID', batchID)
            const localVarPath = `/ICManufactureBatch('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} batchID 
         * @param {ICManufactureBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchBatchIDPatch: async (batchID: number, body: ICManufactureBatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('iCManufactureBatchBatchIDPatch', 'batchID', batchID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCManufactureBatchBatchIDPatch', 'body', body)
            const localVarPath = `/ICManufactureBatch('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} batchID 
         * @param {ICManufactureBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchBatchIDPut: async (batchID: number, body: ICManufactureBatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('iCManufactureBatchBatchIDPut', 'batchID', batchID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCManufactureBatchBatchIDPut', 'body', body)
            const localVarPath = `/ICManufactureBatch('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ICManufactureBatch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICManufactureBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchPost: async (body: ICManufactureBatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCManufactureBatchPost', 'body', body)
            const localVarPath = `/ICManufactureBatch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ICManufactureBatchApi - functional programming interface
 * @export
 */
export const ICManufactureBatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ICManufactureBatchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCManufactureBatchBatchIDDelete(batchID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCManufactureBatchBatchIDDelete(batchID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCManufactureBatchBatchIDGet(batchID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICManufactureBatch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCManufactureBatchBatchIDGet(batchID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} batchID 
         * @param {ICManufactureBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCManufactureBatchBatchIDPatch(batchID: number, body: ICManufactureBatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCManufactureBatchBatchIDPatch(batchID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} batchID 
         * @param {ICManufactureBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCManufactureBatchBatchIDPut(batchID: number, body: ICManufactureBatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCManufactureBatchBatchIDPut(batchID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCManufactureBatchGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedICManufactureBatch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCManufactureBatchGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ICManufactureBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCManufactureBatchPost(body: ICManufactureBatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCManufactureBatchPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ICManufactureBatchApi - factory interface
 * @export
 */
export const ICManufactureBatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ICManufactureBatchApiFp(configuration)
    return {
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchBatchIDDelete(batchID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iCManufactureBatchBatchIDDelete(batchID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchBatchIDGet(batchID: number, options?: any): AxiosPromise<ICManufactureBatch> {
            return localVarFp.iCManufactureBatchBatchIDGet(batchID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} batchID 
         * @param {ICManufactureBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchBatchIDPatch(batchID: number, body: ICManufactureBatch, options?: any): AxiosPromise<void> {
            return localVarFp.iCManufactureBatchBatchIDPatch(batchID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} batchID 
         * @param {ICManufactureBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchBatchIDPut(batchID: number, body: ICManufactureBatch, options?: any): AxiosPromise<void> {
            return localVarFp.iCManufactureBatchBatchIDPut(batchID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchGet(options?: any): AxiosPromise<PagedICManufactureBatch> {
            return localVarFp.iCManufactureBatchGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICManufactureBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCManufactureBatchPost(body: ICManufactureBatch, options?: any): AxiosPromise<void> {
            return localVarFp.iCManufactureBatchPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ICManufactureBatchApi - interface
 * @export
 * @interface ICManufactureBatchApi
 */
export interface ICManufactureBatchApiInterface {
    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApiInterface
     */
    iCManufactureBatchBatchIDDelete(batchID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApiInterface
     */
    iCManufactureBatchBatchIDGet(batchID: number, options?: AxiosRequestConfig): AxiosPromise<ICManufactureBatch>;

    /**
     * 
     * @param {number} batchID 
     * @param {ICManufactureBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApiInterface
     */
    iCManufactureBatchBatchIDPatch(batchID: number, body: ICManufactureBatch, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} batchID 
     * @param {ICManufactureBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApiInterface
     */
    iCManufactureBatchBatchIDPut(batchID: number, body: ICManufactureBatch, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApiInterface
     */
    iCManufactureBatchGet(options?: AxiosRequestConfig): AxiosPromise<PagedICManufactureBatch>;

    /**
     * 
     * @param {ICManufactureBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApiInterface
     */
    iCManufactureBatchPost(body: ICManufactureBatch, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ICManufactureBatchApi - object-oriented interface
 * @export
 * @class ICManufactureBatchApi
 * @extends {BaseAPI}
 */
export class ICManufactureBatchApi extends BaseAPI implements ICManufactureBatchApiInterface {
    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApi
     */
    public iCManufactureBatchBatchIDDelete(batchID: number, options?: AxiosRequestConfig) {
        return ICManufactureBatchApiFp(this.configuration).iCManufactureBatchBatchIDDelete(batchID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApi
     */
    public iCManufactureBatchBatchIDGet(batchID: number, options?: AxiosRequestConfig) {
        return ICManufactureBatchApiFp(this.configuration).iCManufactureBatchBatchIDGet(batchID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} batchID 
     * @param {ICManufactureBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApi
     */
    public iCManufactureBatchBatchIDPatch(batchID: number, body: ICManufactureBatch, options?: AxiosRequestConfig) {
        return ICManufactureBatchApiFp(this.configuration).iCManufactureBatchBatchIDPatch(batchID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} batchID 
     * @param {ICManufactureBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApi
     */
    public iCManufactureBatchBatchIDPut(batchID: number, body: ICManufactureBatch, options?: AxiosRequestConfig) {
        return ICManufactureBatchApiFp(this.configuration).iCManufactureBatchBatchIDPut(batchID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApi
     */
    public iCManufactureBatchGet(options?: AxiosRequestConfig) {
        return ICManufactureBatchApiFp(this.configuration).iCManufactureBatchGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ICManufactureBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICManufactureBatchApi
     */
    public iCManufactureBatchPost(body: ICManufactureBatch, options?: AxiosRequestConfig) {
        return ICManufactureBatchApiFp(this.configuration).iCManufactureBatchPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
