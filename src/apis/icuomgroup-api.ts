/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ICUOMGroup } from '../models';
// @ts-ignore
import { PagedICUOMGroup } from '../models';
/**
 * ICUOMGroupApi - axios parameter creator
 * @export
 */
export const ICUOMGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ICUOMGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICUOMGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupPost: async (body: ICUOMGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCUOMGroupPost', 'body', body)
            const localVarPath = `/ICUOMGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupUOMGroupCodeDelete: async (uOMGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uOMGroupCode' is not null or undefined
            assertParamExists('iCUOMGroupUOMGroupCodeDelete', 'uOMGroupCode', uOMGroupCode)
            const localVarPath = `/ICUOMGroup('{UOMGroupCode}')`
                .replace(`{${"UOMGroupCode"}}`, encodeURIComponent(String(uOMGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupUOMGroupCodeGet: async (uOMGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uOMGroupCode' is not null or undefined
            assertParamExists('iCUOMGroupUOMGroupCodeGet', 'uOMGroupCode', uOMGroupCode)
            const localVarPath = `/ICUOMGroup('{UOMGroupCode}')`
                .replace(`{${"UOMGroupCode"}}`, encodeURIComponent(String(uOMGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {ICUOMGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupUOMGroupCodePatch: async (uOMGroupCode: string, body: ICUOMGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uOMGroupCode' is not null or undefined
            assertParamExists('iCUOMGroupUOMGroupCodePatch', 'uOMGroupCode', uOMGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCUOMGroupUOMGroupCodePatch', 'body', body)
            const localVarPath = `/ICUOMGroup('{UOMGroupCode}')`
                .replace(`{${"UOMGroupCode"}}`, encodeURIComponent(String(uOMGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {ICUOMGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupUOMGroupCodePut: async (uOMGroupCode: string, body: ICUOMGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uOMGroupCode' is not null or undefined
            assertParamExists('iCUOMGroupUOMGroupCodePut', 'uOMGroupCode', uOMGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCUOMGroupUOMGroupCodePut', 'body', body)
            const localVarPath = `/ICUOMGroup('{UOMGroupCode}')`
                .replace(`{${"UOMGroupCode"}}`, encodeURIComponent(String(uOMGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ICUOMGroupApi - functional programming interface
 * @export
 */
export const ICUOMGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ICUOMGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCUOMGroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedICUOMGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCUOMGroupGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ICUOMGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCUOMGroupPost(body: ICUOMGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCUOMGroupPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCUOMGroupUOMGroupCodeDelete(uOMGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCUOMGroupUOMGroupCodeDelete(uOMGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCUOMGroupUOMGroupCodeGet(uOMGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICUOMGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCUOMGroupUOMGroupCodeGet(uOMGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {ICUOMGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCUOMGroupUOMGroupCodePatch(uOMGroupCode: string, body: ICUOMGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCUOMGroupUOMGroupCodePatch(uOMGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {ICUOMGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCUOMGroupUOMGroupCodePut(uOMGroupCode: string, body: ICUOMGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCUOMGroupUOMGroupCodePut(uOMGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ICUOMGroupApi - factory interface
 * @export
 */
export const ICUOMGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ICUOMGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupGet(options?: any): AxiosPromise<PagedICUOMGroup> {
            return localVarFp.iCUOMGroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICUOMGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupPost(body: ICUOMGroup, options?: any): AxiosPromise<void> {
            return localVarFp.iCUOMGroupPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupUOMGroupCodeDelete(uOMGroupCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.iCUOMGroupUOMGroupCodeDelete(uOMGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupUOMGroupCodeGet(uOMGroupCode: string, options?: any): AxiosPromise<ICUOMGroup> {
            return localVarFp.iCUOMGroupUOMGroupCodeGet(uOMGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {ICUOMGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupUOMGroupCodePatch(uOMGroupCode: string, body: ICUOMGroup, options?: any): AxiosPromise<void> {
            return localVarFp.iCUOMGroupUOMGroupCodePatch(uOMGroupCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uOMGroupCode 
         * @param {ICUOMGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCUOMGroupUOMGroupCodePut(uOMGroupCode: string, body: ICUOMGroup, options?: any): AxiosPromise<void> {
            return localVarFp.iCUOMGroupUOMGroupCodePut(uOMGroupCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ICUOMGroupApi - interface
 * @export
 * @interface ICUOMGroupApi
 */
export interface ICUOMGroupApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApiInterface
     */
    iCUOMGroupGet(options?: AxiosRequestConfig): AxiosPromise<PagedICUOMGroup>;

    /**
     * 
     * @param {ICUOMGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApiInterface
     */
    iCUOMGroupPost(body: ICUOMGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} uOMGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApiInterface
     */
    iCUOMGroupUOMGroupCodeDelete(uOMGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} uOMGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApiInterface
     */
    iCUOMGroupUOMGroupCodeGet(uOMGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<ICUOMGroup>;

    /**
     * 
     * @param {string} uOMGroupCode 
     * @param {ICUOMGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApiInterface
     */
    iCUOMGroupUOMGroupCodePatch(uOMGroupCode: string, body: ICUOMGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} uOMGroupCode 
     * @param {ICUOMGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApiInterface
     */
    iCUOMGroupUOMGroupCodePut(uOMGroupCode: string, body: ICUOMGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ICUOMGroupApi - object-oriented interface
 * @export
 * @class ICUOMGroupApi
 * @extends {BaseAPI}
 */
export class ICUOMGroupApi extends BaseAPI implements ICUOMGroupApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApi
     */
    public iCUOMGroupGet(options?: AxiosRequestConfig) {
        return ICUOMGroupApiFp(this.configuration).iCUOMGroupGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ICUOMGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApi
     */
    public iCUOMGroupPost(body: ICUOMGroup, options?: AxiosRequestConfig) {
        return ICUOMGroupApiFp(this.configuration).iCUOMGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uOMGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApi
     */
    public iCUOMGroupUOMGroupCodeDelete(uOMGroupCode: string, options?: AxiosRequestConfig) {
        return ICUOMGroupApiFp(this.configuration).iCUOMGroupUOMGroupCodeDelete(uOMGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uOMGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApi
     */
    public iCUOMGroupUOMGroupCodeGet(uOMGroupCode: string, options?: AxiosRequestConfig) {
        return ICUOMGroupApiFp(this.configuration).iCUOMGroupUOMGroupCodeGet(uOMGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uOMGroupCode 
     * @param {ICUOMGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApi
     */
    public iCUOMGroupUOMGroupCodePatch(uOMGroupCode: string, body: ICUOMGroup, options?: AxiosRequestConfig) {
        return ICUOMGroupApiFp(this.configuration).iCUOMGroupUOMGroupCodePatch(uOMGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uOMGroupCode 
     * @param {ICUOMGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICUOMGroupApi
     */
    public iCUOMGroupUOMGroupCodePut(uOMGroupCode: string, body: ICUOMGroup, options?: AxiosRequestConfig) {
        return ICUOMGroupApiFp(this.configuration).iCUOMGroupUOMGroupCodePut(uOMGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
