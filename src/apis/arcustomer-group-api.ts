/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARCustomerGroup } from '../models';
// @ts-ignore
import { PagedARCustomerGroup } from '../models';
/**
 * ARCustomerGroupApi - axios parameter creator
 * @export
 */
export const ARCustomerGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupCustomerGroupCodeDelete: async (customerGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerGroupCode' is not null or undefined
            assertParamExists('aRCustomerGroupCustomerGroupCodeDelete', 'customerGroupCode', customerGroupCode)
            const localVarPath = `/ARCustomerGroup('{CustomerGroupCode}')`
                .replace(`{${"CustomerGroupCode"}}`, encodeURIComponent(String(customerGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupCustomerGroupCodeGet: async (customerGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerGroupCode' is not null or undefined
            assertParamExists('aRCustomerGroupCustomerGroupCodeGet', 'customerGroupCode', customerGroupCode)
            const localVarPath = `/ARCustomerGroup('{CustomerGroupCode}')`
                .replace(`{${"CustomerGroupCode"}}`, encodeURIComponent(String(customerGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {ARCustomerGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupCustomerGroupCodePatch: async (customerGroupCode: string, body: ARCustomerGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerGroupCode' is not null or undefined
            assertParamExists('aRCustomerGroupCustomerGroupCodePatch', 'customerGroupCode', customerGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRCustomerGroupCustomerGroupCodePatch', 'body', body)
            const localVarPath = `/ARCustomerGroup('{CustomerGroupCode}')`
                .replace(`{${"CustomerGroupCode"}}`, encodeURIComponent(String(customerGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {ARCustomerGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupCustomerGroupCodePut: async (customerGroupCode: string, body: ARCustomerGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerGroupCode' is not null or undefined
            assertParamExists('aRCustomerGroupCustomerGroupCodePut', 'customerGroupCode', customerGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRCustomerGroupCustomerGroupCodePut', 'body', body)
            const localVarPath = `/ARCustomerGroup('{CustomerGroupCode}')`
                .replace(`{${"CustomerGroupCode"}}`, encodeURIComponent(String(customerGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARCustomerGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ARCustomerGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupPost: async (body: ARCustomerGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRCustomerGroupPost', 'body', body)
            const localVarPath = `/ARCustomerGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARCustomerGroupApi - functional programming interface
 * @export
 */
export const ARCustomerGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARCustomerGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerGroupCustomerGroupCodeDelete(customerGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerGroupCustomerGroupCodeDelete(customerGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerGroupCustomerGroupCodeGet(customerGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARCustomerGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerGroupCustomerGroupCodeGet(customerGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {ARCustomerGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerGroupCustomerGroupCodePatch(customerGroupCode: string, body: ARCustomerGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerGroupCustomerGroupCodePatch(customerGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {ARCustomerGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerGroupCustomerGroupCodePut(customerGroupCode: string, body: ARCustomerGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerGroupCustomerGroupCodePut(customerGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerGroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARCustomerGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerGroupGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ARCustomerGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRCustomerGroupPost(body: ARCustomerGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRCustomerGroupPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARCustomerGroupApi - factory interface
 * @export
 */
export const ARCustomerGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARCustomerGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupCustomerGroupCodeDelete(customerGroupCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerGroupCustomerGroupCodeDelete(customerGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupCustomerGroupCodeGet(customerGroupCode: string, options?: any): AxiosPromise<ARCustomerGroup> {
            return localVarFp.aRCustomerGroupCustomerGroupCodeGet(customerGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {ARCustomerGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupCustomerGroupCodePatch(customerGroupCode: string, body: ARCustomerGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerGroupCustomerGroupCodePatch(customerGroupCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerGroupCode 
         * @param {ARCustomerGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupCustomerGroupCodePut(customerGroupCode: string, body: ARCustomerGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerGroupCustomerGroupCodePut(customerGroupCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupGet(options?: any): AxiosPromise<PagedARCustomerGroup> {
            return localVarFp.aRCustomerGroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ARCustomerGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRCustomerGroupPost(body: ARCustomerGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aRCustomerGroupPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARCustomerGroupApi - interface
 * @export
 * @interface ARCustomerGroupApi
 */
export interface ARCustomerGroupApiInterface {
    /**
     * 
     * @param {string} customerGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApiInterface
     */
    aRCustomerGroupCustomerGroupCodeDelete(customerGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} customerGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApiInterface
     */
    aRCustomerGroupCustomerGroupCodeGet(customerGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<ARCustomerGroup>;

    /**
     * 
     * @param {string} customerGroupCode 
     * @param {ARCustomerGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApiInterface
     */
    aRCustomerGroupCustomerGroupCodePatch(customerGroupCode: string, body: ARCustomerGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} customerGroupCode 
     * @param {ARCustomerGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApiInterface
     */
    aRCustomerGroupCustomerGroupCodePut(customerGroupCode: string, body: ARCustomerGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApiInterface
     */
    aRCustomerGroupGet(options?: AxiosRequestConfig): AxiosPromise<PagedARCustomerGroup>;

    /**
     * 
     * @param {ARCustomerGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApiInterface
     */
    aRCustomerGroupPost(body: ARCustomerGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ARCustomerGroupApi - object-oriented interface
 * @export
 * @class ARCustomerGroupApi
 * @extends {BaseAPI}
 */
export class ARCustomerGroupApi extends BaseAPI implements ARCustomerGroupApiInterface {
    /**
     * 
     * @param {string} customerGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApi
     */
    public aRCustomerGroupCustomerGroupCodeDelete(customerGroupCode: string, options?: AxiosRequestConfig) {
        return ARCustomerGroupApiFp(this.configuration).aRCustomerGroupCustomerGroupCodeDelete(customerGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApi
     */
    public aRCustomerGroupCustomerGroupCodeGet(customerGroupCode: string, options?: AxiosRequestConfig) {
        return ARCustomerGroupApiFp(this.configuration).aRCustomerGroupCustomerGroupCodeGet(customerGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerGroupCode 
     * @param {ARCustomerGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApi
     */
    public aRCustomerGroupCustomerGroupCodePatch(customerGroupCode: string, body: ARCustomerGroup, options?: AxiosRequestConfig) {
        return ARCustomerGroupApiFp(this.configuration).aRCustomerGroupCustomerGroupCodePatch(customerGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerGroupCode 
     * @param {ARCustomerGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApi
     */
    public aRCustomerGroupCustomerGroupCodePut(customerGroupCode: string, body: ARCustomerGroup, options?: AxiosRequestConfig) {
        return ARCustomerGroupApiFp(this.configuration).aRCustomerGroupCustomerGroupCodePut(customerGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApi
     */
    public aRCustomerGroupGet(options?: AxiosRequestConfig) {
        return ARCustomerGroupApiFp(this.configuration).aRCustomerGroupGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ARCustomerGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARCustomerGroupApi
     */
    public aRCustomerGroupPost(body: ARCustomerGroup, options?: AxiosRequestConfig) {
        return ARCustomerGroupApiFp(this.configuration).aRCustomerGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
