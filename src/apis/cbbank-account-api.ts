/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBBankAccount } from '../models';
// @ts-ignore
import { PagedCBBankAccount } from '../models';
/**
 * CBBankAccountApi - axios parameter creator
 * @export
 */
export const CBBankAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountBankAccountCodeDelete: async (bankAccountCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountCode' is not null or undefined
            assertParamExists('cBBankAccountBankAccountCodeDelete', 'bankAccountCode', bankAccountCode)
            const localVarPath = `/CBBankAccount('{BankAccountCode}')`
                .replace(`{${"BankAccountCode"}}`, encodeURIComponent(String(bankAccountCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountBankAccountCodeGet: async (bankAccountCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountCode' is not null or undefined
            assertParamExists('cBBankAccountBankAccountCodeGet', 'bankAccountCode', bankAccountCode)
            const localVarPath = `/CBBankAccount('{BankAccountCode}')`
                .replace(`{${"BankAccountCode"}}`, encodeURIComponent(String(bankAccountCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {CBBankAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountBankAccountCodePatch: async (bankAccountCode: string, body: CBBankAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountCode' is not null or undefined
            assertParamExists('cBBankAccountBankAccountCodePatch', 'bankAccountCode', bankAccountCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBBankAccountBankAccountCodePatch', 'body', body)
            const localVarPath = `/CBBankAccount('{BankAccountCode}')`
                .replace(`{${"BankAccountCode"}}`, encodeURIComponent(String(bankAccountCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {CBBankAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountBankAccountCodePut: async (bankAccountCode: string, body: CBBankAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountCode' is not null or undefined
            assertParamExists('cBBankAccountBankAccountCodePut', 'bankAccountCode', bankAccountCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBBankAccountBankAccountCodePut', 'body', body)
            const localVarPath = `/CBBankAccount('{BankAccountCode}')`
                .replace(`{${"BankAccountCode"}}`, encodeURIComponent(String(bankAccountCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBBankAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CBBankAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountPost: async (body: CBBankAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBBankAccountPost', 'body', body)
            const localVarPath = `/CBBankAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBBankAccountApi - functional programming interface
 * @export
 */
export const CBBankAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBBankAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankAccountBankAccountCodeDelete(bankAccountCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankAccountBankAccountCodeDelete(bankAccountCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankAccountBankAccountCodeGet(bankAccountCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBBankAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankAccountBankAccountCodeGet(bankAccountCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {CBBankAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankAccountBankAccountCodePatch(bankAccountCode: string, body: CBBankAccount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankAccountBankAccountCodePatch(bankAccountCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {CBBankAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankAccountBankAccountCodePut(bankAccountCode: string, body: CBBankAccount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankAccountBankAccountCodePut(bankAccountCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankAccountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBBankAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankAccountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CBBankAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBBankAccountPost(body: CBBankAccount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBBankAccountPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBBankAccountApi - factory interface
 * @export
 */
export const CBBankAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBBankAccountApiFp(configuration)
    return {
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountBankAccountCodeDelete(bankAccountCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankAccountBankAccountCodeDelete(bankAccountCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountBankAccountCodeGet(bankAccountCode: string, options?: any): AxiosPromise<CBBankAccount> {
            return localVarFp.cBBankAccountBankAccountCodeGet(bankAccountCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {CBBankAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountBankAccountCodePatch(bankAccountCode: string, body: CBBankAccount, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankAccountBankAccountCodePatch(bankAccountCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bankAccountCode 
         * @param {CBBankAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountBankAccountCodePut(bankAccountCode: string, body: CBBankAccount, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankAccountBankAccountCodePut(bankAccountCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountGet(options?: any): AxiosPromise<PagedCBBankAccount> {
            return localVarFp.cBBankAccountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CBBankAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBBankAccountPost(body: CBBankAccount, options?: any): AxiosPromise<void> {
            return localVarFp.cBBankAccountPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBBankAccountApi - interface
 * @export
 * @interface CBBankAccountApi
 */
export interface CBBankAccountApiInterface {
    /**
     * 
     * @param {string} bankAccountCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApiInterface
     */
    cBBankAccountBankAccountCodeDelete(bankAccountCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} bankAccountCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApiInterface
     */
    cBBankAccountBankAccountCodeGet(bankAccountCode: string, options?: AxiosRequestConfig): AxiosPromise<CBBankAccount>;

    /**
     * 
     * @param {string} bankAccountCode 
     * @param {CBBankAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApiInterface
     */
    cBBankAccountBankAccountCodePatch(bankAccountCode: string, body: CBBankAccount, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} bankAccountCode 
     * @param {CBBankAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApiInterface
     */
    cBBankAccountBankAccountCodePut(bankAccountCode: string, body: CBBankAccount, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApiInterface
     */
    cBBankAccountGet(options?: AxiosRequestConfig): AxiosPromise<PagedCBBankAccount>;

    /**
     * 
     * @param {CBBankAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApiInterface
     */
    cBBankAccountPost(body: CBBankAccount, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CBBankAccountApi - object-oriented interface
 * @export
 * @class CBBankAccountApi
 * @extends {BaseAPI}
 */
export class CBBankAccountApi extends BaseAPI implements CBBankAccountApiInterface {
    /**
     * 
     * @param {string} bankAccountCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApi
     */
    public cBBankAccountBankAccountCodeDelete(bankAccountCode: string, options?: AxiosRequestConfig) {
        return CBBankAccountApiFp(this.configuration).cBBankAccountBankAccountCodeDelete(bankAccountCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bankAccountCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApi
     */
    public cBBankAccountBankAccountCodeGet(bankAccountCode: string, options?: AxiosRequestConfig) {
        return CBBankAccountApiFp(this.configuration).cBBankAccountBankAccountCodeGet(bankAccountCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bankAccountCode 
     * @param {CBBankAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApi
     */
    public cBBankAccountBankAccountCodePatch(bankAccountCode: string, body: CBBankAccount, options?: AxiosRequestConfig) {
        return CBBankAccountApiFp(this.configuration).cBBankAccountBankAccountCodePatch(bankAccountCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bankAccountCode 
     * @param {CBBankAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApi
     */
    public cBBankAccountBankAccountCodePut(bankAccountCode: string, body: CBBankAccount, options?: AxiosRequestConfig) {
        return CBBankAccountApiFp(this.configuration).cBBankAccountBankAccountCodePut(bankAccountCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApi
     */
    public cBBankAccountGet(options?: AxiosRequestConfig) {
        return CBBankAccountApiFp(this.configuration).cBBankAccountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CBBankAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBBankAccountApi
     */
    public cBBankAccountPost(body: CBBankAccount, options?: AxiosRequestConfig) {
        return CBBankAccountApiFp(this.configuration).cBBankAccountPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
