/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagedSPRule } from '../models';
// @ts-ignore
import { SPRule } from '../models';
/**
 * SPRuleApi - axios parameter creator
 * @export
 */
export const SPRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SPRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SPRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRulePost: async (body: SPRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('sPRulePost', 'body', body)
            const localVarPath = `/SPRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleRuleIDDelete: async (ruleID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleID' is not null or undefined
            assertParamExists('sPRuleRuleIDDelete', 'ruleID', ruleID)
            const localVarPath = `/SPRule('{RuleID}')`
                .replace(`{${"RuleID"}}`, encodeURIComponent(String(ruleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleRuleIDGet: async (ruleID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleID' is not null or undefined
            assertParamExists('sPRuleRuleIDGet', 'ruleID', ruleID)
            const localVarPath = `/SPRule('{RuleID}')`
                .replace(`{${"RuleID"}}`, encodeURIComponent(String(ruleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {SPRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleRuleIDPatch: async (ruleID: number, body: SPRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleID' is not null or undefined
            assertParamExists('sPRuleRuleIDPatch', 'ruleID', ruleID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('sPRuleRuleIDPatch', 'body', body)
            const localVarPath = `/SPRule('{RuleID}')`
                .replace(`{${"RuleID"}}`, encodeURIComponent(String(ruleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {SPRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleRuleIDPut: async (ruleID: number, body: SPRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleID' is not null or undefined
            assertParamExists('sPRuleRuleIDPut', 'ruleID', ruleID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('sPRuleRuleIDPut', 'body', body)
            const localVarPath = `/SPRule('{RuleID}')`
                .replace(`{${"RuleID"}}`, encodeURIComponent(String(ruleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SPRuleApi - functional programming interface
 * @export
 */
export const SPRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SPRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPRuleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedSPRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPRuleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SPRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPRulePost(body: SPRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPRulePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPRuleRuleIDDelete(ruleID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPRuleRuleIDDelete(ruleID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPRuleRuleIDGet(ruleID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPRuleRuleIDGet(ruleID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {SPRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPRuleRuleIDPatch(ruleID: number, body: SPRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPRuleRuleIDPatch(ruleID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {SPRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPRuleRuleIDPut(ruleID: number, body: SPRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPRuleRuleIDPut(ruleID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SPRuleApi - factory interface
 * @export
 */
export const SPRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SPRuleApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleGet(options?: any): AxiosPromise<PagedSPRule> {
            return localVarFp.sPRuleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SPRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRulePost(body: SPRule, options?: any): AxiosPromise<void> {
            return localVarFp.sPRulePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleRuleIDDelete(ruleID: number, options?: any): AxiosPromise<void> {
            return localVarFp.sPRuleRuleIDDelete(ruleID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleRuleIDGet(ruleID: number, options?: any): AxiosPromise<SPRule> {
            return localVarFp.sPRuleRuleIDGet(ruleID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {SPRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleRuleIDPatch(ruleID: number, body: SPRule, options?: any): AxiosPromise<void> {
            return localVarFp.sPRuleRuleIDPatch(ruleID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} ruleID 
         * @param {SPRule} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPRuleRuleIDPut(ruleID: number, body: SPRule, options?: any): AxiosPromise<void> {
            return localVarFp.sPRuleRuleIDPut(ruleID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SPRuleApi - interface
 * @export
 * @interface SPRuleApi
 */
export interface SPRuleApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApiInterface
     */
    sPRuleGet(options?: AxiosRequestConfig): AxiosPromise<PagedSPRule>;

    /**
     * 
     * @param {SPRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApiInterface
     */
    sPRulePost(body: SPRule, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} ruleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApiInterface
     */
    sPRuleRuleIDDelete(ruleID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} ruleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApiInterface
     */
    sPRuleRuleIDGet(ruleID: number, options?: AxiosRequestConfig): AxiosPromise<SPRule>;

    /**
     * 
     * @param {number} ruleID 
     * @param {SPRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApiInterface
     */
    sPRuleRuleIDPatch(ruleID: number, body: SPRule, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} ruleID 
     * @param {SPRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApiInterface
     */
    sPRuleRuleIDPut(ruleID: number, body: SPRule, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * SPRuleApi - object-oriented interface
 * @export
 * @class SPRuleApi
 * @extends {BaseAPI}
 */
export class SPRuleApi extends BaseAPI implements SPRuleApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApi
     */
    public sPRuleGet(options?: AxiosRequestConfig) {
        return SPRuleApiFp(this.configuration).sPRuleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SPRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApi
     */
    public sPRulePost(body: SPRule, options?: AxiosRequestConfig) {
        return SPRuleApiFp(this.configuration).sPRulePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} ruleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApi
     */
    public sPRuleRuleIDDelete(ruleID: number, options?: AxiosRequestConfig) {
        return SPRuleApiFp(this.configuration).sPRuleRuleIDDelete(ruleID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} ruleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApi
     */
    public sPRuleRuleIDGet(ruleID: number, options?: AxiosRequestConfig) {
        return SPRuleApiFp(this.configuration).sPRuleRuleIDGet(ruleID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} ruleID 
     * @param {SPRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApi
     */
    public sPRuleRuleIDPatch(ruleID: number, body: SPRule, options?: AxiosRequestConfig) {
        return SPRuleApiFp(this.configuration).sPRuleRuleIDPatch(ruleID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} ruleID 
     * @param {SPRule} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPRuleApi
     */
    public sPRuleRuleIDPut(ruleID: number, body: SPRule, options?: AxiosRequestConfig) {
        return SPRuleApiFp(this.configuration).sPRuleRuleIDPut(ruleID, body, options).then((request) => request(this.axios, this.basePath));
    }
}
