/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APAllocationTaskResults } from '../models';
// @ts-ignore
import { ARAllocationTaskResults } from '../models';
// @ts-ignore
import { AboutResults } from '../models';
// @ts-ignore
import { CompanyResults } from '../models';
// @ts-ignore
import { ICAvailableResults } from '../models';
// @ts-ignore
import { RateLimitsResults } from '../models';
// @ts-ignore
import { SPEnquiryResults } from '../models';
// @ts-ignore
import { UserResults } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * APAllocateTransactions is an ODATA action - use POST to call
         * @param {number} creditID 
         * @param {number} debitID 
         * @param {number} allocationAmount 
         * @param {string} [allocationDate] 
         * @param {number} [discountAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPAllocateTransactionsPost: async (creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditID' is not null or undefined
            assertParamExists('aPAllocateTransactionsPost', 'creditID', creditID)
            // verify required parameter 'debitID' is not null or undefined
            assertParamExists('aPAllocateTransactionsPost', 'debitID', debitID)
            // verify required parameter 'allocationAmount' is not null or undefined
            assertParamExists('aPAllocateTransactionsPost', 'allocationAmount', allocationAmount)
            const localVarPath = `/APAllocateTransactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (creditID !== undefined) {
                localVarQueryParameter['CreditID'] = creditID;
            }

            if (debitID !== undefined) {
                localVarQueryParameter['DebitID'] = debitID;
            }

            if (allocationAmount !== undefined) {
                localVarQueryParameter['AllocationAmount'] = allocationAmount;
            }

            if (allocationDate !== undefined) {
                localVarQueryParameter['AllocationDate'] = allocationDate;
            }

            if (discountAmount !== undefined) {
                localVarQueryParameter['DiscountAmount'] = discountAmount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APAllocationTask is an ODATA function and Action - use either GET or POST to call
         * @param {number} creditorCode 
         * @param {string} allocDate 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPAllocationTaskGet: async (creditorCode: number, allocDate: string, periodID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorCode' is not null or undefined
            assertParamExists('aPAllocationTaskGet', 'creditorCode', creditorCode)
            // verify required parameter 'allocDate' is not null or undefined
            assertParamExists('aPAllocationTaskGet', 'allocDate', allocDate)
            const localVarPath = `/APAllocationTask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (creditorCode !== undefined) {
                localVarQueryParameter['CreditorCode'] = creditorCode;
            }

            if (allocDate !== undefined) {
                localVarQueryParameter['AllocDate'] = allocDate;
            }

            if (periodID !== undefined) {
                localVarQueryParameter['PeriodID'] = periodID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ARAllocateTransactions is an ODATA action - use POST to call
         * @param {number} creditID 
         * @param {number} debitID 
         * @param {number} allocationAmount 
         * @param {string} [allocationDate] 
         * @param {number} [discountAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocateTransactionsPost: async (creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditID' is not null or undefined
            assertParamExists('aRAllocateTransactionsPost', 'creditID', creditID)
            // verify required parameter 'debitID' is not null or undefined
            assertParamExists('aRAllocateTransactionsPost', 'debitID', debitID)
            // verify required parameter 'allocationAmount' is not null or undefined
            assertParamExists('aRAllocateTransactionsPost', 'allocationAmount', allocationAmount)
            const localVarPath = `/ARAllocateTransactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (creditID !== undefined) {
                localVarQueryParameter['CreditID'] = creditID;
            }

            if (debitID !== undefined) {
                localVarQueryParameter['DebitID'] = debitID;
            }

            if (allocationAmount !== undefined) {
                localVarQueryParameter['AllocationAmount'] = allocationAmount;
            }

            if (allocationDate !== undefined) {
                localVarQueryParameter['AllocationDate'] = allocationDate;
            }

            if (discountAmount !== undefined) {
                localVarQueryParameter['DiscountAmount'] = discountAmount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ARAllocationTask is an ODATA function and Action - use either GET or POST to call
         * @param {number} customerCode 
         * @param {string} allocDate 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocationTaskGet: async (customerCode: number, allocDate: string, periodID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRAllocationTaskGet', 'customerCode', customerCode)
            // verify required parameter 'allocDate' is not null or undefined
            assertParamExists('aRAllocationTaskGet', 'allocDate', allocDate)
            const localVarPath = `/ARAllocationTask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customerCode !== undefined) {
                localVarQueryParameter['CustomerCode'] = customerCode;
            }

            if (allocDate !== undefined) {
                localVarQueryParameter['AllocDate'] = allocDate;
            }

            if (periodID !== undefined) {
                localVarQueryParameter['PeriodID'] = periodID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * About is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aboutGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/About`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * AddPeriod is an ODATA function - use GET to call
         * @param {number} periodID 
         * @param {number} offset 
         * @param {boolean} [financial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeriodGet: async (periodID: number, offset: number, financial?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'periodID' is not null or undefined
            assertParamExists('addPeriodGet', 'periodID', periodID)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('addPeriodGet', 'offset', offset)
            const localVarPath = `/AddPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (periodID !== undefined) {
                localVarQueryParameter['PeriodID'] = periodID;
            }

            if (offset !== undefined) {
                localVarQueryParameter['Offset'] = offset;
            }

            if (financial !== undefined) {
                localVarQueryParameter['Financial'] = financial;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * AppName is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNameGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/AppName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * BaseCurrencyCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseCurrencyCodeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/BaseCurrencyCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Company is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CurrentPeriod is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPeriodGet: async (moduleCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moduleCode' is not null or undefined
            assertParamExists('currentPeriodGet', 'moduleCode', moduleCode)
            const localVarPath = `/CurrentPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (moduleCode !== undefined) {
                localVarQueryParameter['ModuleCode'] = moduleCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DefaultBranchCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultBranchCodeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DefaultBranchCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DefaultDepartmentCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultDepartmentCodeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DefaultDepartmentCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DefaultLocationCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultLocationCodeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DefaultLocationCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * EndPointExists is an ODATA function and Action - use either GET or POST to call
         * @param {string} endPoint 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endPointExistsGet: async (endPoint: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endPoint' is not null or undefined
            assertParamExists('endPointExistsGet', 'endPoint', endPoint)
            const localVarPath = `/EndPointExists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endPoint !== undefined) {
                localVarQueryParameter['EndPoint'] = endPoint;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FirstUserPeriod is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {string} [userCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firstUserPeriodGet: async (moduleCode: string, userCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moduleCode' is not null or undefined
            assertParamExists('firstUserPeriodGet', 'moduleCode', moduleCode)
            const localVarPath = `/FirstUserPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (moduleCode !== undefined) {
                localVarQueryParameter['ModuleCode'] = moduleCode;
            }

            if (userCode !== undefined) {
                localVarQueryParameter['UserCode'] = userCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GSTRate is an ODATA function - use GET to call
         * @param {string} gSTCode 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTRateGet: async (gSTCode: string, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gSTCode' is not null or undefined
            assertParamExists('gSTRateGet', 'gSTCode', gSTCode)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('gSTRateGet', 'date', date)
            const localVarPath = `/GSTRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gSTCode !== undefined) {
                localVarQueryParameter['GSTCode'] = gSTCode;
            }

            if (date !== undefined) {
                localVarQueryParameter['Date'] = date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GetExchangeRate is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {string} rateType 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeRateGet: async (currencyCode: string, rateType: string, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('getExchangeRateGet', 'currencyCode', currencyCode)
            // verify required parameter 'rateType' is not null or undefined
            assertParamExists('getExchangeRateGet', 'rateType', rateType)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getExchangeRateGet', 'date', date)
            const localVarPath = `/GetExchangeRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['CurrencyCode'] = currencyCode;
            }

            if (rateType !== undefined) {
                localVarQueryParameter['RateType'] = rateType;
            }

            if (date !== undefined) {
                localVarQueryParameter['Date'] = date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * GetPrimaryKey is an ODATA function - use GET to call
         * @param {string} entity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrimaryKeyGet: async (entity: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entity' is not null or undefined
            assertParamExists('getPrimaryKeyGet', 'entity', entity)
            const localVarPath = `/GetPrimaryKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entity !== undefined) {
                localVarQueryParameter['Entity'] = entity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICAvailable is an ODATA action - use POST to call
         * @param {string} sourceModule 
         * @param {number} sourceID 
         * @param {number} lineID 
         * @param {string} documentClass 
         * @param {Array<string>} afterLines 
         * @param {string} [customerCode] 
         * @param {string} [uOMCode] 
         * @param {number} [quantitySupplied] 
         * @param {number} [quantityOrdered] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCAvailablePost: async (sourceModule: string, sourceID: number, lineID: number, documentClass: string, afterLines: Array<string>, customerCode?: string, uOMCode?: string, quantitySupplied?: number, quantityOrdered?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceModule' is not null or undefined
            assertParamExists('iCAvailablePost', 'sourceModule', sourceModule)
            // verify required parameter 'sourceID' is not null or undefined
            assertParamExists('iCAvailablePost', 'sourceID', sourceID)
            // verify required parameter 'lineID' is not null or undefined
            assertParamExists('iCAvailablePost', 'lineID', lineID)
            // verify required parameter 'documentClass' is not null or undefined
            assertParamExists('iCAvailablePost', 'documentClass', documentClass)
            // verify required parameter 'afterLines' is not null or undefined
            assertParamExists('iCAvailablePost', 'afterLines', afterLines)
            const localVarPath = `/ICAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sourceModule !== undefined) {
                localVarQueryParameter['SourceModule'] = sourceModule;
            }

            if (sourceID !== undefined) {
                localVarQueryParameter['SourceID'] = sourceID;
            }

            if (lineID !== undefined) {
                localVarQueryParameter['LineID'] = lineID;
            }

            if (documentClass !== undefined) {
                localVarQueryParameter['DocumentClass'] = documentClass;
            }

            if (customerCode !== undefined) {
                localVarQueryParameter['CustomerCode'] = customerCode;
            }

            if (uOMCode !== undefined) {
                localVarQueryParameter['UOMCode'] = uOMCode;
            }

            if (quantitySupplied !== undefined) {
                localVarQueryParameter['QuantitySupplied'] = quantitySupplied;
            }

            if (quantityOrdered !== undefined) {
                localVarQueryParameter['QuantityOrdered'] = quantityOrdered;
            }

            if (afterLines) {
                localVarQueryParameter['AfterLines'] = afterLines.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICGenerateStockTake is an ODATA action - use POST to call
         * @param {string} location 
         * @param {string} period 
         * @param {string} [date] 
         * @param {string} [reference] 
         * @param {string} [details] 
         * @param {string} [productFrom] 
         * @param {string} [productTo] 
         * @param {string} [stockGroupFrom] 
         * @param {string} [stockGroupTo] 
         * @param {string} [creditor] 
         * @param {string} [includeNilQuantity] 
         * @param {'Basic' | 'Single' | 'Additive'} [countType] 
         * @param {string} [generateCounts] 
         * @param {string} [countPer] 
         * @param {string} [numberOfCounts] 
         * @param {string} [copyExpectedToCounted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCGenerateStockTakePost: async (location: string, period: string, date?: string, reference?: string, details?: string, productFrom?: string, productTo?: string, stockGroupFrom?: string, stockGroupTo?: string, creditor?: string, includeNilQuantity?: string, countType?: 'Basic' | 'Single' | 'Additive', generateCounts?: string, countPer?: string, numberOfCounts?: string, copyExpectedToCounted?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'location' is not null or undefined
            assertParamExists('iCGenerateStockTakePost', 'location', location)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('iCGenerateStockTakePost', 'period', period)
            const localVarPath = `/ICGenerateStockTake`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (location !== undefined) {
                localVarQueryParameter['Location'] = location;
            }

            if (period !== undefined) {
                localVarQueryParameter['Period'] = period;
            }

            if (date !== undefined) {
                localVarQueryParameter['Date'] = date;
            }

            if (reference !== undefined) {
                localVarQueryParameter['Reference'] = reference;
            }

            if (details !== undefined) {
                localVarQueryParameter['Details'] = details;
            }

            if (productFrom !== undefined) {
                localVarQueryParameter['ProductFrom'] = productFrom;
            }

            if (productTo !== undefined) {
                localVarQueryParameter['ProductTo'] = productTo;
            }

            if (stockGroupFrom !== undefined) {
                localVarQueryParameter['StockGroupFrom'] = stockGroupFrom;
            }

            if (stockGroupTo !== undefined) {
                localVarQueryParameter['StockGroupTo'] = stockGroupTo;
            }

            if (creditor !== undefined) {
                localVarQueryParameter['Creditor'] = creditor;
            }

            if (includeNilQuantity !== undefined) {
                localVarQueryParameter['IncludeNilQuantity'] = includeNilQuantity;
            }

            if (countType !== undefined) {
                localVarQueryParameter['CountType'] = countType;
            }

            if (generateCounts !== undefined) {
                localVarQueryParameter['GenerateCounts'] = generateCounts;
            }

            if (countPer !== undefined) {
                localVarQueryParameter['CountPer'] = countPer;
            }

            if (numberOfCounts !== undefined) {
                localVarQueryParameter['NumberOfCounts'] = numberOfCounts;
            }

            if (copyExpectedToCounted !== undefined) {
                localVarQueryParameter['CopyExpectedToCounted'] = copyExpectedToCounted;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICProductBatchLabels is an ODATA action - use POST to call
         * @param {Array<string>} products 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [startFromLabel] 
         * @param {number} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductBatchLabelsPost: async (products: Array<string>, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', startFromLabel?: number, location?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'products' is not null or undefined
            assertParamExists('iCProductBatchLabelsPost', 'products', products)
            const localVarPath = `/ICProductBatchLabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (products) {
                localVarQueryParameter['Products'] = products.join(COLLECTION_FORMATS.csv);
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }

            if (location !== undefined) {
                localVarQueryParameter['Location'] = location;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Image is an ODATA function - use GET to call
         * @param {string} imagePath 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGet: async (imagePath: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imagePath' is not null or undefined
            assertParamExists('imageGet', 'imagePath', imagePath)
            const localVarPath = `/Image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (imagePath !== undefined) {
                localVarQueryParameter['ImagePath'] = imagePath;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * LastUserPeriod is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {string} [userCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lastUserPeriodGet: async (moduleCode: string, userCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moduleCode' is not null or undefined
            assertParamExists('lastUserPeriodGet', 'moduleCode', moduleCode)
            const localVarPath = `/LastUserPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (moduleCode !== undefined) {
                localVarQueryParameter['ModuleCode'] = moduleCode;
            }

            if (userCode !== undefined) {
                localVarQueryParameter['UserCode'] = userCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Link is an ODATA function - use GET to call
         * @param {string} fileName 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {string} [contentType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkGet: async (fileName: string, intent?: 'attachment' | 'inline', contentType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('linkGet', 'fileName', fileName)
            const localVarPath = `/Link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['Content-Type'] = contentType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * LowerRateLimit is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lowerRateLimitGet: async (currencyCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('lowerRateLimitGet', 'currencyCode', currencyCode)
            const localVarPath = `/LowerRateLimit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['CurrencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ModuleAvailable is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAvailableGet: async (moduleCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moduleCode' is not null or undefined
            assertParamExists('moduleAvailableGet', 'moduleCode', moduleCode)
            const localVarPath = `/ModuleAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (moduleCode !== undefined) {
                localVarQueryParameter['ModuleCode'] = moduleCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * PeriodForDate is an ODATA function - use GET to call
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        periodForDateGet: async (date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('periodForDateGet', 'date', date)
            const localVarPath = `/PeriodForDate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['Date'] = date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * PlayLayout is an ODATA function and Action - use either GET or POST to call
         * @param {string} reportName 
         * @param {string} layoutName 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playLayoutGet: async (reportName: string, layoutName: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportName' is not null or undefined
            assertParamExists('playLayoutGet', 'reportName', reportName)
            // verify required parameter 'layoutName' is not null or undefined
            assertParamExists('playLayoutGet', 'layoutName', layoutName)
            const localVarPath = `/PlayLayout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reportName !== undefined) {
                localVarQueryParameter['ReportName'] = reportName;
            }

            if (layoutName !== undefined) {
                localVarQueryParameter['LayoutName'] = layoutName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * PlayReportScript is an ODATA function and Action - use either GET or POST to call
         * @param {string} scriptFileName 
         * @param {'List' | 'String' | 'Json'} [outputStyle] 
         * @param {string} [scriptArgsn] 
         * @param {string} [deleteFileAfterResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playReportScriptGet: async (scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, deleteFileAfterResponse?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scriptFileName' is not null or undefined
            assertParamExists('playReportScriptGet', 'scriptFileName', scriptFileName)
            const localVarPath = `/PlayReportScript`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scriptFileName !== undefined) {
                localVarQueryParameter['ScriptFileName'] = scriptFileName;
            }

            if (outputStyle !== undefined) {
                localVarQueryParameter['OutputStyle'] = outputStyle;
            }

            if (scriptArgsn !== undefined) {
                localVarQueryParameter['ScriptArgsn'] = scriptArgsn;
            }

            if (deleteFileAfterResponse !== undefined) {
                localVarQueryParameter['DeleteFileAfterResponse'] = deleteFileAfterResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * PlayScript is an ODATA function and Action - use either GET or POST to call
         * @param {string} scriptFileName 
         * @param {'List' | 'String' | 'Json'} [outputStyle] 
         * @param {string} [scriptArgsn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playScriptGet: async (scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scriptFileName' is not null or undefined
            assertParamExists('playScriptGet', 'scriptFileName', scriptFileName)
            const localVarPath = `/PlayScript`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scriptFileName !== undefined) {
                localVarQueryParameter['ScriptFileName'] = scriptFileName;
            }

            if (outputStyle !== undefined) {
                localVarQueryParameter['OutputStyle'] = outputStyle;
            }

            if (scriptArgsn !== undefined) {
                localVarQueryParameter['ScriptArgsn'] = scriptArgsn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * RateLimits is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rateLimitsGet: async (currencyCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('rateLimitsGet', 'currencyCode', currencyCode)
            const localVarPath = `/RateLimits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['CurrencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SPEnquiry is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {string} productCode 
         * @param {string} documentDate 
         * @param {number} [priceCode] 
         * @param {string} [aRCategory1] 
         * @param {string} [iCCategory1] 
         * @param {string} [uOMCode] 
         * @param {number} [quantity] 
         * @param {number} [uOMQuantity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPEnquiryGet: async (customerCode: string, productCode: string, documentDate: string, priceCode?: number, aRCategory1?: string, iCCategory1?: string, uOMCode?: string, quantity?: number, uOMQuantity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('sPEnquiryGet', 'customerCode', customerCode)
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('sPEnquiryGet', 'productCode', productCode)
            // verify required parameter 'documentDate' is not null or undefined
            assertParamExists('sPEnquiryGet', 'documentDate', documentDate)
            const localVarPath = `/SPEnquiry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customerCode !== undefined) {
                localVarQueryParameter['CustomerCode'] = customerCode;
            }

            if (productCode !== undefined) {
                localVarQueryParameter['ProductCode'] = productCode;
            }

            if (priceCode !== undefined) {
                localVarQueryParameter['PriceCode'] = priceCode;
            }

            if (aRCategory1 !== undefined) {
                localVarQueryParameter['ARCategory1'] = aRCategory1;
            }

            if (iCCategory1 !== undefined) {
                localVarQueryParameter['ICCategory1'] = iCCategory1;
            }

            if (documentDate !== undefined) {
                localVarQueryParameter['DocumentDate'] = documentDate;
            }

            if (uOMCode !== undefined) {
                localVarQueryParameter['UOMCode'] = uOMCode;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['Quantity'] = quantity;
            }

            if (uOMQuantity !== undefined) {
                localVarQueryParameter['UOMQuantity'] = uOMQuantity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ScriptDoc is an ODATA function - use GET to call
         * @param {'DataObjects' | 'Reports' | 'Functions' | 'All'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scriptDocGet: async (type?: 'DataObjects' | 'Reports' | 'Functions' | 'All', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ScriptDoc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SetExchangeRate is an ODATA action - use POST to call
         * @param {string} currencyCode 
         * @param {string} rateType 
         * @param {string} date 
         * @param {number} rate 
         * @param {string} [expiryDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExchangeRatePost: async (currencyCode: string, rateType: string, date: string, rate: number, expiryDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('setExchangeRatePost', 'currencyCode', currencyCode)
            // verify required parameter 'rateType' is not null or undefined
            assertParamExists('setExchangeRatePost', 'rateType', rateType)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('setExchangeRatePost', 'date', date)
            // verify required parameter 'rate' is not null or undefined
            assertParamExists('setExchangeRatePost', 'rate', rate)
            const localVarPath = `/SetExchangeRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['CurrencyCode'] = currencyCode;
            }

            if (rateType !== undefined) {
                localVarQueryParameter['RateType'] = rateType;
            }

            if (date !== undefined) {
                localVarQueryParameter['Date'] = date;
            }

            if (rate !== undefined) {
                localVarQueryParameter['Rate'] = rate;
            }

            if (expiryDate !== undefined) {
                localVarQueryParameter['ExpiryDate'] = expiryDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SetRateLimits is an ODATA action - use POST to call
         * @param {string} currencyCode 
         * @param {number} lowerRate 
         * @param {number} upperRate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRateLimitsPost: async (currencyCode: string, lowerRate: number, upperRate: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('setRateLimitsPost', 'currencyCode', currencyCode)
            // verify required parameter 'lowerRate' is not null or undefined
            assertParamExists('setRateLimitsPost', 'lowerRate', lowerRate)
            // verify required parameter 'upperRate' is not null or undefined
            assertParamExists('setRateLimitsPost', 'upperRate', upperRate)
            const localVarPath = `/SetRateLimits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['CurrencyCode'] = currencyCode;
            }

            if (lowerRate !== undefined) {
                localVarQueryParameter['LowerRate'] = lowerRate;
            }

            if (upperRate !== undefined) {
                localVarQueryParameter['UpperRate'] = upperRate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SetSystemDate is an ODATA action - use POST to call
         * @param {string} systemDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemDatePost: async (systemDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemDate' is not null or undefined
            assertParamExists('setSystemDatePost', 'systemDate', systemDate)
            const localVarPath = `/SetSystemDate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (systemDate !== undefined) {
                localVarQueryParameter['SystemDate'] = systemDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SetSystemPeriod is an ODATA action - use POST to call
         * @param {number} systemPeriod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemPeriodPost: async (systemPeriod: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemPeriod' is not null or undefined
            assertParamExists('setSystemPeriodPost', 'systemPeriod', systemPeriod)
            const localVarPath = `/SetSystemPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (systemPeriod !== undefined) {
                localVarQueryParameter['SystemPeriod'] = systemPeriod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SystemDate is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDateGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemDate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SystemPeriod is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPeriodGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * UpperRateLimit is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upperRateLimitGet: async (currencyCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('upperRateLimitGet', 'currencyCode', currencyCode)
            const localVarPath = `/UpperRateLimit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['CurrencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * APAllocateTransactions is an ODATA action - use POST to call
         * @param {number} creditID 
         * @param {number} debitID 
         * @param {number} allocationAmount 
         * @param {string} [allocationDate] 
         * @param {number} [discountAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPAllocateTransactionsPost(creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPAllocateTransactionsPost(creditID, debitID, allocationAmount, allocationDate, discountAmount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APAllocationTask is an ODATA function and Action - use either GET or POST to call
         * @param {number} creditorCode 
         * @param {string} allocDate 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPAllocationTaskGet(creditorCode: number, allocDate: string, periodID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APAllocationTaskResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPAllocationTaskGet(creditorCode, allocDate, periodID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ARAllocateTransactions is an ODATA action - use POST to call
         * @param {number} creditID 
         * @param {number} debitID 
         * @param {number} allocationAmount 
         * @param {string} [allocationDate] 
         * @param {number} [discountAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRAllocateTransactionsPost(creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRAllocateTransactionsPost(creditID, debitID, allocationAmount, allocationDate, discountAmount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ARAllocationTask is an ODATA function and Action - use either GET or POST to call
         * @param {number} customerCode 
         * @param {string} allocDate 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRAllocationTaskGet(customerCode: number, allocDate: string, periodID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARAllocationTaskResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRAllocationTaskGet(customerCode, allocDate, periodID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * About is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aboutGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AboutResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aboutGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * AddPeriod is an ODATA function - use GET to call
         * @param {number} periodID 
         * @param {number} offset 
         * @param {boolean} [financial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPeriodGet(periodID: number, offset: number, financial?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPeriodGet(periodID, offset, financial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * AppName is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appNameGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appNameGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * BaseCurrencyCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baseCurrencyCodeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baseCurrencyCodeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Company is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CurrentPeriod is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentPeriodGet(moduleCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentPeriodGet(moduleCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * DefaultBranchCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async defaultBranchCodeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.defaultBranchCodeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * DefaultDepartmentCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async defaultDepartmentCodeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.defaultDepartmentCodeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * DefaultLocationCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async defaultLocationCodeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.defaultLocationCodeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * EndPointExists is an ODATA function and Action - use either GET or POST to call
         * @param {string} endPoint 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endPointExistsGet(endPoint: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endPointExistsGet(endPoint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * FirstUserPeriod is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {string} [userCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firstUserPeriodGet(moduleCode: string, userCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.firstUserPeriodGet(moduleCode, userCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * GSTRate is an ODATA function - use GET to call
         * @param {string} gSTCode 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gSTRateGet(gSTCode: string, date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gSTRateGet(gSTCode, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * GetExchangeRate is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {string} rateType 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExchangeRateGet(currencyCode: string, rateType: string, date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExchangeRateGet(currencyCode, rateType, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * GetPrimaryKey is an ODATA function - use GET to call
         * @param {string} entity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrimaryKeyGet(entity: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrimaryKeyGet(entity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICAvailable is an ODATA action - use POST to call
         * @param {string} sourceModule 
         * @param {number} sourceID 
         * @param {number} lineID 
         * @param {string} documentClass 
         * @param {Array<string>} afterLines 
         * @param {string} [customerCode] 
         * @param {string} [uOMCode] 
         * @param {number} [quantitySupplied] 
         * @param {number} [quantityOrdered] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCAvailablePost(sourceModule: string, sourceID: number, lineID: number, documentClass: string, afterLines: Array<string>, customerCode?: string, uOMCode?: string, quantitySupplied?: number, quantityOrdered?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICAvailableResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCAvailablePost(sourceModule, sourceID, lineID, documentClass, afterLines, customerCode, uOMCode, quantitySupplied, quantityOrdered, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICGenerateStockTake is an ODATA action - use POST to call
         * @param {string} location 
         * @param {string} period 
         * @param {string} [date] 
         * @param {string} [reference] 
         * @param {string} [details] 
         * @param {string} [productFrom] 
         * @param {string} [productTo] 
         * @param {string} [stockGroupFrom] 
         * @param {string} [stockGroupTo] 
         * @param {string} [creditor] 
         * @param {string} [includeNilQuantity] 
         * @param {'Basic' | 'Single' | 'Additive'} [countType] 
         * @param {string} [generateCounts] 
         * @param {string} [countPer] 
         * @param {string} [numberOfCounts] 
         * @param {string} [copyExpectedToCounted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCGenerateStockTakePost(location: string, period: string, date?: string, reference?: string, details?: string, productFrom?: string, productTo?: string, stockGroupFrom?: string, stockGroupTo?: string, creditor?: string, includeNilQuantity?: string, countType?: 'Basic' | 'Single' | 'Additive', generateCounts?: string, countPer?: string, numberOfCounts?: string, copyExpectedToCounted?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCGenerateStockTakePost(location, period, date, reference, details, productFrom, productTo, stockGroupFrom, stockGroupTo, creditor, includeNilQuantity, countType, generateCounts, countPer, numberOfCounts, copyExpectedToCounted, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICProductBatchLabels is an ODATA action - use POST to call
         * @param {Array<string>} products 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [startFromLabel] 
         * @param {number} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductBatchLabelsPost(products: Array<string>, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', startFromLabel?: number, location?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductBatchLabelsPost(products, destination, reportFileName, format, printerName, fileName, intent, startFromLabel, location, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Image is an ODATA function - use GET to call
         * @param {string} imagePath 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageGet(imagePath: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageGet(imagePath, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * LastUserPeriod is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {string} [userCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lastUserPeriodGet(moduleCode: string, userCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lastUserPeriodGet(moduleCode, userCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Link is an ODATA function - use GET to call
         * @param {string} fileName 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {string} [contentType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkGet(fileName: string, intent?: 'attachment' | 'inline', contentType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkGet(fileName, intent, contentType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * LowerRateLimit is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lowerRateLimitGet(currencyCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lowerRateLimitGet(currencyCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ModuleAvailable is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleAvailableGet(moduleCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleAvailableGet(moduleCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * PeriodForDate is an ODATA function - use GET to call
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async periodForDateGet(date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.periodForDateGet(date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * PlayLayout is an ODATA function and Action - use either GET or POST to call
         * @param {string} reportName 
         * @param {string} layoutName 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playLayoutGet(reportName: string, layoutName: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playLayoutGet(reportName, layoutName, format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * PlayReportScript is an ODATA function and Action - use either GET or POST to call
         * @param {string} scriptFileName 
         * @param {'List' | 'String' | 'Json'} [outputStyle] 
         * @param {string} [scriptArgsn] 
         * @param {string} [deleteFileAfterResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playReportScriptGet(scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, deleteFileAfterResponse?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playReportScriptGet(scriptFileName, outputStyle, scriptArgsn, deleteFileAfterResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * PlayScript is an ODATA function and Action - use either GET or POST to call
         * @param {string} scriptFileName 
         * @param {'List' | 'String' | 'Json'} [outputStyle] 
         * @param {string} [scriptArgsn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playScriptGet(scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playScriptGet(scriptFileName, outputStyle, scriptArgsn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * RateLimits is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rateLimitsGet(currencyCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RateLimitsResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rateLimitsGet(currencyCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SPEnquiry is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {string} productCode 
         * @param {string} documentDate 
         * @param {number} [priceCode] 
         * @param {string} [aRCategory1] 
         * @param {string} [iCCategory1] 
         * @param {string} [uOMCode] 
         * @param {number} [quantity] 
         * @param {number} [uOMQuantity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPEnquiryGet(customerCode: string, productCode: string, documentDate: string, priceCode?: number, aRCategory1?: string, iCCategory1?: string, uOMCode?: string, quantity?: number, uOMQuantity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPEnquiryResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPEnquiryGet(customerCode, productCode, documentDate, priceCode, aRCategory1, iCCategory1, uOMCode, quantity, uOMQuantity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ScriptDoc is an ODATA function - use GET to call
         * @param {'DataObjects' | 'Reports' | 'Functions' | 'All'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scriptDocGet(type?: 'DataObjects' | 'Reports' | 'Functions' | 'All', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scriptDocGet(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SetExchangeRate is an ODATA action - use POST to call
         * @param {string} currencyCode 
         * @param {string} rateType 
         * @param {string} date 
         * @param {number} rate 
         * @param {string} [expiryDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExchangeRatePost(currencyCode: string, rateType: string, date: string, rate: number, expiryDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setExchangeRatePost(currencyCode, rateType, date, rate, expiryDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SetRateLimits is an ODATA action - use POST to call
         * @param {string} currencyCode 
         * @param {number} lowerRate 
         * @param {number} upperRate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRateLimitsPost(currencyCode: string, lowerRate: number, upperRate: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRateLimitsPost(currencyCode, lowerRate, upperRate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SetSystemDate is an ODATA action - use POST to call
         * @param {string} systemDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSystemDatePost(systemDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSystemDatePost(systemDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SetSystemPeriod is an ODATA action - use POST to call
         * @param {number} systemPeriod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSystemPeriodPost(systemPeriod: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSystemPeriodPost(systemPeriod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SystemDate is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemDateGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemDateGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SystemPeriod is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemPeriodGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemPeriodGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * UpperRateLimit is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upperRateLimitGet(currencyCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upperRateLimitGet(currencyCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * User is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * APAllocateTransactions is an ODATA action - use POST to call
         * @param {number} creditID 
         * @param {number} debitID 
         * @param {number} allocationAmount 
         * @param {string} [allocationDate] 
         * @param {number} [discountAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPAllocateTransactionsPost(creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPAllocateTransactionsPost(creditID, debitID, allocationAmount, allocationDate, discountAmount, options).then((request) => request(axios, basePath));
        },
        /**
         * APAllocationTask is an ODATA function and Action - use either GET or POST to call
         * @param {number} creditorCode 
         * @param {string} allocDate 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPAllocationTaskGet(creditorCode: number, allocDate: string, periodID?: number, options?: any): AxiosPromise<APAllocationTaskResults> {
            return localVarFp.aPAllocationTaskGet(creditorCode, allocDate, periodID, options).then((request) => request(axios, basePath));
        },
        /**
         * ARAllocateTransactions is an ODATA action - use POST to call
         * @param {number} creditID 
         * @param {number} debitID 
         * @param {number} allocationAmount 
         * @param {string} [allocationDate] 
         * @param {number} [discountAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocateTransactionsPost(creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options?: any): AxiosPromise<void> {
            return localVarFp.aRAllocateTransactionsPost(creditID, debitID, allocationAmount, allocationDate, discountAmount, options).then((request) => request(axios, basePath));
        },
        /**
         * ARAllocationTask is an ODATA function and Action - use either GET or POST to call
         * @param {number} customerCode 
         * @param {string} allocDate 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocationTaskGet(customerCode: number, allocDate: string, periodID?: number, options?: any): AxiosPromise<ARAllocationTaskResults> {
            return localVarFp.aRAllocationTaskGet(customerCode, allocDate, periodID, options).then((request) => request(axios, basePath));
        },
        /**
         * About is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aboutGet(options?: any): AxiosPromise<AboutResults> {
            return localVarFp.aboutGet(options).then((request) => request(axios, basePath));
        },
        /**
         * AddPeriod is an ODATA function - use GET to call
         * @param {number} periodID 
         * @param {number} offset 
         * @param {boolean} [financial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeriodGet(periodID: number, offset: number, financial?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.addPeriodGet(periodID, offset, financial, options).then((request) => request(axios, basePath));
        },
        /**
         * AppName is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNameGet(options?: any): AxiosPromise<void> {
            return localVarFp.appNameGet(options).then((request) => request(axios, basePath));
        },
        /**
         * BaseCurrencyCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baseCurrencyCodeGet(options?: any): AxiosPromise<void> {
            return localVarFp.baseCurrencyCodeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Company is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyGet(options?: any): AxiosPromise<CompanyResults> {
            return localVarFp.companyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * CurrentPeriod is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPeriodGet(moduleCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.currentPeriodGet(moduleCode, options).then((request) => request(axios, basePath));
        },
        /**
         * DefaultBranchCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultBranchCodeGet(options?: any): AxiosPromise<void> {
            return localVarFp.defaultBranchCodeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * DefaultDepartmentCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultDepartmentCodeGet(options?: any): AxiosPromise<void> {
            return localVarFp.defaultDepartmentCodeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * DefaultLocationCode is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultLocationCodeGet(options?: any): AxiosPromise<void> {
            return localVarFp.defaultLocationCodeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * EndPointExists is an ODATA function and Action - use either GET or POST to call
         * @param {string} endPoint 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endPointExistsGet(endPoint: string, options?: any): AxiosPromise<void> {
            return localVarFp.endPointExistsGet(endPoint, options).then((request) => request(axios, basePath));
        },
        /**
         * FirstUserPeriod is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {string} [userCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firstUserPeriodGet(moduleCode: string, userCode?: string, options?: any): AxiosPromise<void> {
            return localVarFp.firstUserPeriodGet(moduleCode, userCode, options).then((request) => request(axios, basePath));
        },
        /**
         * GSTRate is an ODATA function - use GET to call
         * @param {string} gSTCode 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTRateGet(gSTCode: string, date: string, options?: any): AxiosPromise<void> {
            return localVarFp.gSTRateGet(gSTCode, date, options).then((request) => request(axios, basePath));
        },
        /**
         * GetExchangeRate is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {string} rateType 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeRateGet(currencyCode: string, rateType: string, date: string, options?: any): AxiosPromise<void> {
            return localVarFp.getExchangeRateGet(currencyCode, rateType, date, options).then((request) => request(axios, basePath));
        },
        /**
         * GetPrimaryKey is an ODATA function - use GET to call
         * @param {string} entity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrimaryKeyGet(entity: string, options?: any): AxiosPromise<void> {
            return localVarFp.getPrimaryKeyGet(entity, options).then((request) => request(axios, basePath));
        },
        /**
         * ICAvailable is an ODATA action - use POST to call
         * @param {string} sourceModule 
         * @param {number} sourceID 
         * @param {number} lineID 
         * @param {string} documentClass 
         * @param {Array<string>} afterLines 
         * @param {string} [customerCode] 
         * @param {string} [uOMCode] 
         * @param {number} [quantitySupplied] 
         * @param {number} [quantityOrdered] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCAvailablePost(sourceModule: string, sourceID: number, lineID: number, documentClass: string, afterLines: Array<string>, customerCode?: string, uOMCode?: string, quantitySupplied?: number, quantityOrdered?: number, options?: any): AxiosPromise<ICAvailableResults> {
            return localVarFp.iCAvailablePost(sourceModule, sourceID, lineID, documentClass, afterLines, customerCode, uOMCode, quantitySupplied, quantityOrdered, options).then((request) => request(axios, basePath));
        },
        /**
         * ICGenerateStockTake is an ODATA action - use POST to call
         * @param {string} location 
         * @param {string} period 
         * @param {string} [date] 
         * @param {string} [reference] 
         * @param {string} [details] 
         * @param {string} [productFrom] 
         * @param {string} [productTo] 
         * @param {string} [stockGroupFrom] 
         * @param {string} [stockGroupTo] 
         * @param {string} [creditor] 
         * @param {string} [includeNilQuantity] 
         * @param {'Basic' | 'Single' | 'Additive'} [countType] 
         * @param {string} [generateCounts] 
         * @param {string} [countPer] 
         * @param {string} [numberOfCounts] 
         * @param {string} [copyExpectedToCounted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCGenerateStockTakePost(location: string, period: string, date?: string, reference?: string, details?: string, productFrom?: string, productTo?: string, stockGroupFrom?: string, stockGroupTo?: string, creditor?: string, includeNilQuantity?: string, countType?: 'Basic' | 'Single' | 'Additive', generateCounts?: string, countPer?: string, numberOfCounts?: string, copyExpectedToCounted?: string, options?: any): AxiosPromise<void> {
            return localVarFp.iCGenerateStockTakePost(location, period, date, reference, details, productFrom, productTo, stockGroupFrom, stockGroupTo, creditor, includeNilQuantity, countType, generateCounts, countPer, numberOfCounts, copyExpectedToCounted, options).then((request) => request(axios, basePath));
        },
        /**
         * ICProductBatchLabels is an ODATA action - use POST to call
         * @param {Array<string>} products 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [startFromLabel] 
         * @param {number} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductBatchLabelsPost(products: Array<string>, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', startFromLabel?: number, location?: number, options?: any): AxiosPromise<void> {
            return localVarFp.iCProductBatchLabelsPost(products, destination, reportFileName, format, printerName, fileName, intent, startFromLabel, location, options).then((request) => request(axios, basePath));
        },
        /**
         * Image is an ODATA function - use GET to call
         * @param {string} imagePath 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGet(imagePath: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.imageGet(imagePath, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * LastUserPeriod is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {string} [userCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lastUserPeriodGet(moduleCode: string, userCode?: string, options?: any): AxiosPromise<void> {
            return localVarFp.lastUserPeriodGet(moduleCode, userCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Link is an ODATA function - use GET to call
         * @param {string} fileName 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {string} [contentType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkGet(fileName: string, intent?: 'attachment' | 'inline', contentType?: string, options?: any): AxiosPromise<void> {
            return localVarFp.linkGet(fileName, intent, contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * LowerRateLimit is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lowerRateLimitGet(currencyCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.lowerRateLimitGet(currencyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * ModuleAvailable is an ODATA function - use GET to call
         * @param {string} moduleCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAvailableGet(moduleCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.moduleAvailableGet(moduleCode, options).then((request) => request(axios, basePath));
        },
        /**
         * PeriodForDate is an ODATA function - use GET to call
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        periodForDateGet(date: string, options?: any): AxiosPromise<void> {
            return localVarFp.periodForDateGet(date, options).then((request) => request(axios, basePath));
        },
        /**
         * PlayLayout is an ODATA function and Action - use either GET or POST to call
         * @param {string} reportName 
         * @param {string} layoutName 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playLayoutGet(reportName: string, layoutName: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', options?: any): AxiosPromise<void> {
            return localVarFp.playLayoutGet(reportName, layoutName, format, options).then((request) => request(axios, basePath));
        },
        /**
         * PlayReportScript is an ODATA function and Action - use either GET or POST to call
         * @param {string} scriptFileName 
         * @param {'List' | 'String' | 'Json'} [outputStyle] 
         * @param {string} [scriptArgsn] 
         * @param {string} [deleteFileAfterResponse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playReportScriptGet(scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, deleteFileAfterResponse?: string, options?: any): AxiosPromise<void> {
            return localVarFp.playReportScriptGet(scriptFileName, outputStyle, scriptArgsn, deleteFileAfterResponse, options).then((request) => request(axios, basePath));
        },
        /**
         * PlayScript is an ODATA function and Action - use either GET or POST to call
         * @param {string} scriptFileName 
         * @param {'List' | 'String' | 'Json'} [outputStyle] 
         * @param {string} [scriptArgsn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playScriptGet(scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, options?: any): AxiosPromise<void> {
            return localVarFp.playScriptGet(scriptFileName, outputStyle, scriptArgsn, options).then((request) => request(axios, basePath));
        },
        /**
         * RateLimits is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rateLimitsGet(currencyCode: string, options?: any): AxiosPromise<RateLimitsResults> {
            return localVarFp.rateLimitsGet(currencyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * SPEnquiry is an ODATA function and Action - use either GET or POST to call
         * @param {string} customerCode 
         * @param {string} productCode 
         * @param {string} documentDate 
         * @param {number} [priceCode] 
         * @param {string} [aRCategory1] 
         * @param {string} [iCCategory1] 
         * @param {string} [uOMCode] 
         * @param {number} [quantity] 
         * @param {number} [uOMQuantity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPEnquiryGet(customerCode: string, productCode: string, documentDate: string, priceCode?: number, aRCategory1?: string, iCCategory1?: string, uOMCode?: string, quantity?: number, uOMQuantity?: number, options?: any): AxiosPromise<SPEnquiryResults> {
            return localVarFp.sPEnquiryGet(customerCode, productCode, documentDate, priceCode, aRCategory1, iCCategory1, uOMCode, quantity, uOMQuantity, options).then((request) => request(axios, basePath));
        },
        /**
         * ScriptDoc is an ODATA function - use GET to call
         * @param {'DataObjects' | 'Reports' | 'Functions' | 'All'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scriptDocGet(type?: 'DataObjects' | 'Reports' | 'Functions' | 'All', options?: any): AxiosPromise<void> {
            return localVarFp.scriptDocGet(type, options).then((request) => request(axios, basePath));
        },
        /**
         * SetExchangeRate is an ODATA action - use POST to call
         * @param {string} currencyCode 
         * @param {string} rateType 
         * @param {string} date 
         * @param {number} rate 
         * @param {string} [expiryDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExchangeRatePost(currencyCode: string, rateType: string, date: string, rate: number, expiryDate?: string, options?: any): AxiosPromise<void> {
            return localVarFp.setExchangeRatePost(currencyCode, rateType, date, rate, expiryDate, options).then((request) => request(axios, basePath));
        },
        /**
         * SetRateLimits is an ODATA action - use POST to call
         * @param {string} currencyCode 
         * @param {number} lowerRate 
         * @param {number} upperRate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRateLimitsPost(currencyCode: string, lowerRate: number, upperRate: number, options?: any): AxiosPromise<void> {
            return localVarFp.setRateLimitsPost(currencyCode, lowerRate, upperRate, options).then((request) => request(axios, basePath));
        },
        /**
         * SetSystemDate is an ODATA action - use POST to call
         * @param {string} systemDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemDatePost(systemDate: string, options?: any): AxiosPromise<void> {
            return localVarFp.setSystemDatePost(systemDate, options).then((request) => request(axios, basePath));
        },
        /**
         * SetSystemPeriod is an ODATA action - use POST to call
         * @param {number} systemPeriod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemPeriodPost(systemPeriod: number, options?: any): AxiosPromise<void> {
            return localVarFp.setSystemPeriodPost(systemPeriod, options).then((request) => request(axios, basePath));
        },
        /**
         * SystemDate is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDateGet(options?: any): AxiosPromise<void> {
            return localVarFp.systemDateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * SystemPeriod is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPeriodGet(options?: any): AxiosPromise<void> {
            return localVarFp.systemPeriodGet(options).then((request) => request(axios, basePath));
        },
        /**
         * UpperRateLimit is an ODATA function - use GET to call
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upperRateLimitGet(currencyCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.upperRateLimitGet(currencyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * User is an ODATA function - use GET to call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: any): AxiosPromise<UserResults> {
            return localVarFp.userGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * APAllocateTransactions is an ODATA action - use POST to call
     * @param {number} creditID 
     * @param {number} debitID 
     * @param {number} allocationAmount 
     * @param {string} [allocationDate] 
     * @param {number} [discountAmount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    aPAllocateTransactionsPost(creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APAllocationTask is an ODATA function and Action - use either GET or POST to call
     * @param {number} creditorCode 
     * @param {string} allocDate 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    aPAllocationTaskGet(creditorCode: number, allocDate: string, periodID?: number, options?: AxiosRequestConfig): AxiosPromise<APAllocationTaskResults>;

    /**
     * ARAllocateTransactions is an ODATA action - use POST to call
     * @param {number} creditID 
     * @param {number} debitID 
     * @param {number} allocationAmount 
     * @param {string} [allocationDate] 
     * @param {number} [discountAmount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    aRAllocateTransactionsPost(creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ARAllocationTask is an ODATA function and Action - use either GET or POST to call
     * @param {number} customerCode 
     * @param {string} allocDate 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    aRAllocationTaskGet(customerCode: number, allocDate: string, periodID?: number, options?: AxiosRequestConfig): AxiosPromise<ARAllocationTaskResults>;

    /**
     * About is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    aboutGet(options?: AxiosRequestConfig): AxiosPromise<AboutResults>;

    /**
     * AddPeriod is an ODATA function - use GET to call
     * @param {number} periodID 
     * @param {number} offset 
     * @param {boolean} [financial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    addPeriodGet(periodID: number, offset: number, financial?: boolean, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * AppName is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    appNameGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * BaseCurrencyCode is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    baseCurrencyCodeGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Company is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    companyGet(options?: AxiosRequestConfig): AxiosPromise<CompanyResults>;

    /**
     * CurrentPeriod is an ODATA function - use GET to call
     * @param {string} moduleCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    currentPeriodGet(moduleCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * DefaultBranchCode is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    defaultBranchCodeGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * DefaultDepartmentCode is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    defaultDepartmentCodeGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * DefaultLocationCode is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    defaultLocationCodeGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * EndPointExists is an ODATA function and Action - use either GET or POST to call
     * @param {string} endPoint 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    endPointExistsGet(endPoint: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * FirstUserPeriod is an ODATA function - use GET to call
     * @param {string} moduleCode 
     * @param {string} [userCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    firstUserPeriodGet(moduleCode: string, userCode?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * GSTRate is an ODATA function - use GET to call
     * @param {string} gSTCode 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    gSTRateGet(gSTCode: string, date: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * GetExchangeRate is an ODATA function - use GET to call
     * @param {string} currencyCode 
     * @param {string} rateType 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getExchangeRateGet(currencyCode: string, rateType: string, date: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * GetPrimaryKey is an ODATA function - use GET to call
     * @param {string} entity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPrimaryKeyGet(entity: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICAvailable is an ODATA action - use POST to call
     * @param {string} sourceModule 
     * @param {number} sourceID 
     * @param {number} lineID 
     * @param {string} documentClass 
     * @param {Array<string>} afterLines 
     * @param {string} [customerCode] 
     * @param {string} [uOMCode] 
     * @param {number} [quantitySupplied] 
     * @param {number} [quantityOrdered] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    iCAvailablePost(sourceModule: string, sourceID: number, lineID: number, documentClass: string, afterLines: Array<string>, customerCode?: string, uOMCode?: string, quantitySupplied?: number, quantityOrdered?: number, options?: AxiosRequestConfig): AxiosPromise<ICAvailableResults>;

    /**
     * ICGenerateStockTake is an ODATA action - use POST to call
     * @param {string} location 
     * @param {string} period 
     * @param {string} [date] 
     * @param {string} [reference] 
     * @param {string} [details] 
     * @param {string} [productFrom] 
     * @param {string} [productTo] 
     * @param {string} [stockGroupFrom] 
     * @param {string} [stockGroupTo] 
     * @param {string} [creditor] 
     * @param {string} [includeNilQuantity] 
     * @param {'Basic' | 'Single' | 'Additive'} [countType] 
     * @param {string} [generateCounts] 
     * @param {string} [countPer] 
     * @param {string} [numberOfCounts] 
     * @param {string} [copyExpectedToCounted] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    iCGenerateStockTakePost(location: string, period: string, date?: string, reference?: string, details?: string, productFrom?: string, productTo?: string, stockGroupFrom?: string, stockGroupTo?: string, creditor?: string, includeNilQuantity?: string, countType?: 'Basic' | 'Single' | 'Additive', generateCounts?: string, countPer?: string, numberOfCounts?: string, copyExpectedToCounted?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICProductBatchLabels is an ODATA action - use POST to call
     * @param {Array<string>} products 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [startFromLabel] 
     * @param {number} [location] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    iCProductBatchLabelsPost(products: Array<string>, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', startFromLabel?: number, location?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Image is an ODATA function - use GET to call
     * @param {string} imagePath 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    imageGet(imagePath: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * LastUserPeriod is an ODATA function - use GET to call
     * @param {string} moduleCode 
     * @param {string} [userCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    lastUserPeriodGet(moduleCode: string, userCode?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Link is an ODATA function - use GET to call
     * @param {string} fileName 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {string} [contentType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    linkGet(fileName: string, intent?: 'attachment' | 'inline', contentType?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * LowerRateLimit is an ODATA function - use GET to call
     * @param {string} currencyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    lowerRateLimitGet(currencyCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ModuleAvailable is an ODATA function - use GET to call
     * @param {string} moduleCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    moduleAvailableGet(moduleCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * PeriodForDate is an ODATA function - use GET to call
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    periodForDateGet(date: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * PlayLayout is an ODATA function and Action - use either GET or POST to call
     * @param {string} reportName 
     * @param {string} layoutName 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    playLayoutGet(reportName: string, layoutName: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * PlayReportScript is an ODATA function and Action - use either GET or POST to call
     * @param {string} scriptFileName 
     * @param {'List' | 'String' | 'Json'} [outputStyle] 
     * @param {string} [scriptArgsn] 
     * @param {string} [deleteFileAfterResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    playReportScriptGet(scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, deleteFileAfterResponse?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * PlayScript is an ODATA function and Action - use either GET or POST to call
     * @param {string} scriptFileName 
     * @param {'List' | 'String' | 'Json'} [outputStyle] 
     * @param {string} [scriptArgsn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    playScriptGet(scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * RateLimits is an ODATA function - use GET to call
     * @param {string} currencyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rateLimitsGet(currencyCode: string, options?: AxiosRequestConfig): AxiosPromise<RateLimitsResults>;

    /**
     * SPEnquiry is an ODATA function and Action - use either GET or POST to call
     * @param {string} customerCode 
     * @param {string} productCode 
     * @param {string} documentDate 
     * @param {number} [priceCode] 
     * @param {string} [aRCategory1] 
     * @param {string} [iCCategory1] 
     * @param {string} [uOMCode] 
     * @param {number} [quantity] 
     * @param {number} [uOMQuantity] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sPEnquiryGet(customerCode: string, productCode: string, documentDate: string, priceCode?: number, aRCategory1?: string, iCCategory1?: string, uOMCode?: string, quantity?: number, uOMQuantity?: number, options?: AxiosRequestConfig): AxiosPromise<SPEnquiryResults>;

    /**
     * ScriptDoc is an ODATA function - use GET to call
     * @param {'DataObjects' | 'Reports' | 'Functions' | 'All'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    scriptDocGet(type?: 'DataObjects' | 'Reports' | 'Functions' | 'All', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * SetExchangeRate is an ODATA action - use POST to call
     * @param {string} currencyCode 
     * @param {string} rateType 
     * @param {string} date 
     * @param {number} rate 
     * @param {string} [expiryDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setExchangeRatePost(currencyCode: string, rateType: string, date: string, rate: number, expiryDate?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * SetRateLimits is an ODATA action - use POST to call
     * @param {string} currencyCode 
     * @param {number} lowerRate 
     * @param {number} upperRate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setRateLimitsPost(currencyCode: string, lowerRate: number, upperRate: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * SetSystemDate is an ODATA action - use POST to call
     * @param {string} systemDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setSystemDatePost(systemDate: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * SetSystemPeriod is an ODATA action - use POST to call
     * @param {number} systemPeriod 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setSystemPeriodPost(systemPeriod: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * SystemDate is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    systemDateGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * SystemPeriod is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    systemPeriodGet(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * UpperRateLimit is an ODATA function - use GET to call
     * @param {string} currencyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    upperRateLimitGet(currencyCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * User is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userGet(options?: AxiosRequestConfig): AxiosPromise<UserResults>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * APAllocateTransactions is an ODATA action - use POST to call
     * @param {number} creditID 
     * @param {number} debitID 
     * @param {number} allocationAmount 
     * @param {string} [allocationDate] 
     * @param {number} [discountAmount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public aPAllocateTransactionsPost(creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).aPAllocateTransactionsPost(creditID, debitID, allocationAmount, allocationDate, discountAmount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APAllocationTask is an ODATA function and Action - use either GET or POST to call
     * @param {number} creditorCode 
     * @param {string} allocDate 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public aPAllocationTaskGet(creditorCode: number, allocDate: string, periodID?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).aPAllocationTaskGet(creditorCode, allocDate, periodID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ARAllocateTransactions is an ODATA action - use POST to call
     * @param {number} creditID 
     * @param {number} debitID 
     * @param {number} allocationAmount 
     * @param {string} [allocationDate] 
     * @param {number} [discountAmount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public aRAllocateTransactionsPost(creditID: number, debitID: number, allocationAmount: number, allocationDate?: string, discountAmount?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).aRAllocateTransactionsPost(creditID, debitID, allocationAmount, allocationDate, discountAmount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ARAllocationTask is an ODATA function and Action - use either GET or POST to call
     * @param {number} customerCode 
     * @param {string} allocDate 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public aRAllocationTaskGet(customerCode: number, allocDate: string, periodID?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).aRAllocationTaskGet(customerCode, allocDate, periodID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * About is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public aboutGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).aboutGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * AddPeriod is an ODATA function - use GET to call
     * @param {number} periodID 
     * @param {number} offset 
     * @param {boolean} [financial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addPeriodGet(periodID: number, offset: number, financial?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addPeriodGet(periodID, offset, financial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * AppName is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appNameGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appNameGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * BaseCurrencyCode is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public baseCurrencyCodeGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).baseCurrencyCodeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Company is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companyGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).companyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CurrentPeriod is an ODATA function - use GET to call
     * @param {string} moduleCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public currentPeriodGet(moduleCode: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).currentPeriodGet(moduleCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DefaultBranchCode is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public defaultBranchCodeGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).defaultBranchCodeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DefaultDepartmentCode is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public defaultDepartmentCodeGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).defaultDepartmentCodeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DefaultLocationCode is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public defaultLocationCodeGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).defaultLocationCodeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * EndPointExists is an ODATA function and Action - use either GET or POST to call
     * @param {string} endPoint 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public endPointExistsGet(endPoint: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).endPointExistsGet(endPoint, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * FirstUserPeriod is an ODATA function - use GET to call
     * @param {string} moduleCode 
     * @param {string} [userCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public firstUserPeriodGet(moduleCode: string, userCode?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).firstUserPeriodGet(moduleCode, userCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GSTRate is an ODATA function - use GET to call
     * @param {string} gSTCode 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gSTRateGet(gSTCode: string, date: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).gSTRateGet(gSTCode, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GetExchangeRate is an ODATA function - use GET to call
     * @param {string} currencyCode 
     * @param {string} rateType 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExchangeRateGet(currencyCode: string, rateType: string, date: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExchangeRateGet(currencyCode, rateType, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * GetPrimaryKey is an ODATA function - use GET to call
     * @param {string} entity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPrimaryKeyGet(entity: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPrimaryKeyGet(entity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICAvailable is an ODATA action - use POST to call
     * @param {string} sourceModule 
     * @param {number} sourceID 
     * @param {number} lineID 
     * @param {string} documentClass 
     * @param {Array<string>} afterLines 
     * @param {string} [customerCode] 
     * @param {string} [uOMCode] 
     * @param {number} [quantitySupplied] 
     * @param {number} [quantityOrdered] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public iCAvailablePost(sourceModule: string, sourceID: number, lineID: number, documentClass: string, afterLines: Array<string>, customerCode?: string, uOMCode?: string, quantitySupplied?: number, quantityOrdered?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).iCAvailablePost(sourceModule, sourceID, lineID, documentClass, afterLines, customerCode, uOMCode, quantitySupplied, quantityOrdered, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICGenerateStockTake is an ODATA action - use POST to call
     * @param {string} location 
     * @param {string} period 
     * @param {string} [date] 
     * @param {string} [reference] 
     * @param {string} [details] 
     * @param {string} [productFrom] 
     * @param {string} [productTo] 
     * @param {string} [stockGroupFrom] 
     * @param {string} [stockGroupTo] 
     * @param {string} [creditor] 
     * @param {string} [includeNilQuantity] 
     * @param {'Basic' | 'Single' | 'Additive'} [countType] 
     * @param {string} [generateCounts] 
     * @param {string} [countPer] 
     * @param {string} [numberOfCounts] 
     * @param {string} [copyExpectedToCounted] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public iCGenerateStockTakePost(location: string, period: string, date?: string, reference?: string, details?: string, productFrom?: string, productTo?: string, stockGroupFrom?: string, stockGroupTo?: string, creditor?: string, includeNilQuantity?: string, countType?: 'Basic' | 'Single' | 'Additive', generateCounts?: string, countPer?: string, numberOfCounts?: string, copyExpectedToCounted?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).iCGenerateStockTakePost(location, period, date, reference, details, productFrom, productTo, stockGroupFrom, stockGroupTo, creditor, includeNilQuantity, countType, generateCounts, countPer, numberOfCounts, copyExpectedToCounted, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICProductBatchLabels is an ODATA action - use POST to call
     * @param {Array<string>} products 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [startFromLabel] 
     * @param {number} [location] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public iCProductBatchLabelsPost(products: Array<string>, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', startFromLabel?: number, location?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).iCProductBatchLabelsPost(products, destination, reportFileName, format, printerName, fileName, intent, startFromLabel, location, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Image is an ODATA function - use GET to call
     * @param {string} imagePath 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public imageGet(imagePath: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).imageGet(imagePath, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * LastUserPeriod is an ODATA function - use GET to call
     * @param {string} moduleCode 
     * @param {string} [userCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public lastUserPeriodGet(moduleCode: string, userCode?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).lastUserPeriodGet(moduleCode, userCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Link is an ODATA function - use GET to call
     * @param {string} fileName 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {string} [contentType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public linkGet(fileName: string, intent?: 'attachment' | 'inline', contentType?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).linkGet(fileName, intent, contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * LowerRateLimit is an ODATA function - use GET to call
     * @param {string} currencyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public lowerRateLimitGet(currencyCode: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).lowerRateLimitGet(currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ModuleAvailable is an ODATA function - use GET to call
     * @param {string} moduleCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public moduleAvailableGet(moduleCode: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).moduleAvailableGet(moduleCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * PeriodForDate is an ODATA function - use GET to call
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public periodForDateGet(date: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).periodForDateGet(date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * PlayLayout is an ODATA function and Action - use either GET or POST to call
     * @param {string} reportName 
     * @param {string} layoutName 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public playLayoutGet(reportName: string, layoutName: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).playLayoutGet(reportName, layoutName, format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * PlayReportScript is an ODATA function and Action - use either GET or POST to call
     * @param {string} scriptFileName 
     * @param {'List' | 'String' | 'Json'} [outputStyle] 
     * @param {string} [scriptArgsn] 
     * @param {string} [deleteFileAfterResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public playReportScriptGet(scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, deleteFileAfterResponse?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).playReportScriptGet(scriptFileName, outputStyle, scriptArgsn, deleteFileAfterResponse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * PlayScript is an ODATA function and Action - use either GET or POST to call
     * @param {string} scriptFileName 
     * @param {'List' | 'String' | 'Json'} [outputStyle] 
     * @param {string} [scriptArgsn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public playScriptGet(scriptFileName: string, outputStyle?: 'List' | 'String' | 'Json', scriptArgsn?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).playScriptGet(scriptFileName, outputStyle, scriptArgsn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * RateLimits is an ODATA function - use GET to call
     * @param {string} currencyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rateLimitsGet(currencyCode: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rateLimitsGet(currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SPEnquiry is an ODATA function and Action - use either GET or POST to call
     * @param {string} customerCode 
     * @param {string} productCode 
     * @param {string} documentDate 
     * @param {number} [priceCode] 
     * @param {string} [aRCategory1] 
     * @param {string} [iCCategory1] 
     * @param {string} [uOMCode] 
     * @param {number} [quantity] 
     * @param {number} [uOMQuantity] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sPEnquiryGet(customerCode: string, productCode: string, documentDate: string, priceCode?: number, aRCategory1?: string, iCCategory1?: string, uOMCode?: string, quantity?: number, uOMQuantity?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sPEnquiryGet(customerCode, productCode, documentDate, priceCode, aRCategory1, iCCategory1, uOMCode, quantity, uOMQuantity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ScriptDoc is an ODATA function - use GET to call
     * @param {'DataObjects' | 'Reports' | 'Functions' | 'All'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scriptDocGet(type?: 'DataObjects' | 'Reports' | 'Functions' | 'All', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scriptDocGet(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SetExchangeRate is an ODATA action - use POST to call
     * @param {string} currencyCode 
     * @param {string} rateType 
     * @param {string} date 
     * @param {number} rate 
     * @param {string} [expiryDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setExchangeRatePost(currencyCode: string, rateType: string, date: string, rate: number, expiryDate?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setExchangeRatePost(currencyCode, rateType, date, rate, expiryDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SetRateLimits is an ODATA action - use POST to call
     * @param {string} currencyCode 
     * @param {number} lowerRate 
     * @param {number} upperRate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setRateLimitsPost(currencyCode: string, lowerRate: number, upperRate: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setRateLimitsPost(currencyCode, lowerRate, upperRate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SetSystemDate is an ODATA action - use POST to call
     * @param {string} systemDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setSystemDatePost(systemDate: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setSystemDatePost(systemDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SetSystemPeriod is an ODATA action - use POST to call
     * @param {number} systemPeriod 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setSystemPeriodPost(systemPeriod: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setSystemPeriodPost(systemPeriod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SystemDate is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public systemDateGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).systemDateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SystemPeriod is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public systemPeriodGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).systemPeriodGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * UpperRateLimit is an ODATA function - use GET to call
     * @param {string} currencyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upperRateLimitGet(currencyCode: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upperRateLimitGet(currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User is an ODATA function - use GET to call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userGet(options).then((request) => request(this.axios, this.basePath));
    }
}
