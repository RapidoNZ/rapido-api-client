/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APCreditor } from '../models';
// @ts-ignore
import { PagedAPCreditor } from '../models';
/**
 * APCreditorApi - axios parameter creator
 * @export
 */
export const APCreditorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} creditorCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodeDelete: async (creditorCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorCode' is not null or undefined
            assertParamExists('aPCreditorCreditorCodeDelete', 'creditorCode', creditorCode)
            const localVarPath = `/APCreditor('{CreditorCode}')`
                .replace(`{${"CreditorCode"}}`, encodeURIComponent(String(creditorCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} creditorCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodeGet: async (creditorCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorCode' is not null or undefined
            assertParamExists('aPCreditorCreditorCodeGet', 'creditorCode', creditorCode)
            const localVarPath = `/APCreditor('{CreditorCode}')`
                .replace(`{${"CreditorCode"}}`, encodeURIComponent(String(creditorCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} creditorCode 
         * @param {APCreditor} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodePatch: async (creditorCode: string, body: APCreditor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorCode' is not null or undefined
            assertParamExists('aPCreditorCreditorCodePatch', 'creditorCode', creditorCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPCreditorCreditorCodePatch', 'body', body)
            const localVarPath = `/APCreditor('{CreditorCode}')`
                .replace(`{${"CreditorCode"}}`, encodeURIComponent(String(creditorCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APCreditor/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} creditorCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {string} [address] 
         * @param {number} [contact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodePrintLabelGet: async (creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorCode' is not null or undefined
            assertParamExists('aPCreditorCreditorCodePrintLabelGet', 'creditorCode', creditorCode)
            const localVarPath = `/APCreditor('{CreditorCode}')/PrintLabel`
                .replace(`{${"CreditorCode"}}`, encodeURIComponent(String(creditorCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }

            if (address !== undefined) {
                localVarQueryParameter['Address'] = address;
            }

            if (contact !== undefined) {
                localVarQueryParameter['Contact'] = contact;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APCreditor/PrintSheet is an ODATA function and Action - use either GET or POST to call
         * @param {string} creditorCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodePrintSheetGet: async (creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorCode' is not null or undefined
            assertParamExists('aPCreditorCreditorCodePrintSheetGet', 'creditorCode', creditorCode)
            const localVarPath = `/APCreditor('{CreditorCode}')/PrintSheet`
                .replace(`{${"CreditorCode"}}`, encodeURIComponent(String(creditorCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} creditorCode 
         * @param {APCreditor} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodePut: async (creditorCode: string, body: APCreditor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorCode' is not null or undefined
            assertParamExists('aPCreditorCreditorCodePut', 'creditorCode', creditorCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPCreditorCreditorCodePut', 'body', body)
            const localVarPath = `/APCreditor('{CreditorCode}')`
                .replace(`{${"CreditorCode"}}`, encodeURIComponent(String(creditorCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/APCreditor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {APCreditor} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorPost: async (body: APCreditor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPCreditorPost', 'body', body)
            const localVarPath = `/APCreditor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APCreditorApi - functional programming interface
 * @export
 */
export const APCreditorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APCreditorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} creditorCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorCreditorCodeDelete(creditorCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorCreditorCodeDelete(creditorCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} creditorCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorCreditorCodeGet(creditorCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APCreditor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorCreditorCodeGet(creditorCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} creditorCode 
         * @param {APCreditor} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorCreditorCodePatch(creditorCode: string, body: APCreditor, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorCreditorCodePatch(creditorCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APCreditor/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} creditorCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {string} [address] 
         * @param {number} [contact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorCreditorCodePrintLabelGet(creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorCreditorCodePrintLabelGet(creditorCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, address, contact, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APCreditor/PrintSheet is an ODATA function and Action - use either GET or POST to call
         * @param {string} creditorCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorCreditorCodePrintSheetGet(creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorCreditorCodePrintSheetGet(creditorCode, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} creditorCode 
         * @param {APCreditor} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorCreditorCodePut(creditorCode: string, body: APCreditor, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorCreditorCodePut(creditorCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedAPCreditor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {APCreditor} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorPost(body: APCreditor, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APCreditorApi - factory interface
 * @export
 */
export const APCreditorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APCreditorApiFp(configuration)
    return {
        /**
         * 
         * @param {string} creditorCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodeDelete(creditorCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorCreditorCodeDelete(creditorCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} creditorCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodeGet(creditorCode: string, options?: any): AxiosPromise<APCreditor> {
            return localVarFp.aPCreditorCreditorCodeGet(creditorCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} creditorCode 
         * @param {APCreditor} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodePatch(creditorCode: string, body: APCreditor, options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorCreditorCodePatch(creditorCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * APCreditor/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} creditorCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {string} [address] 
         * @param {number} [contact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodePrintLabelGet(creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorCreditorCodePrintLabelGet(creditorCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, address, contact, options).then((request) => request(axios, basePath));
        },
        /**
         * APCreditor/PrintSheet is an ODATA function and Action - use either GET or POST to call
         * @param {string} creditorCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodePrintSheetGet(creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorCreditorCodePrintSheetGet(creditorCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} creditorCode 
         * @param {APCreditor} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorCreditorCodePut(creditorCode: string, body: APCreditor, options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorCreditorCodePut(creditorCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGet(options?: any): AxiosPromise<PagedAPCreditor> {
            return localVarFp.aPCreditorGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APCreditor} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorPost(body: APCreditor, options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APCreditorApi - interface
 * @export
 * @interface APCreditorApi
 */
export interface APCreditorApiInterface {
    /**
     * 
     * @param {string} creditorCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApiInterface
     */
    aPCreditorCreditorCodeDelete(creditorCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} creditorCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApiInterface
     */
    aPCreditorCreditorCodeGet(creditorCode: string, options?: AxiosRequestConfig): AxiosPromise<APCreditor>;

    /**
     * 
     * @param {string} creditorCode 
     * @param {APCreditor} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApiInterface
     */
    aPCreditorCreditorCodePatch(creditorCode: string, body: APCreditor, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APCreditor/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} creditorCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {string} [address] 
     * @param {number} [contact] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApiInterface
     */
    aPCreditorCreditorCodePrintLabelGet(creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APCreditor/PrintSheet is an ODATA function and Action - use either GET or POST to call
     * @param {string} creditorCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApiInterface
     */
    aPCreditorCreditorCodePrintSheetGet(creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} creditorCode 
     * @param {APCreditor} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApiInterface
     */
    aPCreditorCreditorCodePut(creditorCode: string, body: APCreditor, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApiInterface
     */
    aPCreditorGet(options?: AxiosRequestConfig): AxiosPromise<PagedAPCreditor>;

    /**
     * 
     * @param {APCreditor} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApiInterface
     */
    aPCreditorPost(body: APCreditor, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * APCreditorApi - object-oriented interface
 * @export
 * @class APCreditorApi
 * @extends {BaseAPI}
 */
export class APCreditorApi extends BaseAPI implements APCreditorApiInterface {
    /**
     * 
     * @param {string} creditorCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApi
     */
    public aPCreditorCreditorCodeDelete(creditorCode: string, options?: AxiosRequestConfig) {
        return APCreditorApiFp(this.configuration).aPCreditorCreditorCodeDelete(creditorCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} creditorCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApi
     */
    public aPCreditorCreditorCodeGet(creditorCode: string, options?: AxiosRequestConfig) {
        return APCreditorApiFp(this.configuration).aPCreditorCreditorCodeGet(creditorCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} creditorCode 
     * @param {APCreditor} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApi
     */
    public aPCreditorCreditorCodePatch(creditorCode: string, body: APCreditor, options?: AxiosRequestConfig) {
        return APCreditorApiFp(this.configuration).aPCreditorCreditorCodePatch(creditorCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APCreditor/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} creditorCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {string} [address] 
     * @param {number} [contact] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApi
     */
    public aPCreditorCreditorCodePrintLabelGet(creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, address?: string, contact?: number, options?: AxiosRequestConfig) {
        return APCreditorApiFp(this.configuration).aPCreditorCreditorCodePrintLabelGet(creditorCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, address, contact, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APCreditor/PrintSheet is an ODATA function and Action - use either GET or POST to call
     * @param {string} creditorCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApi
     */
    public aPCreditorCreditorCodePrintSheetGet(creditorCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return APCreditorApiFp(this.configuration).aPCreditorCreditorCodePrintSheetGet(creditorCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} creditorCode 
     * @param {APCreditor} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApi
     */
    public aPCreditorCreditorCodePut(creditorCode: string, body: APCreditor, options?: AxiosRequestConfig) {
        return APCreditorApiFp(this.configuration).aPCreditorCreditorCodePut(creditorCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApi
     */
    public aPCreditorGet(options?: AxiosRequestConfig) {
        return APCreditorApiFp(this.configuration).aPCreditorGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APCreditor} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorApi
     */
    public aPCreditorPost(body: APCreditor, options?: AxiosRequestConfig) {
        return APCreditorApiFp(this.configuration).aPCreditorPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
