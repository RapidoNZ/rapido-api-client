/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JCComponent } from '../models';
// @ts-ignore
import { PagedJCComponent } from '../models';
/**
 * JCComponentApi - axios parameter creator
 * @export
 */
export const JCComponentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentAnalysisCodeDelete: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('jCComponentAnalysisCodeDelete', 'analysisCode', analysisCode)
            const localVarPath = `/JCComponent('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentAnalysisCodeGet: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('jCComponentAnalysisCodeGet', 'analysisCode', analysisCode)
            const localVarPath = `/JCComponent('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {JCComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentAnalysisCodePatch: async (analysisCode: string, body: JCComponent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('jCComponentAnalysisCodePatch', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCComponentAnalysisCodePatch', 'body', body)
            const localVarPath = `/JCComponent('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {JCComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentAnalysisCodePut: async (analysisCode: string, body: JCComponent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('jCComponentAnalysisCodePut', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCComponentAnalysisCodePut', 'body', body)
            const localVarPath = `/JCComponent('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/JCComponent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JCComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentPost: async (body: JCComponent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCComponentPost', 'body', body)
            const localVarPath = `/JCComponent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JCComponentApi - functional programming interface
 * @export
 */
export const JCComponentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JCComponentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCComponentAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCComponentAnalysisCodeDelete(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCComponentAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JCComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCComponentAnalysisCodeGet(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {JCComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCComponentAnalysisCodePatch(analysisCode: string, body: JCComponent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCComponentAnalysisCodePatch(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {JCComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCComponentAnalysisCodePut(analysisCode: string, body: JCComponent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCComponentAnalysisCodePut(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCComponentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedJCComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCComponentGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JCComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCComponentPost(body: JCComponent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCComponentPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JCComponentApi - factory interface
 * @export
 */
export const JCComponentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JCComponentApiFp(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentAnalysisCodeDelete(analysisCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.jCComponentAnalysisCodeDelete(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentAnalysisCodeGet(analysisCode: string, options?: any): AxiosPromise<JCComponent> {
            return localVarFp.jCComponentAnalysisCodeGet(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {JCComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentAnalysisCodePatch(analysisCode: string, body: JCComponent, options?: any): AxiosPromise<void> {
            return localVarFp.jCComponentAnalysisCodePatch(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {JCComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentAnalysisCodePut(analysisCode: string, body: JCComponent, options?: any): AxiosPromise<void> {
            return localVarFp.jCComponentAnalysisCodePut(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentGet(options?: any): AxiosPromise<PagedJCComponent> {
            return localVarFp.jCComponentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JCComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCComponentPost(body: JCComponent, options?: any): AxiosPromise<void> {
            return localVarFp.jCComponentPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JCComponentApi - interface
 * @export
 * @interface JCComponentApi
 */
export interface JCComponentApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApiInterface
     */
    jCComponentAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApiInterface
     */
    jCComponentAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<JCComponent>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {JCComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApiInterface
     */
    jCComponentAnalysisCodePatch(analysisCode: string, body: JCComponent, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {JCComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApiInterface
     */
    jCComponentAnalysisCodePut(analysisCode: string, body: JCComponent, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApiInterface
     */
    jCComponentGet(options?: AxiosRequestConfig): AxiosPromise<PagedJCComponent>;

    /**
     * 
     * @param {JCComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApiInterface
     */
    jCComponentPost(body: JCComponent, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * JCComponentApi - object-oriented interface
 * @export
 * @class JCComponentApi
 * @extends {BaseAPI}
 */
export class JCComponentApi extends BaseAPI implements JCComponentApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApi
     */
    public jCComponentAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig) {
        return JCComponentApiFp(this.configuration).jCComponentAnalysisCodeDelete(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApi
     */
    public jCComponentAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig) {
        return JCComponentApiFp(this.configuration).jCComponentAnalysisCodeGet(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {JCComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApi
     */
    public jCComponentAnalysisCodePatch(analysisCode: string, body: JCComponent, options?: AxiosRequestConfig) {
        return JCComponentApiFp(this.configuration).jCComponentAnalysisCodePatch(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {JCComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApi
     */
    public jCComponentAnalysisCodePut(analysisCode: string, body: JCComponent, options?: AxiosRequestConfig) {
        return JCComponentApiFp(this.configuration).jCComponentAnalysisCodePut(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApi
     */
    public jCComponentGet(options?: AxiosRequestConfig) {
        return JCComponentApiFp(this.configuration).jCComponentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JCComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCComponentApi
     */
    public jCComponentPost(body: JCComponent, options?: AxiosRequestConfig) {
        return JCComponentApiFp(this.configuration).jCComponentPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
