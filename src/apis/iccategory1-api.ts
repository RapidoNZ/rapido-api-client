/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ICCategory1 } from '../models';
// @ts-ignore
import { PagedICCategory1 } from '../models';
/**
 * ICCategory1Api - axios parameter creator
 * @export
 */
export const ICCategory1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1CodeDelete: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('iCCategory1CodeDelete', 'code', code)
            const localVarPath = `/ICCategory1('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1CodeGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('iCCategory1CodeGet', 'code', code)
            const localVarPath = `/ICCategory1('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1CodePatch: async (code: string, body: ICCategory1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('iCCategory1CodePatch', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCCategory1CodePatch', 'body', body)
            const localVarPath = `/ICCategory1('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1CodePut: async (code: string, body: ICCategory1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('iCCategory1CodePut', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCCategory1CodePut', 'body', body)
            const localVarPath = `/ICCategory1('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1Get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ICCategory1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1Post: async (body: ICCategory1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCCategory1Post', 'body', body)
            const localVarPath = `/ICCategory1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ICCategory1Api - functional programming interface
 * @export
 */
export const ICCategory1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ICCategory1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory1CodeDelete(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory1CodeDelete(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory1CodeGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICCategory1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory1CodeGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory1CodePatch(code: string, body: ICCategory1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory1CodePatch(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory1CodePut(code: string, body: ICCategory1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory1CodePut(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory1Get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedICCategory1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory1Get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ICCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCCategory1Post(body: ICCategory1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCCategory1Post(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ICCategory1Api - factory interface
 * @export
 */
export const ICCategory1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ICCategory1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1CodeDelete(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.iCCategory1CodeDelete(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1CodeGet(code: string, options?: any): AxiosPromise<ICCategory1> {
            return localVarFp.iCCategory1CodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1CodePatch(code: string, body: ICCategory1, options?: any): AxiosPromise<void> {
            return localVarFp.iCCategory1CodePatch(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {ICCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1CodePut(code: string, body: ICCategory1, options?: any): AxiosPromise<void> {
            return localVarFp.iCCategory1CodePut(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1Get(options?: any): AxiosPromise<PagedICCategory1> {
            return localVarFp.iCCategory1Get(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCCategory1Post(body: ICCategory1, options?: any): AxiosPromise<void> {
            return localVarFp.iCCategory1Post(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ICCategory1Api - interface
 * @export
 * @interface ICCategory1Api
 */
export interface ICCategory1ApiInterface {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1ApiInterface
     */
    iCCategory1CodeDelete(code: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1ApiInterface
     */
    iCCategory1CodeGet(code: string, options?: AxiosRequestConfig): AxiosPromise<ICCategory1>;

    /**
     * 
     * @param {string} code 
     * @param {ICCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1ApiInterface
     */
    iCCategory1CodePatch(code: string, body: ICCategory1, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} code 
     * @param {ICCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1ApiInterface
     */
    iCCategory1CodePut(code: string, body: ICCategory1, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1ApiInterface
     */
    iCCategory1Get(options?: AxiosRequestConfig): AxiosPromise<PagedICCategory1>;

    /**
     * 
     * @param {ICCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1ApiInterface
     */
    iCCategory1Post(body: ICCategory1, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ICCategory1Api - object-oriented interface
 * @export
 * @class ICCategory1Api
 * @extends {BaseAPI}
 */
export class ICCategory1Api extends BaseAPI implements ICCategory1ApiInterface {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1Api
     */
    public iCCategory1CodeDelete(code: string, options?: AxiosRequestConfig) {
        return ICCategory1ApiFp(this.configuration).iCCategory1CodeDelete(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1Api
     */
    public iCCategory1CodeGet(code: string, options?: AxiosRequestConfig) {
        return ICCategory1ApiFp(this.configuration).iCCategory1CodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {ICCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1Api
     */
    public iCCategory1CodePatch(code: string, body: ICCategory1, options?: AxiosRequestConfig) {
        return ICCategory1ApiFp(this.configuration).iCCategory1CodePatch(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {ICCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1Api
     */
    public iCCategory1CodePut(code: string, body: ICCategory1, options?: AxiosRequestConfig) {
        return ICCategory1ApiFp(this.configuration).iCCategory1CodePut(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1Api
     */
    public iCCategory1Get(options?: AxiosRequestConfig) {
        return ICCategory1ApiFp(this.configuration).iCCategory1Get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ICCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICCategory1Api
     */
    public iCCategory1Post(body: ICCategory1, options?: AxiosRequestConfig) {
        return ICCategory1ApiFp(this.configuration).iCCategory1Post(body, options).then((request) => request(this.axios, this.basePath));
    }
}
