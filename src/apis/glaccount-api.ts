/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GLAccount } from '../models';
// @ts-ignore
import { PagedGLAccount } from '../models';
/**
 * GLAccountApi - axios parameter creator
 * @export
 */
export const GLAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} accountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountAccountCodeDelete: async (accountCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountCode' is not null or undefined
            assertParamExists('gLAccountAccountCodeDelete', 'accountCode', accountCode)
            const localVarPath = `/GLAccount('{AccountCode}')`
                .replace(`{${"AccountCode"}}`, encodeURIComponent(String(accountCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountAccountCodeGet: async (accountCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountCode' is not null or undefined
            assertParamExists('gLAccountAccountCodeGet', 'accountCode', accountCode)
            const localVarPath = `/GLAccount('{AccountCode}')`
                .replace(`{${"AccountCode"}}`, encodeURIComponent(String(accountCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountCode 
         * @param {GLAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountAccountCodePatch: async (accountCode: string, body: GLAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountCode' is not null or undefined
            assertParamExists('gLAccountAccountCodePatch', 'accountCode', accountCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('gLAccountAccountCodePatch', 'body', body)
            const localVarPath = `/GLAccount('{AccountCode}')`
                .replace(`{${"AccountCode"}}`, encodeURIComponent(String(accountCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountCode 
         * @param {GLAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountAccountCodePut: async (accountCode: string, body: GLAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountCode' is not null or undefined
            assertParamExists('gLAccountAccountCodePut', 'accountCode', accountCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('gLAccountAccountCodePut', 'body', body)
            const localVarPath = `/GLAccount('{AccountCode}')`
                .replace(`{${"AccountCode"}}`, encodeURIComponent(String(accountCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/GLAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GLAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountPost: async (body: GLAccount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('gLAccountPost', 'body', body)
            const localVarPath = `/GLAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GLAccountApi - functional programming interface
 * @export
 */
export const GLAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GLAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} accountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gLAccountAccountCodeDelete(accountCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gLAccountAccountCodeDelete(accountCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} accountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gLAccountAccountCodeGet(accountCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GLAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gLAccountAccountCodeGet(accountCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} accountCode 
         * @param {GLAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gLAccountAccountCodePatch(accountCode: string, body: GLAccount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gLAccountAccountCodePatch(accountCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} accountCode 
         * @param {GLAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gLAccountAccountCodePut(accountCode: string, body: GLAccount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gLAccountAccountCodePut(accountCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gLAccountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedGLAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gLAccountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GLAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gLAccountPost(body: GLAccount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gLAccountPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GLAccountApi - factory interface
 * @export
 */
export const GLAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GLAccountApiFp(configuration)
    return {
        /**
         * 
         * @param {string} accountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountAccountCodeDelete(accountCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.gLAccountAccountCodeDelete(accountCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountAccountCodeGet(accountCode: string, options?: any): AxiosPromise<GLAccount> {
            return localVarFp.gLAccountAccountCodeGet(accountCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountCode 
         * @param {GLAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountAccountCodePatch(accountCode: string, body: GLAccount, options?: any): AxiosPromise<void> {
            return localVarFp.gLAccountAccountCodePatch(accountCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountCode 
         * @param {GLAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountAccountCodePut(accountCode: string, body: GLAccount, options?: any): AxiosPromise<void> {
            return localVarFp.gLAccountAccountCodePut(accountCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountGet(options?: any): AxiosPromise<PagedGLAccount> {
            return localVarFp.gLAccountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GLAccount} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gLAccountPost(body: GLAccount, options?: any): AxiosPromise<void> {
            return localVarFp.gLAccountPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GLAccountApi - interface
 * @export
 * @interface GLAccountApi
 */
export interface GLAccountApiInterface {
    /**
     * 
     * @param {string} accountCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApiInterface
     */
    gLAccountAccountCodeDelete(accountCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} accountCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApiInterface
     */
    gLAccountAccountCodeGet(accountCode: string, options?: AxiosRequestConfig): AxiosPromise<GLAccount>;

    /**
     * 
     * @param {string} accountCode 
     * @param {GLAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApiInterface
     */
    gLAccountAccountCodePatch(accountCode: string, body: GLAccount, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} accountCode 
     * @param {GLAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApiInterface
     */
    gLAccountAccountCodePut(accountCode: string, body: GLAccount, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApiInterface
     */
    gLAccountGet(options?: AxiosRequestConfig): AxiosPromise<PagedGLAccount>;

    /**
     * 
     * @param {GLAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApiInterface
     */
    gLAccountPost(body: GLAccount, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * GLAccountApi - object-oriented interface
 * @export
 * @class GLAccountApi
 * @extends {BaseAPI}
 */
export class GLAccountApi extends BaseAPI implements GLAccountApiInterface {
    /**
     * 
     * @param {string} accountCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApi
     */
    public gLAccountAccountCodeDelete(accountCode: string, options?: AxiosRequestConfig) {
        return GLAccountApiFp(this.configuration).gLAccountAccountCodeDelete(accountCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApi
     */
    public gLAccountAccountCodeGet(accountCode: string, options?: AxiosRequestConfig) {
        return GLAccountApiFp(this.configuration).gLAccountAccountCodeGet(accountCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountCode 
     * @param {GLAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApi
     */
    public gLAccountAccountCodePatch(accountCode: string, body: GLAccount, options?: AxiosRequestConfig) {
        return GLAccountApiFp(this.configuration).gLAccountAccountCodePatch(accountCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountCode 
     * @param {GLAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApi
     */
    public gLAccountAccountCodePut(accountCode: string, body: GLAccount, options?: AxiosRequestConfig) {
        return GLAccountApiFp(this.configuration).gLAccountAccountCodePut(accountCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApi
     */
    public gLAccountGet(options?: AxiosRequestConfig) {
        return GLAccountApiFp(this.configuration).gLAccountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GLAccount} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GLAccountApi
     */
    public gLAccountPost(body: GLAccount, options?: AxiosRequestConfig) {
        return GLAccountApiFp(this.configuration).gLAccountPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
