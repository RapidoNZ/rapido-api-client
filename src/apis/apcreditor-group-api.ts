/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APCreditorGroup } from '../models';
// @ts-ignore
import { PagedAPCreditorGroup } from '../models';
/**
 * APCreditorGroupApi - axios parameter creator
 * @export
 */
export const APCreditorGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupCreditorGroupCodeDelete: async (creditorGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorGroupCode' is not null or undefined
            assertParamExists('aPCreditorGroupCreditorGroupCodeDelete', 'creditorGroupCode', creditorGroupCode)
            const localVarPath = `/APCreditorGroup('{CreditorGroupCode}')`
                .replace(`{${"CreditorGroupCode"}}`, encodeURIComponent(String(creditorGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupCreditorGroupCodeGet: async (creditorGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorGroupCode' is not null or undefined
            assertParamExists('aPCreditorGroupCreditorGroupCodeGet', 'creditorGroupCode', creditorGroupCode)
            const localVarPath = `/APCreditorGroup('{CreditorGroupCode}')`
                .replace(`{${"CreditorGroupCode"}}`, encodeURIComponent(String(creditorGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {APCreditorGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupCreditorGroupCodePatch: async (creditorGroupCode: string, body: APCreditorGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorGroupCode' is not null or undefined
            assertParamExists('aPCreditorGroupCreditorGroupCodePatch', 'creditorGroupCode', creditorGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPCreditorGroupCreditorGroupCodePatch', 'body', body)
            const localVarPath = `/APCreditorGroup('{CreditorGroupCode}')`
                .replace(`{${"CreditorGroupCode"}}`, encodeURIComponent(String(creditorGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {APCreditorGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupCreditorGroupCodePut: async (creditorGroupCode: string, body: APCreditorGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditorGroupCode' is not null or undefined
            assertParamExists('aPCreditorGroupCreditorGroupCodePut', 'creditorGroupCode', creditorGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPCreditorGroupCreditorGroupCodePut', 'body', body)
            const localVarPath = `/APCreditorGroup('{CreditorGroupCode}')`
                .replace(`{${"CreditorGroupCode"}}`, encodeURIComponent(String(creditorGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/APCreditorGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {APCreditorGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupPost: async (body: APCreditorGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPCreditorGroupPost', 'body', body)
            const localVarPath = `/APCreditorGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APCreditorGroupApi - functional programming interface
 * @export
 */
export const APCreditorGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APCreditorGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorGroupCreditorGroupCodeDelete(creditorGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorGroupCreditorGroupCodeDelete(creditorGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorGroupCreditorGroupCodeGet(creditorGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APCreditorGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorGroupCreditorGroupCodeGet(creditorGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {APCreditorGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorGroupCreditorGroupCodePatch(creditorGroupCode: string, body: APCreditorGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorGroupCreditorGroupCodePatch(creditorGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {APCreditorGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorGroupCreditorGroupCodePut(creditorGroupCode: string, body: APCreditorGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorGroupCreditorGroupCodePut(creditorGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorGroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedAPCreditorGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorGroupGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {APCreditorGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPCreditorGroupPost(body: APCreditorGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPCreditorGroupPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APCreditorGroupApi - factory interface
 * @export
 */
export const APCreditorGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APCreditorGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupCreditorGroupCodeDelete(creditorGroupCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorGroupCreditorGroupCodeDelete(creditorGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupCreditorGroupCodeGet(creditorGroupCode: string, options?: any): AxiosPromise<APCreditorGroup> {
            return localVarFp.aPCreditorGroupCreditorGroupCodeGet(creditorGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {APCreditorGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupCreditorGroupCodePatch(creditorGroupCode: string, body: APCreditorGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorGroupCreditorGroupCodePatch(creditorGroupCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} creditorGroupCode 
         * @param {APCreditorGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupCreditorGroupCodePut(creditorGroupCode: string, body: APCreditorGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorGroupCreditorGroupCodePut(creditorGroupCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupGet(options?: any): AxiosPromise<PagedAPCreditorGroup> {
            return localVarFp.aPCreditorGroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APCreditorGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPCreditorGroupPost(body: APCreditorGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aPCreditorGroupPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APCreditorGroupApi - interface
 * @export
 * @interface APCreditorGroupApi
 */
export interface APCreditorGroupApiInterface {
    /**
     * 
     * @param {string} creditorGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApiInterface
     */
    aPCreditorGroupCreditorGroupCodeDelete(creditorGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} creditorGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApiInterface
     */
    aPCreditorGroupCreditorGroupCodeGet(creditorGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<APCreditorGroup>;

    /**
     * 
     * @param {string} creditorGroupCode 
     * @param {APCreditorGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApiInterface
     */
    aPCreditorGroupCreditorGroupCodePatch(creditorGroupCode: string, body: APCreditorGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} creditorGroupCode 
     * @param {APCreditorGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApiInterface
     */
    aPCreditorGroupCreditorGroupCodePut(creditorGroupCode: string, body: APCreditorGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApiInterface
     */
    aPCreditorGroupGet(options?: AxiosRequestConfig): AxiosPromise<PagedAPCreditorGroup>;

    /**
     * 
     * @param {APCreditorGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApiInterface
     */
    aPCreditorGroupPost(body: APCreditorGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * APCreditorGroupApi - object-oriented interface
 * @export
 * @class APCreditorGroupApi
 * @extends {BaseAPI}
 */
export class APCreditorGroupApi extends BaseAPI implements APCreditorGroupApiInterface {
    /**
     * 
     * @param {string} creditorGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApi
     */
    public aPCreditorGroupCreditorGroupCodeDelete(creditorGroupCode: string, options?: AxiosRequestConfig) {
        return APCreditorGroupApiFp(this.configuration).aPCreditorGroupCreditorGroupCodeDelete(creditorGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} creditorGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApi
     */
    public aPCreditorGroupCreditorGroupCodeGet(creditorGroupCode: string, options?: AxiosRequestConfig) {
        return APCreditorGroupApiFp(this.configuration).aPCreditorGroupCreditorGroupCodeGet(creditorGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} creditorGroupCode 
     * @param {APCreditorGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApi
     */
    public aPCreditorGroupCreditorGroupCodePatch(creditorGroupCode: string, body: APCreditorGroup, options?: AxiosRequestConfig) {
        return APCreditorGroupApiFp(this.configuration).aPCreditorGroupCreditorGroupCodePatch(creditorGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} creditorGroupCode 
     * @param {APCreditorGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApi
     */
    public aPCreditorGroupCreditorGroupCodePut(creditorGroupCode: string, body: APCreditorGroup, options?: AxiosRequestConfig) {
        return APCreditorGroupApiFp(this.configuration).aPCreditorGroupCreditorGroupCodePut(creditorGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApi
     */
    public aPCreditorGroupGet(options?: AxiosRequestConfig) {
        return APCreditorGroupApiFp(this.configuration).aPCreditorGroupGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APCreditorGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APCreditorGroupApi
     */
    public aPCreditorGroupPost(body: APCreditorGroup, options?: AxiosRequestConfig) {
        return APCreditorGroupApiFp(this.configuration).aPCreditorGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
