/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { POOrder } from '../models';
// @ts-ignore
import { PagedPOOrder } from '../models';
/**
 * POOrderApi - axios parameter creator
 * @export
 */
export const POOrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * POOrder/CreateShipmentInvoiceOnly is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDCreateShipmentInvoiceOnlyPost: async (documentID: number, documentDate?: string, periodID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDCreateShipmentInvoiceOnlyPost', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/CreateShipmentInvoiceOnly`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentDate !== undefined) {
                localVarQueryParameter['DocumentDate'] = documentDate;
            }

            if (periodID !== undefined) {
                localVarQueryParameter['PeriodID'] = periodID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/CreateShipment is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDCreateShipmentPost: async (documentID: number, documentDate?: string, periodID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDCreateShipmentPost', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/CreateShipment`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentDate !== undefined) {
                localVarQueryParameter['DocumentDate'] = documentDate;
            }

            if (periodID !== undefined) {
                localVarQueryParameter['PeriodID'] = periodID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/CreateShipmentReceiptOnly is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDCreateShipmentReceiptOnlyPost: async (documentID: number, documentDate?: string, periodID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDCreateShipmentReceiptOnlyPost', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/CreateShipmentReceiptOnly`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentDate !== undefined) {
                localVarQueryParameter['DocumentDate'] = documentDate;
            }

            if (periodID !== undefined) {
                localVarQueryParameter['PeriodID'] = periodID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDelete: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDDelete', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/DeleteNilLines is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDeleteNilLinesPost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDDeleteNilLinesPost', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/DeleteNilLines`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/DuplicatePurchaseOrder is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDuplicatePurchaseOrderGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDDuplicatePurchaseOrderGet', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/DuplicatePurchaseOrder`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/DuplicateQuotationRequest is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDuplicateQuotationRequestGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDDuplicateQuotationRequestGet', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/DuplicateQuotationRequest`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/DuplicateStandingOrder is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDuplicateStandingOrderGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDDuplicateStandingOrderGet', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/DuplicateStandingOrder`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDGet', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/MarkHistoric is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDMarkHistoricPost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDMarkHistoricPost', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/MarkHistoric`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/MarkProcessed is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDMarkProcessedPost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDMarkProcessedPost', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/MarkProcessed`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/MarkUnProcessed is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDMarkUnProcessedPost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDMarkUnProcessedPost', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/MarkUnProcessed`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {POOrder} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPatch: async (documentID: number, body: POOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDPatch', 'documentID', documentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('pOOrderDocumentIDPatch', 'body', body)
            const localVarPath = `/POOrder('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPrintGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDPrintGet', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/Print`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPrintLabelGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDPrintLabelGet', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/PrintLabel`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPrintProductLabelsGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDPrintProductLabelsGet', 'documentID', documentID)
            const localVarPath = `/POOrder('{DocumentID}')/PrintProductLabels`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {POOrder} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPut: async (documentID: number, body: POOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDPut', 'documentID', documentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('pOOrderDocumentIDPut', 'body', body)
            const localVarPath = `/POOrder('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POOrder/ShipmentOrderLines is an ODATA function - use GET to call
         * @param {number} documentID 
         * @param {string} shipmentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDShipmentOrderLinesGet: async (documentID: number, shipmentType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('pOOrderDocumentIDShipmentOrderLinesGet', 'documentID', documentID)
            // verify required parameter 'shipmentType' is not null or undefined
            assertParamExists('pOOrderDocumentIDShipmentOrderLinesGet', 'shipmentType', shipmentType)
            const localVarPath = `/POOrder('{DocumentID}')/ShipmentOrderLines`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shipmentType !== undefined) {
                localVarQueryParameter['ShipmentType'] = shipmentType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/POOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {POOrder} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderPost: async (body: POOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('pOOrderPost', 'body', body)
            const localVarPath = `/POOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * POOrderApi - functional programming interface
 * @export
 */
export const POOrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = POOrderApiAxiosParamCreator(configuration)
    return {
        /**
         * POOrder/CreateShipmentInvoiceOnly is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDCreateShipmentInvoiceOnlyPost(documentID: number, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDCreateShipmentInvoiceOnlyPost(documentID, documentDate, periodID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/CreateShipment is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDCreateShipmentPost(documentID: number, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDCreateShipmentPost(documentID, documentDate, periodID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/CreateShipmentReceiptOnly is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDCreateShipmentReceiptOnlyPost(documentID: number, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDCreateShipmentReceiptOnlyPost(documentID, documentDate, periodID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDDelete(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDDelete(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/DeleteNilLines is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDDeleteNilLinesPost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDDeleteNilLinesPost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/DuplicatePurchaseOrder is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDDuplicatePurchaseOrderGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDDuplicatePurchaseOrderGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/DuplicateQuotationRequest is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDDuplicateQuotationRequestGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDDuplicateQuotationRequestGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/DuplicateStandingOrder is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDDuplicateStandingOrderGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDDuplicateStandingOrderGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<POOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/MarkHistoric is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDMarkHistoricPost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDMarkHistoricPost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/MarkProcessed is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDMarkProcessedPost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDMarkProcessedPost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/MarkUnProcessed is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDMarkUnProcessedPost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDMarkUnProcessedPost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {POOrder} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDPatch(documentID: number, body: POOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDPatch(documentID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDPrintLabelGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDPrintLabelGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDPrintProductLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {POOrder} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDPut(documentID: number, body: POOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDPut(documentID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * POOrder/ShipmentOrderLines is an ODATA function - use GET to call
         * @param {number} documentID 
         * @param {string} shipmentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderDocumentIDShipmentOrderLinesGet(documentID: number, shipmentType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderDocumentIDShipmentOrderLinesGet(documentID, shipmentType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedPOOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {POOrder} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pOOrderPost(body: POOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pOOrderPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * POOrderApi - factory interface
 * @export
 */
export const POOrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = POOrderApiFp(configuration)
    return {
        /**
         * POOrder/CreateShipmentInvoiceOnly is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDCreateShipmentInvoiceOnlyPost(documentID: number, documentDate?: string, periodID?: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDCreateShipmentInvoiceOnlyPost(documentID, documentDate, periodID, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/CreateShipment is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDCreateShipmentPost(documentID: number, documentDate?: string, periodID?: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDCreateShipmentPost(documentID, documentDate, periodID, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/CreateShipmentReceiptOnly is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDCreateShipmentReceiptOnlyPost(documentID: number, documentDate?: string, periodID?: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDCreateShipmentReceiptOnlyPost(documentID, documentDate, periodID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDelete(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDDelete(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/DeleteNilLines is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDeleteNilLinesPost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDDeleteNilLinesPost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/DuplicatePurchaseOrder is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDuplicatePurchaseOrderGet(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDDuplicatePurchaseOrderGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/DuplicateQuotationRequest is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDuplicateQuotationRequestGet(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDDuplicateQuotationRequestGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/DuplicateStandingOrder is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDDuplicateStandingOrderGet(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDDuplicateStandingOrderGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDGet(documentID: number, options?: any): AxiosPromise<POOrder> {
            return localVarFp.pOOrderDocumentIDGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/MarkHistoric is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDMarkHistoricPost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDMarkHistoricPost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/MarkProcessed is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDMarkProcessedPost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDMarkProcessedPost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/MarkUnProcessed is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDMarkUnProcessedPost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDMarkUnProcessedPost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {POOrder} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPatch(documentID: number, body: POOrder, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDPatch(documentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPrintLabelGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDPrintLabelGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDPrintProductLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {POOrder} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDPut(documentID: number, body: POOrder, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDPut(documentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * POOrder/ShipmentOrderLines is an ODATA function - use GET to call
         * @param {number} documentID 
         * @param {string} shipmentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderDocumentIDShipmentOrderLinesGet(documentID: number, shipmentType: string, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderDocumentIDShipmentOrderLinesGet(documentID, shipmentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderGet(options?: any): AxiosPromise<PagedPOOrder> {
            return localVarFp.pOOrderGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {POOrder} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pOOrderPost(body: POOrder, options?: any): AxiosPromise<void> {
            return localVarFp.pOOrderPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * POOrderApi - interface
 * @export
 * @interface POOrderApi
 */
export interface POOrderApiInterface {
    /**
     * POOrder/CreateShipmentInvoiceOnly is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDCreateShipmentInvoiceOnlyPost(documentID: number, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/CreateShipment is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDCreateShipmentPost(documentID: number, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/CreateShipmentReceiptOnly is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDCreateShipmentReceiptOnlyPost(documentID: number, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDDelete(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/DeleteNilLines is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDDeleteNilLinesPost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/DuplicatePurchaseOrder is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDDuplicatePurchaseOrderGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/DuplicateQuotationRequest is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDDuplicateQuotationRequestGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/DuplicateStandingOrder is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDDuplicateStandingOrderGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<POOrder>;

    /**
     * POOrder/MarkHistoric is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDMarkHistoricPost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/MarkProcessed is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDMarkProcessedPost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/MarkUnProcessed is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDMarkUnProcessedPost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {POOrder} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDPatch(documentID: number, body: POOrder, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDPrintLabelGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {POOrder} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDPut(documentID: number, body: POOrder, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * POOrder/ShipmentOrderLines is an ODATA function - use GET to call
     * @param {number} documentID 
     * @param {string} shipmentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderDocumentIDShipmentOrderLinesGet(documentID: number, shipmentType: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderGet(options?: AxiosRequestConfig): AxiosPromise<PagedPOOrder>;

    /**
     * 
     * @param {POOrder} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApiInterface
     */
    pOOrderPost(body: POOrder, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * POOrderApi - object-oriented interface
 * @export
 * @class POOrderApi
 * @extends {BaseAPI}
 */
export class POOrderApi extends BaseAPI implements POOrderApiInterface {
    /**
     * POOrder/CreateShipmentInvoiceOnly is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDCreateShipmentInvoiceOnlyPost(documentID: number, documentDate?: string, periodID?: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDCreateShipmentInvoiceOnlyPost(documentID, documentDate, periodID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/CreateShipment is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDCreateShipmentPost(documentID: number, documentDate?: string, periodID?: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDCreateShipmentPost(documentID, documentDate, periodID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/CreateShipmentReceiptOnly is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDCreateShipmentReceiptOnlyPost(documentID: number, documentDate?: string, periodID?: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDCreateShipmentReceiptOnlyPost(documentID, documentDate, periodID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDDelete(documentID: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDDelete(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/DeleteNilLines is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDDeleteNilLinesPost(documentID: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDDeleteNilLinesPost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/DuplicatePurchaseOrder is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDDuplicatePurchaseOrderGet(documentID: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDDuplicatePurchaseOrderGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/DuplicateQuotationRequest is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDDuplicateQuotationRequestGet(documentID: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDDuplicateQuotationRequestGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/DuplicateStandingOrder is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDDuplicateStandingOrderGet(documentID: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDDuplicateStandingOrderGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDGet(documentID: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/MarkHistoric is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDMarkHistoricPost(documentID: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDMarkHistoricPost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/MarkProcessed is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDMarkProcessedPost(documentID: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDMarkProcessedPost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/MarkUnProcessed is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDMarkUnProcessedPost(documentID: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDMarkUnProcessedPost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {POOrder} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDPatch(documentID: number, body: POOrder, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDPatch(documentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDPrintLabelGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDPrintLabelGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDPrintProductLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {POOrder} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDPut(documentID: number, body: POOrder, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDPut(documentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * POOrder/ShipmentOrderLines is an ODATA function - use GET to call
     * @param {number} documentID 
     * @param {string} shipmentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderDocumentIDShipmentOrderLinesGet(documentID: number, shipmentType: string, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderDocumentIDShipmentOrderLinesGet(documentID, shipmentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderGet(options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {POOrder} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POOrderApi
     */
    public pOOrderPost(body: POOrder, options?: AxiosRequestConfig) {
        return POOrderApiFp(this.configuration).pOOrderPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
