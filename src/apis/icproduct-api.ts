/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ICProduct } from '../models';
// @ts-ignore
import { PagedICProduct } from '../models';
/**
 * ICProductApi - axios parameter creator
 * @export
 */
export const ICProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ICProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICProduct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductPost: async (body: ICProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCProductPost', 'body', body)
            const localVarPath = `/ICProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodeDelete: async (productCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCProductProductCodeDelete', 'productCode', productCode)
            const localVarPath = `/ICProduct('{ProductCode}')`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodeGet: async (productCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCProductProductCodeGet', 'productCode', productCode)
            const localVarPath = `/ICProduct('{ProductCode}')`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICProduct/Image is an ODATA action - use POST to call
         * @param {string} productCode 
         * @param {string} fileName 
         * @param {string} base64Data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodeImagePost: async (productCode: string, fileName: string, base64Data: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCProductProductCodeImagePost', 'productCode', productCode)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('iCProductProductCodeImagePost', 'fileName', fileName)
            // verify required parameter 'base64Data' is not null or undefined
            assertParamExists('iCProductProductCodeImagePost', 'base64Data', base64Data)
            const localVarPath = `/ICProduct('{ProductCode}')/Image`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (base64Data !== undefined) {
                localVarQueryParameter['Base64Data'] = base64Data;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICProduct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodePatch: async (productCode: string, body: ICProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCProductProductCodePatch', 'productCode', productCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCProductProductCodePatch', 'body', body)
            const localVarPath = `/ICProduct('{ProductCode}')`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICProduct/Print is an ODATA function and Action - use either GET or POST to call
         * @param {string} productCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodePrintGet: async (productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCProductProductCodePrintGet', 'productCode', productCode)
            const localVarPath = `/ICProduct('{ProductCode}')/Print`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICProduct/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} productCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodePrintLabelGet: async (productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCProductProductCodePrintLabelGet', 'productCode', productCode)
            const localVarPath = `/ICProduct('{ProductCode}')/PrintLabel`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICProduct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodePut: async (productCode: string, body: ICProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCProductProductCodePut', 'productCode', productCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCProductProductCodePut', 'body', body)
            const localVarPath = `/ICProduct('{ProductCode}')`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ICProductApi - functional programming interface
 * @export
 */
export const ICProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ICProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedICProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ICProduct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductPost(body: ICProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductProductCodeDelete(productCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductProductCodeDelete(productCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductProductCodeGet(productCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductProductCodeGet(productCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICProduct/Image is an ODATA action - use POST to call
         * @param {string} productCode 
         * @param {string} fileName 
         * @param {string} base64Data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductProductCodeImagePost(productCode: string, fileName: string, base64Data: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductProductCodeImagePost(productCode, fileName, base64Data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICProduct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductProductCodePatch(productCode: string, body: ICProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductProductCodePatch(productCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICProduct/Print is an ODATA function and Action - use either GET or POST to call
         * @param {string} productCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductProductCodePrintGet(productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductProductCodePrintGet(productCode, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICProduct/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} productCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductProductCodePrintLabelGet(productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductProductCodePrintLabelGet(productCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICProduct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCProductProductCodePut(productCode: string, body: ICProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCProductProductCodePut(productCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ICProductApi - factory interface
 * @export
 */
export const ICProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ICProductApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductGet(options?: any): AxiosPromise<PagedICProduct> {
            return localVarFp.iCProductGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICProduct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductPost(body: ICProduct, options?: any): AxiosPromise<void> {
            return localVarFp.iCProductPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodeDelete(productCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.iCProductProductCodeDelete(productCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodeGet(productCode: string, options?: any): AxiosPromise<ICProduct> {
            return localVarFp.iCProductProductCodeGet(productCode, options).then((request) => request(axios, basePath));
        },
        /**
         * ICProduct/Image is an ODATA action - use POST to call
         * @param {string} productCode 
         * @param {string} fileName 
         * @param {string} base64Data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodeImagePost(productCode: string, fileName: string, base64Data: string, options?: any): AxiosPromise<void> {
            return localVarFp.iCProductProductCodeImagePost(productCode, fileName, base64Data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICProduct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodePatch(productCode: string, body: ICProduct, options?: any): AxiosPromise<void> {
            return localVarFp.iCProductProductCodePatch(productCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * ICProduct/Print is an ODATA function and Action - use either GET or POST to call
         * @param {string} productCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodePrintGet(productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.iCProductProductCodePrintGet(productCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * ICProduct/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} productCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodePrintLabelGet(productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.iCProductProductCodePrintLabelGet(productCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICProduct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCProductProductCodePut(productCode: string, body: ICProduct, options?: any): AxiosPromise<void> {
            return localVarFp.iCProductProductCodePut(productCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ICProductApi - interface
 * @export
 * @interface ICProductApi
 */
export interface ICProductApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApiInterface
     */
    iCProductGet(options?: AxiosRequestConfig): AxiosPromise<PagedICProduct>;

    /**
     * 
     * @param {ICProduct} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApiInterface
     */
    iCProductPost(body: ICProduct, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} productCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApiInterface
     */
    iCProductProductCodeDelete(productCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} productCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApiInterface
     */
    iCProductProductCodeGet(productCode: string, options?: AxiosRequestConfig): AxiosPromise<ICProduct>;

    /**
     * ICProduct/Image is an ODATA action - use POST to call
     * @param {string} productCode 
     * @param {string} fileName 
     * @param {string} base64Data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApiInterface
     */
    iCProductProductCodeImagePost(productCode: string, fileName: string, base64Data: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} productCode 
     * @param {ICProduct} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApiInterface
     */
    iCProductProductCodePatch(productCode: string, body: ICProduct, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICProduct/Print is an ODATA function and Action - use either GET or POST to call
     * @param {string} productCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApiInterface
     */
    iCProductProductCodePrintGet(productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICProduct/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} productCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApiInterface
     */
    iCProductProductCodePrintLabelGet(productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} productCode 
     * @param {ICProduct} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApiInterface
     */
    iCProductProductCodePut(productCode: string, body: ICProduct, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ICProductApi - object-oriented interface
 * @export
 * @class ICProductApi
 * @extends {BaseAPI}
 */
export class ICProductApi extends BaseAPI implements ICProductApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApi
     */
    public iCProductGet(options?: AxiosRequestConfig) {
        return ICProductApiFp(this.configuration).iCProductGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ICProduct} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApi
     */
    public iCProductPost(body: ICProduct, options?: AxiosRequestConfig) {
        return ICProductApiFp(this.configuration).iCProductPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApi
     */
    public iCProductProductCodeDelete(productCode: string, options?: AxiosRequestConfig) {
        return ICProductApiFp(this.configuration).iCProductProductCodeDelete(productCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApi
     */
    public iCProductProductCodeGet(productCode: string, options?: AxiosRequestConfig) {
        return ICProductApiFp(this.configuration).iCProductProductCodeGet(productCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICProduct/Image is an ODATA action - use POST to call
     * @param {string} productCode 
     * @param {string} fileName 
     * @param {string} base64Data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApi
     */
    public iCProductProductCodeImagePost(productCode: string, fileName: string, base64Data: string, options?: AxiosRequestConfig) {
        return ICProductApiFp(this.configuration).iCProductProductCodeImagePost(productCode, fileName, base64Data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productCode 
     * @param {ICProduct} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApi
     */
    public iCProductProductCodePatch(productCode: string, body: ICProduct, options?: AxiosRequestConfig) {
        return ICProductApiFp(this.configuration).iCProductProductCodePatch(productCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICProduct/Print is an ODATA function and Action - use either GET or POST to call
     * @param {string} productCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApi
     */
    public iCProductProductCodePrintGet(productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return ICProductApiFp(this.configuration).iCProductProductCodePrintGet(productCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICProduct/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} productCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApi
     */
    public iCProductProductCodePrintLabelGet(productCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return ICProductApiFp(this.configuration).iCProductProductCodePrintLabelGet(productCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productCode 
     * @param {ICProduct} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICProductApi
     */
    public iCProductProductCodePut(productCode: string, body: ICProduct, options?: AxiosRequestConfig) {
        return ICProductApiFp(this.configuration).iCProductProductCodePut(productCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
