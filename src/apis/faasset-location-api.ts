/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FAAssetLocation } from '../models';
// @ts-ignore
import { PagedFAAssetLocation } from '../models';
/**
 * FAAssetLocationApi - axios parameter creator
 * @export
 */
export const FAAssetLocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationAssetLocationCodeDelete: async (assetLocationCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetLocationCode' is not null or undefined
            assertParamExists('fAAssetLocationAssetLocationCodeDelete', 'assetLocationCode', assetLocationCode)
            const localVarPath = `/FAAssetLocation('{AssetLocationCode}')`
                .replace(`{${"AssetLocationCode"}}`, encodeURIComponent(String(assetLocationCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationAssetLocationCodeGet: async (assetLocationCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetLocationCode' is not null or undefined
            assertParamExists('fAAssetLocationAssetLocationCodeGet', 'assetLocationCode', assetLocationCode)
            const localVarPath = `/FAAssetLocation('{AssetLocationCode}')`
                .replace(`{${"AssetLocationCode"}}`, encodeURIComponent(String(assetLocationCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {FAAssetLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationAssetLocationCodePatch: async (assetLocationCode: string, body: FAAssetLocation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetLocationCode' is not null or undefined
            assertParamExists('fAAssetLocationAssetLocationCodePatch', 'assetLocationCode', assetLocationCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetLocationAssetLocationCodePatch', 'body', body)
            const localVarPath = `/FAAssetLocation('{AssetLocationCode}')`
                .replace(`{${"AssetLocationCode"}}`, encodeURIComponent(String(assetLocationCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {FAAssetLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationAssetLocationCodePut: async (assetLocationCode: string, body: FAAssetLocation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetLocationCode' is not null or undefined
            assertParamExists('fAAssetLocationAssetLocationCodePut', 'assetLocationCode', assetLocationCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetLocationAssetLocationCodePut', 'body', body)
            const localVarPath = `/FAAssetLocation('{AssetLocationCode}')`
                .replace(`{${"AssetLocationCode"}}`, encodeURIComponent(String(assetLocationCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/FAAssetLocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FAAssetLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationPost: async (body: FAAssetLocation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetLocationPost', 'body', body)
            const localVarPath = `/FAAssetLocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAAssetLocationApi - functional programming interface
 * @export
 */
export const FAAssetLocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAAssetLocationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetLocationAssetLocationCodeDelete(assetLocationCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetLocationAssetLocationCodeDelete(assetLocationCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetLocationAssetLocationCodeGet(assetLocationCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAAssetLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetLocationAssetLocationCodeGet(assetLocationCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {FAAssetLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetLocationAssetLocationCodePatch(assetLocationCode: string, body: FAAssetLocation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetLocationAssetLocationCodePatch(assetLocationCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {FAAssetLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetLocationAssetLocationCodePut(assetLocationCode: string, body: FAAssetLocation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetLocationAssetLocationCodePut(assetLocationCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetLocationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedFAAssetLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetLocationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FAAssetLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetLocationPost(body: FAAssetLocation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetLocationPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FAAssetLocationApi - factory interface
 * @export
 */
export const FAAssetLocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAAssetLocationApiFp(configuration)
    return {
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationAssetLocationCodeDelete(assetLocationCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetLocationAssetLocationCodeDelete(assetLocationCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationAssetLocationCodeGet(assetLocationCode: string, options?: any): AxiosPromise<FAAssetLocation> {
            return localVarFp.fAAssetLocationAssetLocationCodeGet(assetLocationCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {FAAssetLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationAssetLocationCodePatch(assetLocationCode: string, body: FAAssetLocation, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetLocationAssetLocationCodePatch(assetLocationCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetLocationCode 
         * @param {FAAssetLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationAssetLocationCodePut(assetLocationCode: string, body: FAAssetLocation, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetLocationAssetLocationCodePut(assetLocationCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationGet(options?: any): AxiosPromise<PagedFAAssetLocation> {
            return localVarFp.fAAssetLocationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FAAssetLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetLocationPost(body: FAAssetLocation, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetLocationPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAAssetLocationApi - interface
 * @export
 * @interface FAAssetLocationApi
 */
export interface FAAssetLocationApiInterface {
    /**
     * 
     * @param {string} assetLocationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApiInterface
     */
    fAAssetLocationAssetLocationCodeDelete(assetLocationCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} assetLocationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApiInterface
     */
    fAAssetLocationAssetLocationCodeGet(assetLocationCode: string, options?: AxiosRequestConfig): AxiosPromise<FAAssetLocation>;

    /**
     * 
     * @param {string} assetLocationCode 
     * @param {FAAssetLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApiInterface
     */
    fAAssetLocationAssetLocationCodePatch(assetLocationCode: string, body: FAAssetLocation, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} assetLocationCode 
     * @param {FAAssetLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApiInterface
     */
    fAAssetLocationAssetLocationCodePut(assetLocationCode: string, body: FAAssetLocation, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApiInterface
     */
    fAAssetLocationGet(options?: AxiosRequestConfig): AxiosPromise<PagedFAAssetLocation>;

    /**
     * 
     * @param {FAAssetLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApiInterface
     */
    fAAssetLocationPost(body: FAAssetLocation, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * FAAssetLocationApi - object-oriented interface
 * @export
 * @class FAAssetLocationApi
 * @extends {BaseAPI}
 */
export class FAAssetLocationApi extends BaseAPI implements FAAssetLocationApiInterface {
    /**
     * 
     * @param {string} assetLocationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApi
     */
    public fAAssetLocationAssetLocationCodeDelete(assetLocationCode: string, options?: AxiosRequestConfig) {
        return FAAssetLocationApiFp(this.configuration).fAAssetLocationAssetLocationCodeDelete(assetLocationCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} assetLocationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApi
     */
    public fAAssetLocationAssetLocationCodeGet(assetLocationCode: string, options?: AxiosRequestConfig) {
        return FAAssetLocationApiFp(this.configuration).fAAssetLocationAssetLocationCodeGet(assetLocationCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} assetLocationCode 
     * @param {FAAssetLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApi
     */
    public fAAssetLocationAssetLocationCodePatch(assetLocationCode: string, body: FAAssetLocation, options?: AxiosRequestConfig) {
        return FAAssetLocationApiFp(this.configuration).fAAssetLocationAssetLocationCodePatch(assetLocationCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} assetLocationCode 
     * @param {FAAssetLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApi
     */
    public fAAssetLocationAssetLocationCodePut(assetLocationCode: string, body: FAAssetLocation, options?: AxiosRequestConfig) {
        return FAAssetLocationApiFp(this.configuration).fAAssetLocationAssetLocationCodePut(assetLocationCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApi
     */
    public fAAssetLocationGet(options?: AxiosRequestConfig) {
        return FAAssetLocationApiFp(this.configuration).fAAssetLocationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FAAssetLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetLocationApi
     */
    public fAAssetLocationPost(body: FAAssetLocation, options?: AxiosRequestConfig) {
        return FAAssetLocationApiFp(this.configuration).fAAssetLocationPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
