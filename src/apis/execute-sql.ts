/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { ValueResponse } from "../models/valueResponse";
// @ts-ignore
// import { APAllocation } from "../models";
/**
 * SQLExecutionApi - axios parameter creator
 * @export
 */
export const SQLExecutionApixiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sqlExecutionApiPost: async (
      query: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'query' is not null or undefined
      assertParamExists("sqlExecutionPost", "query", query);
      const localVarPath = `/ExecuteSql`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const body = {
        QueryText: query,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 *SQLExecutionApi - functional programming interface
 * @export
 */
export const SQLExecutionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    SQLExecutionApixiosParamCreator(configuration);
  return {
    async sqlExecutionApiPost(
      query: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValueResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.sqlExecutionApiPost(query, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SQLExecutionApi - factory interface
 * @export
 */
export const SQLExecutionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SQLExecutionApiFp(configuration);
  return {
    /**
     *
     * @param {string} query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sqlExecutionApiPost(query: string, options?: any): AxiosPromise<any> {
      return localVarFp
        .sqlExecutionApiPost(query, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SQLExecutionApi - interface
 * @export
 * @interface SQLExecutionApi
 */
export interface SQLExecutionApiInterface {
  /**
   *
   * @param {string} query
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SQLExecutionApiInterface
   */
  sqlExecutionApiPost(
    query: string,
    options?: AxiosRequestConfig
  ): AxiosPromise<any>;
}

/**
 * SQLExecutionApi - object-oriented interface
 * @export
 * @class SQLExecutionApi
 * @extends {BaseAPI}
 */
export class SQLExecutionApi
  extends BaseAPI
  implements SQLExecutionApiInterface
{
  /**
   *
   * @param {string} query
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecuteSqlAPI
   */
  public sqlExecutionApiPost(query: string, options?: AxiosRequestConfig) {
    return SQLExecutionApiFp(this.configuration)
      .sqlExecutionApiPost(query, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
