/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARSalesArea } from '../models';
// @ts-ignore
import { PagedARSalesArea } from '../models';
/**
 * ARSalesAreaApi - axios parameter creator
 * @export
 */
export const ARSalesAreaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARSalesArea`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ARSalesArea} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaPost: async (body: ARSalesArea, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesAreaPost', 'body', body)
            const localVarPath = `/ARSalesArea`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaSalesAreaCodeDelete: async (salesAreaCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesAreaCode' is not null or undefined
            assertParamExists('aRSalesAreaSalesAreaCodeDelete', 'salesAreaCode', salesAreaCode)
            const localVarPath = `/ARSalesArea('{SalesAreaCode}')`
                .replace(`{${"SalesAreaCode"}}`, encodeURIComponent(String(salesAreaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaSalesAreaCodeGet: async (salesAreaCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesAreaCode' is not null or undefined
            assertParamExists('aRSalesAreaSalesAreaCodeGet', 'salesAreaCode', salesAreaCode)
            const localVarPath = `/ARSalesArea('{SalesAreaCode}')`
                .replace(`{${"SalesAreaCode"}}`, encodeURIComponent(String(salesAreaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesArea} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaSalesAreaCodePatch: async (salesAreaCode: string, body: ARSalesArea, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesAreaCode' is not null or undefined
            assertParamExists('aRSalesAreaSalesAreaCodePatch', 'salesAreaCode', salesAreaCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesAreaSalesAreaCodePatch', 'body', body)
            const localVarPath = `/ARSalesArea('{SalesAreaCode}')`
                .replace(`{${"SalesAreaCode"}}`, encodeURIComponent(String(salesAreaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesArea} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaSalesAreaCodePut: async (salesAreaCode: string, body: ARSalesArea, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesAreaCode' is not null or undefined
            assertParamExists('aRSalesAreaSalesAreaCodePut', 'salesAreaCode', salesAreaCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesAreaSalesAreaCodePut', 'body', body)
            const localVarPath = `/ARSalesArea('{SalesAreaCode}')`
                .replace(`{${"SalesAreaCode"}}`, encodeURIComponent(String(salesAreaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARSalesAreaApi - functional programming interface
 * @export
 */
export const ARSalesAreaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARSalesAreaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARSalesArea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ARSalesArea} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaPost(body: ARSalesArea, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaSalesAreaCodeDelete(salesAreaCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaSalesAreaCodeDelete(salesAreaCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaSalesAreaCodeGet(salesAreaCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARSalesArea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaSalesAreaCodeGet(salesAreaCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesArea} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaSalesAreaCodePatch(salesAreaCode: string, body: ARSalesArea, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaSalesAreaCodePatch(salesAreaCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesArea} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaSalesAreaCodePut(salesAreaCode: string, body: ARSalesArea, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaSalesAreaCodePut(salesAreaCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARSalesAreaApi - factory interface
 * @export
 */
export const ARSalesAreaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARSalesAreaApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaGet(options?: any): AxiosPromise<PagedARSalesArea> {
            return localVarFp.aRSalesAreaGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ARSalesArea} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaPost(body: ARSalesArea, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesAreaPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaSalesAreaCodeDelete(salesAreaCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesAreaSalesAreaCodeDelete(salesAreaCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaSalesAreaCodeGet(salesAreaCode: string, options?: any): AxiosPromise<ARSalesArea> {
            return localVarFp.aRSalesAreaSalesAreaCodeGet(salesAreaCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesArea} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaSalesAreaCodePatch(salesAreaCode: string, body: ARSalesArea, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesAreaSalesAreaCodePatch(salesAreaCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesArea} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaSalesAreaCodePut(salesAreaCode: string, body: ARSalesArea, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesAreaSalesAreaCodePut(salesAreaCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARSalesAreaApi - interface
 * @export
 * @interface ARSalesAreaApi
 */
export interface ARSalesAreaApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApiInterface
     */
    aRSalesAreaGet(options?: AxiosRequestConfig): AxiosPromise<PagedARSalesArea>;

    /**
     * 
     * @param {ARSalesArea} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApiInterface
     */
    aRSalesAreaPost(body: ARSalesArea, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApiInterface
     */
    aRSalesAreaSalesAreaCodeDelete(salesAreaCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApiInterface
     */
    aRSalesAreaSalesAreaCodeGet(salesAreaCode: string, options?: AxiosRequestConfig): AxiosPromise<ARSalesArea>;

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {ARSalesArea} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApiInterface
     */
    aRSalesAreaSalesAreaCodePatch(salesAreaCode: string, body: ARSalesArea, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {ARSalesArea} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApiInterface
     */
    aRSalesAreaSalesAreaCodePut(salesAreaCode: string, body: ARSalesArea, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ARSalesAreaApi - object-oriented interface
 * @export
 * @class ARSalesAreaApi
 * @extends {BaseAPI}
 */
export class ARSalesAreaApi extends BaseAPI implements ARSalesAreaApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApi
     */
    public aRSalesAreaGet(options?: AxiosRequestConfig) {
        return ARSalesAreaApiFp(this.configuration).aRSalesAreaGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ARSalesArea} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApi
     */
    public aRSalesAreaPost(body: ARSalesArea, options?: AxiosRequestConfig) {
        return ARSalesAreaApiFp(this.configuration).aRSalesAreaPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApi
     */
    public aRSalesAreaSalesAreaCodeDelete(salesAreaCode: string, options?: AxiosRequestConfig) {
        return ARSalesAreaApiFp(this.configuration).aRSalesAreaSalesAreaCodeDelete(salesAreaCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApi
     */
    public aRSalesAreaSalesAreaCodeGet(salesAreaCode: string, options?: AxiosRequestConfig) {
        return ARSalesAreaApiFp(this.configuration).aRSalesAreaSalesAreaCodeGet(salesAreaCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {ARSalesArea} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApi
     */
    public aRSalesAreaSalesAreaCodePatch(salesAreaCode: string, body: ARSalesArea, options?: AxiosRequestConfig) {
        return ARSalesAreaApiFp(this.configuration).aRSalesAreaSalesAreaCodePatch(salesAreaCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {ARSalesArea} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaApi
     */
    public aRSalesAreaSalesAreaCodePut(salesAreaCode: string, body: ARSalesArea, options?: AxiosRequestConfig) {
        return ARSalesAreaApiFp(this.configuration).aRSalesAreaSalesAreaCodePut(salesAreaCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
