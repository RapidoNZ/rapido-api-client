/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APExpenseGroup } from '../models';
// @ts-ignore
import { PagedAPExpenseGroup } from '../models';
/**
 * APExpenseGroupApi - axios parameter creator
 * @export
 */
export const APExpenseGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupAnalysisCodeDelete: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aPExpenseGroupAnalysisCodeDelete', 'analysisCode', analysisCode)
            const localVarPath = `/APExpenseGroup('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupAnalysisCodeGet: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aPExpenseGroupAnalysisCodeGet', 'analysisCode', analysisCode)
            const localVarPath = `/APExpenseGroup('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupAnalysisCodePatch: async (analysisCode: string, body: APExpenseGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aPExpenseGroupAnalysisCodePatch', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPExpenseGroupAnalysisCodePatch', 'body', body)
            const localVarPath = `/APExpenseGroup('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupAnalysisCodePut: async (analysisCode: string, body: APExpenseGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aPExpenseGroupAnalysisCodePut', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPExpenseGroupAnalysisCodePut', 'body', body)
            const localVarPath = `/APExpenseGroup('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/APExpenseGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {APExpenseGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupPost: async (body: APExpenseGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPExpenseGroupPost', 'body', body)
            const localVarPath = `/APExpenseGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APExpenseGroupApi - functional programming interface
 * @export
 */
export const APExpenseGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APExpenseGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseGroupAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseGroupAnalysisCodeDelete(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseGroupAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APExpenseGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseGroupAnalysisCodeGet(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseGroupAnalysisCodePatch(analysisCode: string, body: APExpenseGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseGroupAnalysisCodePatch(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseGroupAnalysisCodePut(analysisCode: string, body: APExpenseGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseGroupAnalysisCodePut(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseGroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedAPExpenseGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseGroupGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {APExpenseGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseGroupPost(body: APExpenseGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseGroupPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APExpenseGroupApi - factory interface
 * @export
 */
export const APExpenseGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APExpenseGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupAnalysisCodeDelete(analysisCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.aPExpenseGroupAnalysisCodeDelete(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupAnalysisCodeGet(analysisCode: string, options?: any): AxiosPromise<APExpenseGroup> {
            return localVarFp.aPExpenseGroupAnalysisCodeGet(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupAnalysisCodePatch(analysisCode: string, body: APExpenseGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aPExpenseGroupAnalysisCodePatch(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupAnalysisCodePut(analysisCode: string, body: APExpenseGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aPExpenseGroupAnalysisCodePut(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupGet(options?: any): AxiosPromise<PagedAPExpenseGroup> {
            return localVarFp.aPExpenseGroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APExpenseGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseGroupPost(body: APExpenseGroup, options?: any): AxiosPromise<void> {
            return localVarFp.aPExpenseGroupPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APExpenseGroupApi - interface
 * @export
 * @interface APExpenseGroupApi
 */
export interface APExpenseGroupApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApiInterface
     */
    aPExpenseGroupAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApiInterface
     */
    aPExpenseGroupAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<APExpenseGroup>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {APExpenseGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApiInterface
     */
    aPExpenseGroupAnalysisCodePatch(analysisCode: string, body: APExpenseGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {APExpenseGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApiInterface
     */
    aPExpenseGroupAnalysisCodePut(analysisCode: string, body: APExpenseGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApiInterface
     */
    aPExpenseGroupGet(options?: AxiosRequestConfig): AxiosPromise<PagedAPExpenseGroup>;

    /**
     * 
     * @param {APExpenseGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApiInterface
     */
    aPExpenseGroupPost(body: APExpenseGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * APExpenseGroupApi - object-oriented interface
 * @export
 * @class APExpenseGroupApi
 * @extends {BaseAPI}
 */
export class APExpenseGroupApi extends BaseAPI implements APExpenseGroupApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApi
     */
    public aPExpenseGroupAnalysisCodeDelete(analysisCode: string, options?: AxiosRequestConfig) {
        return APExpenseGroupApiFp(this.configuration).aPExpenseGroupAnalysisCodeDelete(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApi
     */
    public aPExpenseGroupAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig) {
        return APExpenseGroupApiFp(this.configuration).aPExpenseGroupAnalysisCodeGet(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {APExpenseGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApi
     */
    public aPExpenseGroupAnalysisCodePatch(analysisCode: string, body: APExpenseGroup, options?: AxiosRequestConfig) {
        return APExpenseGroupApiFp(this.configuration).aPExpenseGroupAnalysisCodePatch(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {APExpenseGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApi
     */
    public aPExpenseGroupAnalysisCodePut(analysisCode: string, body: APExpenseGroup, options?: AxiosRequestConfig) {
        return APExpenseGroupApiFp(this.configuration).aPExpenseGroupAnalysisCodePut(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApi
     */
    public aPExpenseGroupGet(options?: AxiosRequestConfig) {
        return APExpenseGroupApiFp(this.configuration).aPExpenseGroupGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APExpenseGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseGroupApi
     */
    public aPExpenseGroupPost(body: APExpenseGroup, options?: AxiosRequestConfig) {
        return APExpenseGroupApiFp(this.configuration).aPExpenseGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
