/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBAnalysisBudget } from '../models';
// @ts-ignore
import { PagedCBAnalysisBudget } from '../models';
/**
 * CBAnalysisBudgetApi - axios parameter creator
 * @export
 */
export const CBAnalysisBudgetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAnalysisBudgetAnalysisCodeGet: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('cBAnalysisBudgetAnalysisCodeGet', 'analysisCode', analysisCode)
            const localVarPath = `/CBAnalysisBudget('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBAnalysisBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAnalysisBudgetAnalysisCodePatch: async (analysisCode: string, body: CBAnalysisBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('cBAnalysisBudgetAnalysisCodePatch', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBAnalysisBudgetAnalysisCodePatch', 'body', body)
            const localVarPath = `/CBAnalysisBudget('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBAnalysisBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAnalysisBudgetAnalysisCodePut: async (analysisCode: string, body: CBAnalysisBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('cBAnalysisBudgetAnalysisCodePut', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBAnalysisBudgetAnalysisCodePut', 'body', body)
            const localVarPath = `/CBAnalysisBudget('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAnalysisBudgetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBAnalysisBudget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBAnalysisBudgetApi - functional programming interface
 * @export
 */
export const CBAnalysisBudgetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBAnalysisBudgetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAnalysisBudgetAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBAnalysisBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAnalysisBudgetAnalysisCodeGet(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBAnalysisBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAnalysisBudgetAnalysisCodePatch(analysisCode: string, body: CBAnalysisBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAnalysisBudgetAnalysisCodePatch(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBAnalysisBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAnalysisBudgetAnalysisCodePut(analysisCode: string, body: CBAnalysisBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAnalysisBudgetAnalysisCodePut(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAnalysisBudgetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBAnalysisBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAnalysisBudgetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBAnalysisBudgetApi - factory interface
 * @export
 */
export const CBAnalysisBudgetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBAnalysisBudgetApiFp(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAnalysisBudgetAnalysisCodeGet(analysisCode: string, options?: any): AxiosPromise<CBAnalysisBudget> {
            return localVarFp.cBAnalysisBudgetAnalysisCodeGet(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBAnalysisBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAnalysisBudgetAnalysisCodePatch(analysisCode: string, body: CBAnalysisBudget, options?: any): AxiosPromise<void> {
            return localVarFp.cBAnalysisBudgetAnalysisCodePatch(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {CBAnalysisBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAnalysisBudgetAnalysisCodePut(analysisCode: string, body: CBAnalysisBudget, options?: any): AxiosPromise<void> {
            return localVarFp.cBAnalysisBudgetAnalysisCodePut(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAnalysisBudgetGet(options?: any): AxiosPromise<PagedCBAnalysisBudget> {
            return localVarFp.cBAnalysisBudgetGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBAnalysisBudgetApi - interface
 * @export
 * @interface CBAnalysisBudgetApi
 */
export interface CBAnalysisBudgetApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAnalysisBudgetApiInterface
     */
    cBAnalysisBudgetAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<CBAnalysisBudget>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {CBAnalysisBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAnalysisBudgetApiInterface
     */
    cBAnalysisBudgetAnalysisCodePatch(analysisCode: string, body: CBAnalysisBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {CBAnalysisBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAnalysisBudgetApiInterface
     */
    cBAnalysisBudgetAnalysisCodePut(analysisCode: string, body: CBAnalysisBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAnalysisBudgetApiInterface
     */
    cBAnalysisBudgetGet(options?: AxiosRequestConfig): AxiosPromise<PagedCBAnalysisBudget>;

}

/**
 * CBAnalysisBudgetApi - object-oriented interface
 * @export
 * @class CBAnalysisBudgetApi
 * @extends {BaseAPI}
 */
export class CBAnalysisBudgetApi extends BaseAPI implements CBAnalysisBudgetApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAnalysisBudgetApi
     */
    public cBAnalysisBudgetAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig) {
        return CBAnalysisBudgetApiFp(this.configuration).cBAnalysisBudgetAnalysisCodeGet(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {CBAnalysisBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAnalysisBudgetApi
     */
    public cBAnalysisBudgetAnalysisCodePatch(analysisCode: string, body: CBAnalysisBudget, options?: AxiosRequestConfig) {
        return CBAnalysisBudgetApiFp(this.configuration).cBAnalysisBudgetAnalysisCodePatch(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {CBAnalysisBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAnalysisBudgetApi
     */
    public cBAnalysisBudgetAnalysisCodePut(analysisCode: string, body: CBAnalysisBudget, options?: AxiosRequestConfig) {
        return CBAnalysisBudgetApiFp(this.configuration).cBAnalysisBudgetAnalysisCodePut(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAnalysisBudgetApi
     */
    public cBAnalysisBudgetGet(options?: AxiosRequestConfig) {
        return CBAnalysisBudgetApiFp(this.configuration).cBAnalysisBudgetGet(options).then((request) => request(this.axios, this.basePath));
    }
}
