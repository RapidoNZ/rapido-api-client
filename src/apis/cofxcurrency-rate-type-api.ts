/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { COFXCurrencyRateType } from '../models';
// @ts-ignore
import { PagedCOFXCurrencyRateType } from '../models';
/**
 * COFXCurrencyRateTypeApi - axios parameter creator
 * @export
 */
export const COFXCurrencyRateTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeCodeDelete: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('cOFXCurrencyRateTypeCodeDelete', 'code', code)
            const localVarPath = `/COFXCurrencyRateType('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeCodeGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('cOFXCurrencyRateTypeCodeGet', 'code', code)
            const localVarPath = `/COFXCurrencyRateType('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {COFXCurrencyRateType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeCodePatch: async (code: string, body: COFXCurrencyRateType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('cOFXCurrencyRateTypeCodePatch', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOFXCurrencyRateTypeCodePatch', 'body', body)
            const localVarPath = `/COFXCurrencyRateType('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {COFXCurrencyRateType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeCodePut: async (code: string, body: COFXCurrencyRateType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('cOFXCurrencyRateTypeCodePut', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOFXCurrencyRateTypeCodePut', 'body', body)
            const localVarPath = `/COFXCurrencyRateType('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/COFXCurrencyRateType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {COFXCurrencyRateType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypePost: async (body: COFXCurrencyRateType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOFXCurrencyRateTypePost', 'body', body)
            const localVarPath = `/COFXCurrencyRateType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * COFXCurrencyRateTypeApi - functional programming interface
 * @export
 */
export const COFXCurrencyRateTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = COFXCurrencyRateTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOFXCurrencyRateTypeCodeDelete(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOFXCurrencyRateTypeCodeDelete(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOFXCurrencyRateTypeCodeGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<COFXCurrencyRateType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOFXCurrencyRateTypeCodeGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {COFXCurrencyRateType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOFXCurrencyRateTypeCodePatch(code: string, body: COFXCurrencyRateType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOFXCurrencyRateTypeCodePatch(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {COFXCurrencyRateType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOFXCurrencyRateTypeCodePut(code: string, body: COFXCurrencyRateType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOFXCurrencyRateTypeCodePut(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOFXCurrencyRateTypeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCOFXCurrencyRateType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOFXCurrencyRateTypeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {COFXCurrencyRateType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOFXCurrencyRateTypePost(body: COFXCurrencyRateType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOFXCurrencyRateTypePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * COFXCurrencyRateTypeApi - factory interface
 * @export
 */
export const COFXCurrencyRateTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = COFXCurrencyRateTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeCodeDelete(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.cOFXCurrencyRateTypeCodeDelete(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeCodeGet(code: string, options?: any): AxiosPromise<COFXCurrencyRateType> {
            return localVarFp.cOFXCurrencyRateTypeCodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {COFXCurrencyRateType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeCodePatch(code: string, body: COFXCurrencyRateType, options?: any): AxiosPromise<void> {
            return localVarFp.cOFXCurrencyRateTypeCodePatch(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {COFXCurrencyRateType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeCodePut(code: string, body: COFXCurrencyRateType, options?: any): AxiosPromise<void> {
            return localVarFp.cOFXCurrencyRateTypeCodePut(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypeGet(options?: any): AxiosPromise<PagedCOFXCurrencyRateType> {
            return localVarFp.cOFXCurrencyRateTypeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {COFXCurrencyRateType} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOFXCurrencyRateTypePost(body: COFXCurrencyRateType, options?: any): AxiosPromise<void> {
            return localVarFp.cOFXCurrencyRateTypePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * COFXCurrencyRateTypeApi - interface
 * @export
 * @interface COFXCurrencyRateTypeApi
 */
export interface COFXCurrencyRateTypeApiInterface {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApiInterface
     */
    cOFXCurrencyRateTypeCodeDelete(code: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApiInterface
     */
    cOFXCurrencyRateTypeCodeGet(code: string, options?: AxiosRequestConfig): AxiosPromise<COFXCurrencyRateType>;

    /**
     * 
     * @param {string} code 
     * @param {COFXCurrencyRateType} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApiInterface
     */
    cOFXCurrencyRateTypeCodePatch(code: string, body: COFXCurrencyRateType, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} code 
     * @param {COFXCurrencyRateType} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApiInterface
     */
    cOFXCurrencyRateTypeCodePut(code: string, body: COFXCurrencyRateType, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApiInterface
     */
    cOFXCurrencyRateTypeGet(options?: AxiosRequestConfig): AxiosPromise<PagedCOFXCurrencyRateType>;

    /**
     * 
     * @param {COFXCurrencyRateType} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApiInterface
     */
    cOFXCurrencyRateTypePost(body: COFXCurrencyRateType, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * COFXCurrencyRateTypeApi - object-oriented interface
 * @export
 * @class COFXCurrencyRateTypeApi
 * @extends {BaseAPI}
 */
export class COFXCurrencyRateTypeApi extends BaseAPI implements COFXCurrencyRateTypeApiInterface {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApi
     */
    public cOFXCurrencyRateTypeCodeDelete(code: string, options?: AxiosRequestConfig) {
        return COFXCurrencyRateTypeApiFp(this.configuration).cOFXCurrencyRateTypeCodeDelete(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApi
     */
    public cOFXCurrencyRateTypeCodeGet(code: string, options?: AxiosRequestConfig) {
        return COFXCurrencyRateTypeApiFp(this.configuration).cOFXCurrencyRateTypeCodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {COFXCurrencyRateType} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApi
     */
    public cOFXCurrencyRateTypeCodePatch(code: string, body: COFXCurrencyRateType, options?: AxiosRequestConfig) {
        return COFXCurrencyRateTypeApiFp(this.configuration).cOFXCurrencyRateTypeCodePatch(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {COFXCurrencyRateType} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApi
     */
    public cOFXCurrencyRateTypeCodePut(code: string, body: COFXCurrencyRateType, options?: AxiosRequestConfig) {
        return COFXCurrencyRateTypeApiFp(this.configuration).cOFXCurrencyRateTypeCodePut(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApi
     */
    public cOFXCurrencyRateTypeGet(options?: AxiosRequestConfig) {
        return COFXCurrencyRateTypeApiFp(this.configuration).cOFXCurrencyRateTypeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {COFXCurrencyRateType} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COFXCurrencyRateTypeApi
     */
    public cOFXCurrencyRateTypePost(body: COFXCurrencyRateType, options?: AxiosRequestConfig) {
        return COFXCurrencyRateTypeApiFp(this.configuration).cOFXCurrencyRateTypePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
