/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FAAsset } from '../models';
// @ts-ignore
import { PagedFAAsset } from '../models';
/**
 * FAAssetApi - axios parameter creator
 * @export
 */
export const FAAssetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} assetCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodeDelete: async (assetCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('fAAssetAssetCodeDelete', 'assetCode', assetCode)
            const localVarPath = `/FAAsset('{AssetCode}')`
                .replace(`{${"AssetCode"}}`, encodeURIComponent(String(assetCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodeGet: async (assetCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('fAAssetAssetCodeGet', 'assetCode', assetCode)
            const localVarPath = `/FAAsset('{AssetCode}')`
                .replace(`{${"AssetCode"}}`, encodeURIComponent(String(assetCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetCode 
         * @param {FAAsset} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodePatch: async (assetCode: string, body: FAAsset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('fAAssetAssetCodePatch', 'assetCode', assetCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetAssetCodePatch', 'body', body)
            const localVarPath = `/FAAsset('{AssetCode}')`
                .replace(`{${"AssetCode"}}`, encodeURIComponent(String(assetCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FAAsset/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} assetCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodePrintLabelGet: async (assetCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('fAAssetAssetCodePrintLabelGet', 'assetCode', assetCode)
            const localVarPath = `/FAAsset('{AssetCode}')/PrintLabel`
                .replace(`{${"AssetCode"}}`, encodeURIComponent(String(assetCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetCode 
         * @param {FAAsset} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodePut: async (assetCode: string, body: FAAsset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetCode' is not null or undefined
            assertParamExists('fAAssetAssetCodePut', 'assetCode', assetCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetAssetCodePut', 'body', body)
            const localVarPath = `/FAAsset('{AssetCode}')`
                .replace(`{${"AssetCode"}}`, encodeURIComponent(String(assetCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/FAAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FAAsset} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetPost: async (body: FAAsset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetPost', 'body', body)
            const localVarPath = `/FAAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAAssetApi - functional programming interface
 * @export
 */
export const FAAssetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAAssetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} assetCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetAssetCodeDelete(assetCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetAssetCodeDelete(assetCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assetCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetAssetCodeGet(assetCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetAssetCodeGet(assetCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assetCode 
         * @param {FAAsset} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetAssetCodePatch(assetCode: string, body: FAAsset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetAssetCodePatch(assetCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * FAAsset/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} assetCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetAssetCodePrintLabelGet(assetCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetAssetCodePrintLabelGet(assetCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assetCode 
         * @param {FAAsset} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetAssetCodePut(assetCode: string, body: FAAsset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetAssetCodePut(assetCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedFAAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FAAsset} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetPost(body: FAAsset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FAAssetApi - factory interface
 * @export
 */
export const FAAssetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAAssetApiFp(configuration)
    return {
        /**
         * 
         * @param {string} assetCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodeDelete(assetCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetAssetCodeDelete(assetCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodeGet(assetCode: string, options?: any): AxiosPromise<FAAsset> {
            return localVarFp.fAAssetAssetCodeGet(assetCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetCode 
         * @param {FAAsset} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodePatch(assetCode: string, body: FAAsset, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetAssetCodePatch(assetCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * FAAsset/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} assetCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodePrintLabelGet(assetCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetAssetCodePrintLabelGet(assetCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetCode 
         * @param {FAAsset} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetAssetCodePut(assetCode: string, body: FAAsset, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetAssetCodePut(assetCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGet(options?: any): AxiosPromise<PagedFAAsset> {
            return localVarFp.fAAssetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FAAsset} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetPost(body: FAAsset, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAAssetApi - interface
 * @export
 * @interface FAAssetApi
 */
export interface FAAssetApiInterface {
    /**
     * 
     * @param {string} assetCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApiInterface
     */
    fAAssetAssetCodeDelete(assetCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} assetCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApiInterface
     */
    fAAssetAssetCodeGet(assetCode: string, options?: AxiosRequestConfig): AxiosPromise<FAAsset>;

    /**
     * 
     * @param {string} assetCode 
     * @param {FAAsset} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApiInterface
     */
    fAAssetAssetCodePatch(assetCode: string, body: FAAsset, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * FAAsset/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} assetCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApiInterface
     */
    fAAssetAssetCodePrintLabelGet(assetCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} assetCode 
     * @param {FAAsset} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApiInterface
     */
    fAAssetAssetCodePut(assetCode: string, body: FAAsset, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApiInterface
     */
    fAAssetGet(options?: AxiosRequestConfig): AxiosPromise<PagedFAAsset>;

    /**
     * 
     * @param {FAAsset} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApiInterface
     */
    fAAssetPost(body: FAAsset, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * FAAssetApi - object-oriented interface
 * @export
 * @class FAAssetApi
 * @extends {BaseAPI}
 */
export class FAAssetApi extends BaseAPI implements FAAssetApiInterface {
    /**
     * 
     * @param {string} assetCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApi
     */
    public fAAssetAssetCodeDelete(assetCode: string, options?: AxiosRequestConfig) {
        return FAAssetApiFp(this.configuration).fAAssetAssetCodeDelete(assetCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} assetCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApi
     */
    public fAAssetAssetCodeGet(assetCode: string, options?: AxiosRequestConfig) {
        return FAAssetApiFp(this.configuration).fAAssetAssetCodeGet(assetCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} assetCode 
     * @param {FAAsset} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApi
     */
    public fAAssetAssetCodePatch(assetCode: string, body: FAAsset, options?: AxiosRequestConfig) {
        return FAAssetApiFp(this.configuration).fAAssetAssetCodePatch(assetCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * FAAsset/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} assetCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApi
     */
    public fAAssetAssetCodePrintLabelGet(assetCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return FAAssetApiFp(this.configuration).fAAssetAssetCodePrintLabelGet(assetCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} assetCode 
     * @param {FAAsset} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApi
     */
    public fAAssetAssetCodePut(assetCode: string, body: FAAsset, options?: AxiosRequestConfig) {
        return FAAssetApiFp(this.configuration).fAAssetAssetCodePut(assetCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApi
     */
    public fAAssetGet(options?: AxiosRequestConfig) {
        return FAAssetApiFp(this.configuration).fAAssetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FAAsset} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetApi
     */
    public fAAssetPost(body: FAAsset, options?: AxiosRequestConfig) {
        return FAAssetApiFp(this.configuration).fAAssetPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
