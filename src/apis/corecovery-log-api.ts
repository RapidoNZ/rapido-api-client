/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CORecoveryLog } from '../models';
// @ts-ignore
import { PagedCORecoveryLog } from '../models';
/**
 * CORecoveryLogApi - axios parameter creator
 * @export
 */
export const CORecoveryLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cORecoveryLogGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CORecoveryLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cORecoveryLogIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cORecoveryLogIdDelete', 'id', id)
            const localVarPath = `/CORecoveryLog('{Id}')`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cORecoveryLogIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cORecoveryLogIdGet', 'id', id)
            const localVarPath = `/CORecoveryLog('{Id}')`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CORecoveryLog} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cORecoveryLogPost: async (body: CORecoveryLog, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cORecoveryLogPost', 'body', body)
            const localVarPath = `/CORecoveryLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CORecoveryLogApi - functional programming interface
 * @export
 */
export const CORecoveryLogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CORecoveryLogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cORecoveryLogGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCORecoveryLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cORecoveryLogGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cORecoveryLogIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cORecoveryLogIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cORecoveryLogIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CORecoveryLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cORecoveryLogIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CORecoveryLog} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cORecoveryLogPost(body: CORecoveryLog, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cORecoveryLogPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CORecoveryLogApi - factory interface
 * @export
 */
export const CORecoveryLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CORecoveryLogApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cORecoveryLogGet(options?: any): AxiosPromise<PagedCORecoveryLog> {
            return localVarFp.cORecoveryLogGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cORecoveryLogIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.cORecoveryLogIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cORecoveryLogIdGet(id: number, options?: any): AxiosPromise<CORecoveryLog> {
            return localVarFp.cORecoveryLogIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CORecoveryLog} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cORecoveryLogPost(body: CORecoveryLog, options?: any): AxiosPromise<void> {
            return localVarFp.cORecoveryLogPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CORecoveryLogApi - interface
 * @export
 * @interface CORecoveryLogApi
 */
export interface CORecoveryLogApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORecoveryLogApiInterface
     */
    cORecoveryLogGet(options?: AxiosRequestConfig): AxiosPromise<PagedCORecoveryLog>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORecoveryLogApiInterface
     */
    cORecoveryLogIdDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORecoveryLogApiInterface
     */
    cORecoveryLogIdGet(id: number, options?: AxiosRequestConfig): AxiosPromise<CORecoveryLog>;

    /**
     * 
     * @param {CORecoveryLog} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORecoveryLogApiInterface
     */
    cORecoveryLogPost(body: CORecoveryLog, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CORecoveryLogApi - object-oriented interface
 * @export
 * @class CORecoveryLogApi
 * @extends {BaseAPI}
 */
export class CORecoveryLogApi extends BaseAPI implements CORecoveryLogApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORecoveryLogApi
     */
    public cORecoveryLogGet(options?: AxiosRequestConfig) {
        return CORecoveryLogApiFp(this.configuration).cORecoveryLogGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORecoveryLogApi
     */
    public cORecoveryLogIdDelete(id: number, options?: AxiosRequestConfig) {
        return CORecoveryLogApiFp(this.configuration).cORecoveryLogIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORecoveryLogApi
     */
    public cORecoveryLogIdGet(id: number, options?: AxiosRequestConfig) {
        return CORecoveryLogApiFp(this.configuration).cORecoveryLogIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CORecoveryLog} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORecoveryLogApi
     */
    public cORecoveryLogPost(body: CORecoveryLog, options?: AxiosRequestConfig) {
        return CORecoveryLogApiFp(this.configuration).cORecoveryLogPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
