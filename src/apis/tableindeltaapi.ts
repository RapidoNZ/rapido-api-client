/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagedTABLEINDELTA } from '../models';
// @ts-ignore
import { TABLEINDELTA } from '../models';
/**
 * TABLEINDELTAApi - axios parameter creator
 * @export
 */
export const TABLEINDELTAApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} deltaID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEINDELTADeltaIDGet: async (deltaID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deltaID' is not null or undefined
            assertParamExists('tABLEINDELTADeltaIDGet', 'deltaID', deltaID)
            const localVarPath = `/TABLE_INDELTA('{DeltaID}')`
                .replace(`{${"DeltaID"}}`, encodeURIComponent(String(deltaID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEINDELTAGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TABLE_INDELTA`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TABLEINDELTAApi - functional programming interface
 * @export
 */
export const TABLEINDELTAApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TABLEINDELTAApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} deltaID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLEINDELTADeltaIDGet(deltaID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TABLEINDELTA>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLEINDELTADeltaIDGet(deltaID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLEINDELTAGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedTABLEINDELTA>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLEINDELTAGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TABLEINDELTAApi - factory interface
 * @export
 */
export const TABLEINDELTAApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TABLEINDELTAApiFp(configuration)
    return {
        /**
         * 
         * @param {number} deltaID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEINDELTADeltaIDGet(deltaID: number, options?: any): AxiosPromise<TABLEINDELTA> {
            return localVarFp.tABLEINDELTADeltaIDGet(deltaID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLEINDELTAGet(options?: any): AxiosPromise<PagedTABLEINDELTA> {
            return localVarFp.tABLEINDELTAGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TABLEINDELTAApi - interface
 * @export
 * @interface TABLEINDELTAApi
 */
export interface TABLEINDELTAApiInterface {
    /**
     * 
     * @param {number} deltaID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEINDELTAApiInterface
     */
    tABLEINDELTADeltaIDGet(deltaID: number, options?: AxiosRequestConfig): AxiosPromise<TABLEINDELTA>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEINDELTAApiInterface
     */
    tABLEINDELTAGet(options?: AxiosRequestConfig): AxiosPromise<PagedTABLEINDELTA>;

}

/**
 * TABLEINDELTAApi - object-oriented interface
 * @export
 * @class TABLEINDELTAApi
 * @extends {BaseAPI}
 */
export class TABLEINDELTAApi extends BaseAPI implements TABLEINDELTAApiInterface {
    /**
     * 
     * @param {number} deltaID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEINDELTAApi
     */
    public tABLEINDELTADeltaIDGet(deltaID: number, options?: AxiosRequestConfig) {
        return TABLEINDELTAApiFp(this.configuration).tABLEINDELTADeltaIDGet(deltaID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLEINDELTAApi
     */
    public tABLEINDELTAGet(options?: AxiosRequestConfig) {
        return TABLEINDELTAApiFp(this.configuration).tABLEINDELTAGet(options).then((request) => request(this.axios, this.basePath));
    }
}
