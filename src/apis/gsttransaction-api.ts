/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GSTTransaction } from '../models';
// @ts-ignore
import { PagedGSTTransaction } from '../models';
/**
 * GSTTransactionApi - axios parameter creator
 * @export
 */
export const GSTTransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/GSTTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GSTTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionPost: async (body: GSTTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('gSTTransactionPost', 'body', body)
            const localVarPath = `/GSTTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionTransactionIDDelete: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('gSTTransactionTransactionIDDelete', 'transactionID', transactionID)
            const localVarPath = `/GSTTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionTransactionIDGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('gSTTransactionTransactionIDGet', 'transactionID', transactionID)
            const localVarPath = `/GSTTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {GSTTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionTransactionIDPatch: async (transactionID: number, body: GSTTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('gSTTransactionTransactionIDPatch', 'transactionID', transactionID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('gSTTransactionTransactionIDPatch', 'body', body)
            const localVarPath = `/GSTTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {GSTTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionTransactionIDPut: async (transactionID: number, body: GSTTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('gSTTransactionTransactionIDPut', 'transactionID', transactionID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('gSTTransactionTransactionIDPut', 'body', body)
            const localVarPath = `/GSTTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GSTTransactionApi - functional programming interface
 * @export
 */
export const GSTTransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GSTTransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gSTTransactionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedGSTTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gSTTransactionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GSTTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gSTTransactionPost(body: GSTTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gSTTransactionPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gSTTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gSTTransactionTransactionIDDelete(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gSTTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GSTTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gSTTransactionTransactionIDGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {GSTTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gSTTransactionTransactionIDPatch(transactionID: number, body: GSTTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gSTTransactionTransactionIDPatch(transactionID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {GSTTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gSTTransactionTransactionIDPut(transactionID: number, body: GSTTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gSTTransactionTransactionIDPut(transactionID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GSTTransactionApi - factory interface
 * @export
 */
export const GSTTransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GSTTransactionApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionGet(options?: any): AxiosPromise<PagedGSTTransaction> {
            return localVarFp.gSTTransactionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GSTTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionPost(body: GSTTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.gSTTransactionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionTransactionIDDelete(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.gSTTransactionTransactionIDDelete(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionTransactionIDGet(transactionID: number, options?: any): AxiosPromise<GSTTransaction> {
            return localVarFp.gSTTransactionTransactionIDGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {GSTTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionTransactionIDPatch(transactionID: number, body: GSTTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.gSTTransactionTransactionIDPatch(transactionID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {GSTTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gSTTransactionTransactionIDPut(transactionID: number, body: GSTTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.gSTTransactionTransactionIDPut(transactionID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GSTTransactionApi - interface
 * @export
 * @interface GSTTransactionApi
 */
export interface GSTTransactionApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApiInterface
     */
    gSTTransactionGet(options?: AxiosRequestConfig): AxiosPromise<PagedGSTTransaction>;

    /**
     * 
     * @param {GSTTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApiInterface
     */
    gSTTransactionPost(body: GSTTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApiInterface
     */
    gSTTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApiInterface
     */
    gSTTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<GSTTransaction>;

    /**
     * 
     * @param {number} transactionID 
     * @param {GSTTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApiInterface
     */
    gSTTransactionTransactionIDPatch(transactionID: number, body: GSTTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {GSTTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApiInterface
     */
    gSTTransactionTransactionIDPut(transactionID: number, body: GSTTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * GSTTransactionApi - object-oriented interface
 * @export
 * @class GSTTransactionApi
 * @extends {BaseAPI}
 */
export class GSTTransactionApi extends BaseAPI implements GSTTransactionApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApi
     */
    public gSTTransactionGet(options?: AxiosRequestConfig) {
        return GSTTransactionApiFp(this.configuration).gSTTransactionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GSTTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApi
     */
    public gSTTransactionPost(body: GSTTransaction, options?: AxiosRequestConfig) {
        return GSTTransactionApiFp(this.configuration).gSTTransactionPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApi
     */
    public gSTTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig) {
        return GSTTransactionApiFp(this.configuration).gSTTransactionTransactionIDDelete(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApi
     */
    public gSTTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig) {
        return GSTTransactionApiFp(this.configuration).gSTTransactionTransactionIDGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {GSTTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApi
     */
    public gSTTransactionTransactionIDPatch(transactionID: number, body: GSTTransaction, options?: AxiosRequestConfig) {
        return GSTTransactionApiFp(this.configuration).gSTTransactionTransactionIDPatch(transactionID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {GSTTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GSTTransactionApi
     */
    public gSTTransactionTransactionIDPut(transactionID: number, body: GSTTransaction, options?: AxiosRequestConfig) {
        return GSTTransactionApiFp(this.configuration).gSTTransactionTransactionIDPut(transactionID, body, options).then((request) => request(this.axios, this.basePath));
    }
}
