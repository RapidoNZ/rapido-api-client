/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { ValueResponse } from "../models/valueResponse";
// @ts-ignore
// import { APAllocation } from "../models";
/**
 * ScriptExecutionApi - axios parameter creator
 * @export
 */
export const ScriptExecutionApixiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} query
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scriptExecutionApiPost: async (
      scriptName: string,
      body: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'query' is not null or undefined
      assertParamExists("scriptExecutionPost", "scriptName", scriptName);
      const localVarPath = `/PlayScript`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const payload = {
        ScriptFileName: scriptName,
        OutputStyle: "JSON",
        ...body,
      };

      localVarRequestOptions.data = serializeDataIfNeeded(
        payload,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 *ScriptExecutionApi - functional programming interface
 * @export
 */
export const ScriptExecutionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ScriptExecutionApixiosParamCreator(configuration);
  return {
    async scriptExecutionApiPost(
      scriptName: string,
      body: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValueResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.scriptExecutionApiPost(
          scriptName,
          body,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ScriptExecutionApi - factory interface
 * @export
 */
export const ScriptExecutionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ScriptExecutionApiFp(configuration);
  return {
    /**
     *
     * @param {string} scriptName
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scriptExecutionApiPost(
      scriptName: string,
      body: any,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .scriptExecutionApiPost(scriptName, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ScriptExecutionApi - interface
 * @export
 * @interface ScriptExecutionApi
 */
export interface ScriptExecutionApiInterface {
  /**
   *
   * @param {string} scriptName
   * @param {any} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptExecutionApiInterface
   */
  scriptExecutionApiPost(
    scriptName: string,
    body: any,
    options?: AxiosRequestConfig
  ): AxiosPromise<any>;
}

/**
 * ScriptExecutionApi - object-oriented interface
 * @export
 * @class ScriptExecutionApi
 * @extends {BaseAPI}
 */
export class ScriptExecutionApi
  extends BaseAPI
  implements ScriptExecutionApiInterface
{
  /**
   *
   * @param {string} scriptName
   * @param {any} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecuteScriptAPI
   */
  public scriptExecutionApiPost(
    scriptName: string,
    body: any,
    options?: AxiosRequestConfig
  ) {
    return ScriptExecutionApiFp(this.configuration)
      .scriptExecutionApiPost(scriptName, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
