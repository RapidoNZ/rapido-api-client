/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagedSPWho } from '../models';
// @ts-ignore
import { SPWho } from '../models';
/**
 * SPWhoApi - axios parameter creator
 * @export
 */
export const SPWhoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPWhoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SPWho`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} sortOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPWhoSortOrderGet: async (sortOrder: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sortOrder' is not null or undefined
            assertParamExists('sPWhoSortOrderGet', 'sortOrder', sortOrder)
            const localVarPath = `/SPWho('{SortOrder}')`
                .replace(`{${"SortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} sortOrder 
         * @param {SPWho} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPWhoSortOrderPatch: async (sortOrder: number, body: SPWho, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sortOrder' is not null or undefined
            assertParamExists('sPWhoSortOrderPatch', 'sortOrder', sortOrder)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('sPWhoSortOrderPatch', 'body', body)
            const localVarPath = `/SPWho('{SortOrder}')`
                .replace(`{${"SortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} sortOrder 
         * @param {SPWho} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPWhoSortOrderPut: async (sortOrder: number, body: SPWho, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sortOrder' is not null or undefined
            assertParamExists('sPWhoSortOrderPut', 'sortOrder', sortOrder)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('sPWhoSortOrderPut', 'body', body)
            const localVarPath = `/SPWho('{SortOrder}')`
                .replace(`{${"SortOrder"}}`, encodeURIComponent(String(sortOrder)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SPWhoApi - functional programming interface
 * @export
 */
export const SPWhoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SPWhoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPWhoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedSPWho>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPWhoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} sortOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPWhoSortOrderGet(sortOrder: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SPWho>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPWhoSortOrderGet(sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} sortOrder 
         * @param {SPWho} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPWhoSortOrderPatch(sortOrder: number, body: SPWho, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPWhoSortOrderPatch(sortOrder, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} sortOrder 
         * @param {SPWho} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sPWhoSortOrderPut(sortOrder: number, body: SPWho, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sPWhoSortOrderPut(sortOrder, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SPWhoApi - factory interface
 * @export
 */
export const SPWhoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SPWhoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPWhoGet(options?: any): AxiosPromise<PagedSPWho> {
            return localVarFp.sPWhoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} sortOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPWhoSortOrderGet(sortOrder: number, options?: any): AxiosPromise<SPWho> {
            return localVarFp.sPWhoSortOrderGet(sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} sortOrder 
         * @param {SPWho} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPWhoSortOrderPatch(sortOrder: number, body: SPWho, options?: any): AxiosPromise<void> {
            return localVarFp.sPWhoSortOrderPatch(sortOrder, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} sortOrder 
         * @param {SPWho} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sPWhoSortOrderPut(sortOrder: number, body: SPWho, options?: any): AxiosPromise<void> {
            return localVarFp.sPWhoSortOrderPut(sortOrder, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SPWhoApi - interface
 * @export
 * @interface SPWhoApi
 */
export interface SPWhoApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPWhoApiInterface
     */
    sPWhoGet(options?: AxiosRequestConfig): AxiosPromise<PagedSPWho>;

    /**
     * 
     * @param {number} sortOrder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPWhoApiInterface
     */
    sPWhoSortOrderGet(sortOrder: number, options?: AxiosRequestConfig): AxiosPromise<SPWho>;

    /**
     * 
     * @param {number} sortOrder 
     * @param {SPWho} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPWhoApiInterface
     */
    sPWhoSortOrderPatch(sortOrder: number, body: SPWho, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} sortOrder 
     * @param {SPWho} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPWhoApiInterface
     */
    sPWhoSortOrderPut(sortOrder: number, body: SPWho, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * SPWhoApi - object-oriented interface
 * @export
 * @class SPWhoApi
 * @extends {BaseAPI}
 */
export class SPWhoApi extends BaseAPI implements SPWhoApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPWhoApi
     */
    public sPWhoGet(options?: AxiosRequestConfig) {
        return SPWhoApiFp(this.configuration).sPWhoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} sortOrder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPWhoApi
     */
    public sPWhoSortOrderGet(sortOrder: number, options?: AxiosRequestConfig) {
        return SPWhoApiFp(this.configuration).sPWhoSortOrderGet(sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} sortOrder 
     * @param {SPWho} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPWhoApi
     */
    public sPWhoSortOrderPatch(sortOrder: number, body: SPWho, options?: AxiosRequestConfig) {
        return SPWhoApiFp(this.configuration).sPWhoSortOrderPatch(sortOrder, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} sortOrder 
     * @param {SPWho} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SPWhoApi
     */
    public sPWhoSortOrderPut(sortOrder: number, body: SPWho, options?: AxiosRequestConfig) {
        return SPWhoApiFp(this.configuration).sPWhoSortOrderPut(sortOrder, body, options).then((request) => request(this.axios, this.basePath));
    }
}
