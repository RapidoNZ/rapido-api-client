/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { COBankingMedia } from '../models';
// @ts-ignore
import { PagedCOBankingMedia } from '../models';
/**
 * COBankingMediaApi - axios parameter creator
 * @export
 */
export const COBankingMediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/COBankingMedia`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaMediaCodeDelete: async (mediaCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaCode' is not null or undefined
            assertParamExists('cOBankingMediaMediaCodeDelete', 'mediaCode', mediaCode)
            const localVarPath = `/COBankingMedia('{MediaCode}')`
                .replace(`{${"MediaCode"}}`, encodeURIComponent(String(mediaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaMediaCodeGet: async (mediaCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaCode' is not null or undefined
            assertParamExists('cOBankingMediaMediaCodeGet', 'mediaCode', mediaCode)
            const localVarPath = `/COBankingMedia('{MediaCode}')`
                .replace(`{${"MediaCode"}}`, encodeURIComponent(String(mediaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {COBankingMedia} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaMediaCodePatch: async (mediaCode: string, body: COBankingMedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaCode' is not null or undefined
            assertParamExists('cOBankingMediaMediaCodePatch', 'mediaCode', mediaCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOBankingMediaMediaCodePatch', 'body', body)
            const localVarPath = `/COBankingMedia('{MediaCode}')`
                .replace(`{${"MediaCode"}}`, encodeURIComponent(String(mediaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {COBankingMedia} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaMediaCodePut: async (mediaCode: string, body: COBankingMedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaCode' is not null or undefined
            assertParamExists('cOBankingMediaMediaCodePut', 'mediaCode', mediaCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOBankingMediaMediaCodePut', 'body', body)
            const localVarPath = `/COBankingMedia('{MediaCode}')`
                .replace(`{${"MediaCode"}}`, encodeURIComponent(String(mediaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {COBankingMedia} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaPost: async (body: COBankingMedia, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cOBankingMediaPost', 'body', body)
            const localVarPath = `/COBankingMedia`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * COBankingMediaApi - functional programming interface
 * @export
 */
export const COBankingMediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = COBankingMediaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBankingMediaGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCOBankingMedia>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBankingMediaGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBankingMediaMediaCodeDelete(mediaCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBankingMediaMediaCodeDelete(mediaCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBankingMediaMediaCodeGet(mediaCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<COBankingMedia>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBankingMediaMediaCodeGet(mediaCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {COBankingMedia} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBankingMediaMediaCodePatch(mediaCode: string, body: COBankingMedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBankingMediaMediaCodePatch(mediaCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {COBankingMedia} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBankingMediaMediaCodePut(mediaCode: string, body: COBankingMedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBankingMediaMediaCodePut(mediaCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {COBankingMedia} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cOBankingMediaPost(body: COBankingMedia, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cOBankingMediaPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * COBankingMediaApi - factory interface
 * @export
 */
export const COBankingMediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = COBankingMediaApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaGet(options?: any): AxiosPromise<PagedCOBankingMedia> {
            return localVarFp.cOBankingMediaGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaMediaCodeDelete(mediaCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.cOBankingMediaMediaCodeDelete(mediaCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaMediaCodeGet(mediaCode: string, options?: any): AxiosPromise<COBankingMedia> {
            return localVarFp.cOBankingMediaMediaCodeGet(mediaCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {COBankingMedia} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaMediaCodePatch(mediaCode: string, body: COBankingMedia, options?: any): AxiosPromise<void> {
            return localVarFp.cOBankingMediaMediaCodePatch(mediaCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mediaCode 
         * @param {COBankingMedia} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaMediaCodePut(mediaCode: string, body: COBankingMedia, options?: any): AxiosPromise<void> {
            return localVarFp.cOBankingMediaMediaCodePut(mediaCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {COBankingMedia} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cOBankingMediaPost(body: COBankingMedia, options?: any): AxiosPromise<void> {
            return localVarFp.cOBankingMediaPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * COBankingMediaApi - interface
 * @export
 * @interface COBankingMediaApi
 */
export interface COBankingMediaApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApiInterface
     */
    cOBankingMediaGet(options?: AxiosRequestConfig): AxiosPromise<PagedCOBankingMedia>;

    /**
     * 
     * @param {string} mediaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApiInterface
     */
    cOBankingMediaMediaCodeDelete(mediaCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} mediaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApiInterface
     */
    cOBankingMediaMediaCodeGet(mediaCode: string, options?: AxiosRequestConfig): AxiosPromise<COBankingMedia>;

    /**
     * 
     * @param {string} mediaCode 
     * @param {COBankingMedia} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApiInterface
     */
    cOBankingMediaMediaCodePatch(mediaCode: string, body: COBankingMedia, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} mediaCode 
     * @param {COBankingMedia} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApiInterface
     */
    cOBankingMediaMediaCodePut(mediaCode: string, body: COBankingMedia, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {COBankingMedia} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApiInterface
     */
    cOBankingMediaPost(body: COBankingMedia, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * COBankingMediaApi - object-oriented interface
 * @export
 * @class COBankingMediaApi
 * @extends {BaseAPI}
 */
export class COBankingMediaApi extends BaseAPI implements COBankingMediaApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApi
     */
    public cOBankingMediaGet(options?: AxiosRequestConfig) {
        return COBankingMediaApiFp(this.configuration).cOBankingMediaGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mediaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApi
     */
    public cOBankingMediaMediaCodeDelete(mediaCode: string, options?: AxiosRequestConfig) {
        return COBankingMediaApiFp(this.configuration).cOBankingMediaMediaCodeDelete(mediaCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mediaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApi
     */
    public cOBankingMediaMediaCodeGet(mediaCode: string, options?: AxiosRequestConfig) {
        return COBankingMediaApiFp(this.configuration).cOBankingMediaMediaCodeGet(mediaCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mediaCode 
     * @param {COBankingMedia} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApi
     */
    public cOBankingMediaMediaCodePatch(mediaCode: string, body: COBankingMedia, options?: AxiosRequestConfig) {
        return COBankingMediaApiFp(this.configuration).cOBankingMediaMediaCodePatch(mediaCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mediaCode 
     * @param {COBankingMedia} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApi
     */
    public cOBankingMediaMediaCodePut(mediaCode: string, body: COBankingMedia, options?: AxiosRequestConfig) {
        return COBankingMediaApiFp(this.configuration).cOBankingMediaMediaCodePut(mediaCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {COBankingMedia} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof COBankingMediaApi
     */
    public cOBankingMediaPost(body: COBankingMedia, options?: AxiosRequestConfig) {
        return COBankingMediaApiFp(this.configuration).cOBankingMediaPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
