/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARContact } from '../models';
// @ts-ignore
import { PagedARContact } from '../models';
/**
 * ARContactApi - axios parameter creator
 * @export
 */
export const ARContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactContactIDDelete: async (contactID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactID' is not null or undefined
            assertParamExists('aRContactContactIDDelete', 'contactID', contactID)
            const localVarPath = `/ARContact('{ContactID}')`
                .replace(`{${"ContactID"}}`, encodeURIComponent(String(contactID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactContactIDGet: async (contactID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactID' is not null or undefined
            assertParamExists('aRContactContactIDGet', 'contactID', contactID)
            const localVarPath = `/ARContact('{ContactID}')`
                .replace(`{${"ContactID"}}`, encodeURIComponent(String(contactID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} contactID 
         * @param {ARContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactContactIDPatch: async (contactID: number, body: ARContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactID' is not null or undefined
            assertParamExists('aRContactContactIDPatch', 'contactID', contactID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRContactContactIDPatch', 'body', body)
            const localVarPath = `/ARContact('{ContactID}')`
                .replace(`{${"ContactID"}}`, encodeURIComponent(String(contactID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} contactID 
         * @param {ARContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactContactIDPut: async (contactID: number, body: ARContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactID' is not null or undefined
            assertParamExists('aRContactContactIDPut', 'contactID', contactID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRContactContactIDPut', 'body', body)
            const localVarPath = `/ARContact('{ContactID}')`
                .replace(`{${"ContactID"}}`, encodeURIComponent(String(contactID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARContact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ARContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactPost: async (body: ARContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRContactPost', 'body', body)
            const localVarPath = `/ARContact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARContactApi - functional programming interface
 * @export
 */
export const ARContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARContactApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRContactContactIDDelete(contactID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRContactContactIDDelete(contactID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRContactContactIDGet(contactID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRContactContactIDGet(contactID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} contactID 
         * @param {ARContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRContactContactIDPatch(contactID: number, body: ARContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRContactContactIDPatch(contactID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} contactID 
         * @param {ARContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRContactContactIDPut(contactID: number, body: ARContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRContactContactIDPut(contactID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRContactGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRContactGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ARContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRContactPost(body: ARContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRContactPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARContactApi - factory interface
 * @export
 */
export const ARContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARContactApiFp(configuration)
    return {
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactContactIDDelete(contactID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aRContactContactIDDelete(contactID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactContactIDGet(contactID: number, options?: any): AxiosPromise<ARContact> {
            return localVarFp.aRContactContactIDGet(contactID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} contactID 
         * @param {ARContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactContactIDPatch(contactID: number, body: ARContact, options?: any): AxiosPromise<void> {
            return localVarFp.aRContactContactIDPatch(contactID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} contactID 
         * @param {ARContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactContactIDPut(contactID: number, body: ARContact, options?: any): AxiosPromise<void> {
            return localVarFp.aRContactContactIDPut(contactID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactGet(options?: any): AxiosPromise<PagedARContact> {
            return localVarFp.aRContactGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ARContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRContactPost(body: ARContact, options?: any): AxiosPromise<void> {
            return localVarFp.aRContactPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARContactApi - interface
 * @export
 * @interface ARContactApi
 */
export interface ARContactApiInterface {
    /**
     * 
     * @param {number} contactID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApiInterface
     */
    aRContactContactIDDelete(contactID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} contactID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApiInterface
     */
    aRContactContactIDGet(contactID: number, options?: AxiosRequestConfig): AxiosPromise<ARContact>;

    /**
     * 
     * @param {number} contactID 
     * @param {ARContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApiInterface
     */
    aRContactContactIDPatch(contactID: number, body: ARContact, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} contactID 
     * @param {ARContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApiInterface
     */
    aRContactContactIDPut(contactID: number, body: ARContact, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApiInterface
     */
    aRContactGet(options?: AxiosRequestConfig): AxiosPromise<PagedARContact>;

    /**
     * 
     * @param {ARContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApiInterface
     */
    aRContactPost(body: ARContact, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ARContactApi - object-oriented interface
 * @export
 * @class ARContactApi
 * @extends {BaseAPI}
 */
export class ARContactApi extends BaseAPI implements ARContactApiInterface {
    /**
     * 
     * @param {number} contactID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApi
     */
    public aRContactContactIDDelete(contactID: number, options?: AxiosRequestConfig) {
        return ARContactApiFp(this.configuration).aRContactContactIDDelete(contactID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} contactID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApi
     */
    public aRContactContactIDGet(contactID: number, options?: AxiosRequestConfig) {
        return ARContactApiFp(this.configuration).aRContactContactIDGet(contactID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} contactID 
     * @param {ARContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApi
     */
    public aRContactContactIDPatch(contactID: number, body: ARContact, options?: AxiosRequestConfig) {
        return ARContactApiFp(this.configuration).aRContactContactIDPatch(contactID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} contactID 
     * @param {ARContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApi
     */
    public aRContactContactIDPut(contactID: number, body: ARContact, options?: AxiosRequestConfig) {
        return ARContactApiFp(this.configuration).aRContactContactIDPut(contactID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApi
     */
    public aRContactGet(options?: AxiosRequestConfig) {
        return ARContactApiFp(this.configuration).aRContactGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ARContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARContactApi
     */
    public aRContactPost(body: ARContact, options?: AxiosRequestConfig) {
        return ARContactApiFp(this.configuration).aRContactPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
