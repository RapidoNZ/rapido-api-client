/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APShipments } from '../models';
// @ts-ignore
import { PagedAPShipments } from '../models';
/**
 * APShipmentsApi - axios parameter creator
 * @export
 */
export const APShipmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDDelete: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDDelete', 'documentID', documentID)
            const localVarPath = `/APShipments('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APShipments/DuplicateContra is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDDuplicateContraGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDDuplicateContraGet', 'documentID', documentID)
            const localVarPath = `/APShipments('{DocumentID}')/DuplicateContra`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APShipments/Duplicate is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDDuplicateGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDDuplicateGet', 'documentID', documentID)
            const localVarPath = `/APShipments('{DocumentID}')/Duplicate`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDGet', 'documentID', documentID)
            const localVarPath = `/APShipments('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {APShipments} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPatch: async (documentID: number, body: APShipments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDPatch', 'documentID', documentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDPatch', 'body', body)
            const localVarPath = `/APShipments('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APShipments/PostInvoice is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPostInvoicePost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDPostInvoicePost', 'documentID', documentID)
            const localVarPath = `/APShipments('{DocumentID}')/PostInvoice`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APShipments/PostReceipts is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPostReceiptsPost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDPostReceiptsPost', 'documentID', documentID)
            const localVarPath = `/APShipments('{DocumentID}')/PostReceipts`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APShipments/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPrintGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDPrintGet', 'documentID', documentID)
            const localVarPath = `/APShipments('{DocumentID}')/Print`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APShipments/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPrintProductLabelsGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDPrintProductLabelsGet', 'documentID', documentID)
            const localVarPath = `/APShipments('{DocumentID}')/PrintProductLabels`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {APShipments} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPut: async (documentID: number, body: APShipments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDPut', 'documentID', documentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPShipmentsDocumentIDPut', 'body', body)
            const localVarPath = `/APShipments('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/APShipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {APShipments} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsPost: async (body: APShipments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPShipmentsPost', 'body', body)
            const localVarPath = `/APShipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APShipmentsApi - functional programming interface
 * @export
 */
export const APShipmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APShipmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDDelete(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDDelete(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APShipments/DuplicateContra is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDDuplicateContraGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDDuplicateContraGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APShipments/Duplicate is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDDuplicateGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDDuplicateGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APShipments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {APShipments} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDPatch(documentID: number, body: APShipments, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDPatch(documentID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APShipments/PostInvoice is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDPostInvoicePost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDPostInvoicePost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APShipments/PostReceipts is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDPostReceiptsPost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDPostReceiptsPost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APShipments/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APShipments/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDPrintProductLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {APShipments} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsDocumentIDPut(documentID: number, body: APShipments, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsDocumentIDPut(documentID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedAPShipments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {APShipments} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPShipmentsPost(body: APShipments, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPShipmentsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APShipmentsApi - factory interface
 * @export
 */
export const APShipmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APShipmentsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDDelete(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsDocumentIDDelete(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * APShipments/DuplicateContra is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDDuplicateContraGet(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsDocumentIDDuplicateContraGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * APShipments/Duplicate is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDDuplicateGet(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsDocumentIDDuplicateGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDGet(documentID: number, options?: any): AxiosPromise<APShipments> {
            return localVarFp.aPShipmentsDocumentIDGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {APShipments} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPatch(documentID: number, body: APShipments, options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsDocumentIDPatch(documentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * APShipments/PostInvoice is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPostInvoicePost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsDocumentIDPostInvoicePost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * APShipments/PostReceipts is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPostReceiptsPost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsDocumentIDPostReceiptsPost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * APShipments/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * APShipments/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsDocumentIDPrintProductLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {APShipments} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsDocumentIDPut(documentID: number, body: APShipments, options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsDocumentIDPut(documentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsGet(options?: any): AxiosPromise<PagedAPShipments> {
            return localVarFp.aPShipmentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APShipments} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPShipmentsPost(body: APShipments, options?: any): AxiosPromise<void> {
            return localVarFp.aPShipmentsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APShipmentsApi - interface
 * @export
 * @interface APShipmentsApi
 */
export interface APShipmentsApiInterface {
    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDDelete(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APShipments/DuplicateContra is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDDuplicateContraGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APShipments/Duplicate is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDDuplicateGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<APShipments>;

    /**
     * 
     * @param {number} documentID 
     * @param {APShipments} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDPatch(documentID: number, body: APShipments, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APShipments/PostInvoice is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDPostInvoicePost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APShipments/PostReceipts is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDPostReceiptsPost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APShipments/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APShipments/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {APShipments} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsDocumentIDPut(documentID: number, body: APShipments, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsGet(options?: AxiosRequestConfig): AxiosPromise<PagedAPShipments>;

    /**
     * 
     * @param {APShipments} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApiInterface
     */
    aPShipmentsPost(body: APShipments, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * APShipmentsApi - object-oriented interface
 * @export
 * @class APShipmentsApi
 * @extends {BaseAPI}
 */
export class APShipmentsApi extends BaseAPI implements APShipmentsApiInterface {
    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDDelete(documentID: number, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDDelete(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APShipments/DuplicateContra is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDDuplicateContraGet(documentID: number, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDDuplicateContraGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APShipments/Duplicate is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDDuplicateGet(documentID: number, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDDuplicateGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDGet(documentID: number, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {APShipments} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDPatch(documentID: number, body: APShipments, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDPatch(documentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APShipments/PostInvoice is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDPostInvoicePost(documentID: number, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDPostInvoicePost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APShipments/PostReceipts is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDPostReceiptsPost(documentID: number, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDPostReceiptsPost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APShipments/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APShipments/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDPrintProductLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {APShipments} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsDocumentIDPut(documentID: number, body: APShipments, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsDocumentIDPut(documentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsGet(options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APShipments} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APShipmentsApi
     */
    public aPShipmentsPost(body: APShipments, options?: AxiosRequestConfig) {
        return APShipmentsApiFp(this.configuration).aPShipmentsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
