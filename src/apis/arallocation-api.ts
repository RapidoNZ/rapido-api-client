/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARAllocation } from '../models';
// @ts-ignore
import { PagedARAllocation } from '../models';
/**
 * ARAllocationApi - axios parameter creator
 * @export
 */
export const ARAllocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} allocationID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocationAllocationIDDelete: async (allocationID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'allocationID' is not null or undefined
            assertParamExists('aRAllocationAllocationIDDelete', 'allocationID', allocationID)
            const localVarPath = `/ARAllocation('{AllocationID}')`
                .replace(`{${"AllocationID"}}`, encodeURIComponent(String(allocationID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} allocationID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocationAllocationIDGet: async (allocationID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'allocationID' is not null or undefined
            assertParamExists('aRAllocationAllocationIDGet', 'allocationID', allocationID)
            const localVarPath = `/ARAllocation('{AllocationID}')`
                .replace(`{${"AllocationID"}}`, encodeURIComponent(String(allocationID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARAllocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARAllocationApi - functional programming interface
 * @export
 */
export const ARAllocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARAllocationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} allocationID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRAllocationAllocationIDDelete(allocationID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRAllocationAllocationIDDelete(allocationID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} allocationID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRAllocationAllocationIDGet(allocationID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARAllocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRAllocationAllocationIDGet(allocationID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRAllocationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARAllocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRAllocationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARAllocationApi - factory interface
 * @export
 */
export const ARAllocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARAllocationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} allocationID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocationAllocationIDDelete(allocationID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aRAllocationAllocationIDDelete(allocationID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} allocationID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocationAllocationIDGet(allocationID: number, options?: any): AxiosPromise<ARAllocation> {
            return localVarFp.aRAllocationAllocationIDGet(allocationID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRAllocationGet(options?: any): AxiosPromise<PagedARAllocation> {
            return localVarFp.aRAllocationGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARAllocationApi - interface
 * @export
 * @interface ARAllocationApi
 */
export interface ARAllocationApiInterface {
    /**
     * 
     * @param {number} allocationID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARAllocationApiInterface
     */
    aRAllocationAllocationIDDelete(allocationID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} allocationID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARAllocationApiInterface
     */
    aRAllocationAllocationIDGet(allocationID: number, options?: AxiosRequestConfig): AxiosPromise<ARAllocation>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARAllocationApiInterface
     */
    aRAllocationGet(options?: AxiosRequestConfig): AxiosPromise<PagedARAllocation>;

}

/**
 * ARAllocationApi - object-oriented interface
 * @export
 * @class ARAllocationApi
 * @extends {BaseAPI}
 */
export class ARAllocationApi extends BaseAPI implements ARAllocationApiInterface {
    /**
     * 
     * @param {number} allocationID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARAllocationApi
     */
    public aRAllocationAllocationIDDelete(allocationID: number, options?: AxiosRequestConfig) {
        return ARAllocationApiFp(this.configuration).aRAllocationAllocationIDDelete(allocationID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} allocationID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARAllocationApi
     */
    public aRAllocationAllocationIDGet(allocationID: number, options?: AxiosRequestConfig) {
        return ARAllocationApiFp(this.configuration).aRAllocationAllocationIDGet(allocationID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARAllocationApi
     */
    public aRAllocationGet(options?: AxiosRequestConfig) {
        return ARAllocationApiFp(this.configuration).aRAllocationGet(options).then((request) => request(this.axios, this.basePath));
    }
}
