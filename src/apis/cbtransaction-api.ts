/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBTransaction } from '../models';
// @ts-ignore
import { PagedCBTransaction } from '../models';
/**
 * CBTransactionApi - axios parameter creator
 * @export
 */
export const CBTransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CBTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionPost: async (body: CBTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBTransactionPost', 'body', body)
            const localVarPath = `/CBTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDDelete: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('cBTransactionTransactionIDDelete', 'transactionID', transactionID)
            const localVarPath = `/CBTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CBTransaction/DuplicateContra is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDDuplicateContraGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('cBTransactionTransactionIDDuplicateContraGet', 'transactionID', transactionID)
            const localVarPath = `/CBTransaction('{TransactionID}')/DuplicateContra`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CBTransaction/Duplicate is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDDuplicateGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('cBTransactionTransactionIDDuplicateGet', 'transactionID', transactionID)
            const localVarPath = `/CBTransaction('{TransactionID}')/Duplicate`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('cBTransactionTransactionIDGet', 'transactionID', transactionID)
            const localVarPath = `/CBTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {CBTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDPatch: async (transactionID: number, body: CBTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('cBTransactionTransactionIDPatch', 'transactionID', transactionID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBTransactionTransactionIDPatch', 'body', body)
            const localVarPath = `/CBTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {CBTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDPut: async (transactionID: number, body: CBTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('cBTransactionTransactionIDPut', 'transactionID', transactionID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBTransactionTransactionIDPut', 'body', body)
            const localVarPath = `/CBTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBTransactionApi - functional programming interface
 * @export
 */
export const CBTransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBTransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBTransactionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBTransactionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CBTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBTransactionPost(body: CBTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBTransactionPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBTransactionTransactionIDDelete(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CBTransaction/DuplicateContra is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBTransactionTransactionIDDuplicateContraGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CBTransaction/Duplicate is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBTransactionTransactionIDDuplicateGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBTransactionTransactionIDDuplicateGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBTransactionTransactionIDGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {CBTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBTransactionTransactionIDPatch(transactionID: number, body: CBTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBTransactionTransactionIDPatch(transactionID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {CBTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBTransactionTransactionIDPut(transactionID: number, body: CBTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBTransactionTransactionIDPut(transactionID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBTransactionApi - factory interface
 * @export
 */
export const CBTransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBTransactionApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionGet(options?: any): AxiosPromise<PagedCBTransaction> {
            return localVarFp.cBTransactionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CBTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionPost(body: CBTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.cBTransactionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDDelete(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.cBTransactionTransactionIDDelete(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * CBTransaction/DuplicateContra is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.cBTransactionTransactionIDDuplicateContraGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * CBTransaction/Duplicate is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDDuplicateGet(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.cBTransactionTransactionIDDuplicateGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDGet(transactionID: number, options?: any): AxiosPromise<CBTransaction> {
            return localVarFp.cBTransactionTransactionIDGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {CBTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDPatch(transactionID: number, body: CBTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.cBTransactionTransactionIDPatch(transactionID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {CBTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBTransactionTransactionIDPut(transactionID: number, body: CBTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.cBTransactionTransactionIDPut(transactionID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBTransactionApi - interface
 * @export
 * @interface CBTransactionApi
 */
export interface CBTransactionApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApiInterface
     */
    cBTransactionGet(options?: AxiosRequestConfig): AxiosPromise<PagedCBTransaction>;

    /**
     * 
     * @param {CBTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApiInterface
     */
    cBTransactionPost(body: CBTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApiInterface
     */
    cBTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CBTransaction/DuplicateContra is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApiInterface
     */
    cBTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CBTransaction/Duplicate is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApiInterface
     */
    cBTransactionTransactionIDDuplicateGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApiInterface
     */
    cBTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<CBTransaction>;

    /**
     * 
     * @param {number} transactionID 
     * @param {CBTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApiInterface
     */
    cBTransactionTransactionIDPatch(transactionID: number, body: CBTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {CBTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApiInterface
     */
    cBTransactionTransactionIDPut(transactionID: number, body: CBTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CBTransactionApi - object-oriented interface
 * @export
 * @class CBTransactionApi
 * @extends {BaseAPI}
 */
export class CBTransactionApi extends BaseAPI implements CBTransactionApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApi
     */
    public cBTransactionGet(options?: AxiosRequestConfig) {
        return CBTransactionApiFp(this.configuration).cBTransactionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CBTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApi
     */
    public cBTransactionPost(body: CBTransaction, options?: AxiosRequestConfig) {
        return CBTransactionApiFp(this.configuration).cBTransactionPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApi
     */
    public cBTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig) {
        return CBTransactionApiFp(this.configuration).cBTransactionTransactionIDDelete(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CBTransaction/DuplicateContra is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApi
     */
    public cBTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: AxiosRequestConfig) {
        return CBTransactionApiFp(this.configuration).cBTransactionTransactionIDDuplicateContraGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CBTransaction/Duplicate is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApi
     */
    public cBTransactionTransactionIDDuplicateGet(transactionID: number, options?: AxiosRequestConfig) {
        return CBTransactionApiFp(this.configuration).cBTransactionTransactionIDDuplicateGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApi
     */
    public cBTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig) {
        return CBTransactionApiFp(this.configuration).cBTransactionTransactionIDGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {CBTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApi
     */
    public cBTransactionTransactionIDPatch(transactionID: number, body: CBTransaction, options?: AxiosRequestConfig) {
        return CBTransactionApiFp(this.configuration).cBTransactionTransactionIDPatch(transactionID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {CBTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBTransactionApi
     */
    public cBTransactionTransactionIDPut(transactionID: number, body: CBTransaction, options?: AxiosRequestConfig) {
        return CBTransactionApiFp(this.configuration).cBTransactionTransactionIDPut(transactionID, body, options).then((request) => request(this.axios, this.basePath));
    }
}
