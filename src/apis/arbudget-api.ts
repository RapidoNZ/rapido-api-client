/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARBudget } from '../models';
// @ts-ignore
import { PagedARBudget } from '../models';
/**
 * ARBudgetApi - axios parameter creator
 * @export
 */
export const ARBudgetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} customerCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRBudgetCustomerCodeGet: async (customerCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRBudgetCustomerCodeGet', 'customerCode', customerCode)
            const localVarPath = `/ARBudget('{CustomerCode}')`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRBudgetCustomerCodePatch: async (customerCode: string, body: ARBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRBudgetCustomerCodePatch', 'customerCode', customerCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRBudgetCustomerCodePatch', 'body', body)
            const localVarPath = `/ARBudget('{CustomerCode}')`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRBudgetCustomerCodePut: async (customerCode: string, body: ARBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCode' is not null or undefined
            assertParamExists('aRBudgetCustomerCodePut', 'customerCode', customerCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRBudgetCustomerCodePut', 'body', body)
            const localVarPath = `/ARBudget('{CustomerCode}')`
                .replace(`{${"CustomerCode"}}`, encodeURIComponent(String(customerCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRBudgetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARBudget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARBudgetApi - functional programming interface
 * @export
 */
export const ARBudgetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARBudgetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} customerCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRBudgetCustomerCodeGet(customerCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRBudgetCustomerCodeGet(customerCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRBudgetCustomerCodePatch(customerCode: string, body: ARBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRBudgetCustomerCodePatch(customerCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRBudgetCustomerCodePut(customerCode: string, body: ARBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRBudgetCustomerCodePut(customerCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRBudgetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRBudgetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARBudgetApi - factory interface
 * @export
 */
export const ARBudgetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARBudgetApiFp(configuration)
    return {
        /**
         * 
         * @param {string} customerCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRBudgetCustomerCodeGet(customerCode: string, options?: any): AxiosPromise<ARBudget> {
            return localVarFp.aRBudgetCustomerCodeGet(customerCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRBudgetCustomerCodePatch(customerCode: string, body: ARBudget, options?: any): AxiosPromise<void> {
            return localVarFp.aRBudgetCustomerCodePatch(customerCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerCode 
         * @param {ARBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRBudgetCustomerCodePut(customerCode: string, body: ARBudget, options?: any): AxiosPromise<void> {
            return localVarFp.aRBudgetCustomerCodePut(customerCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRBudgetGet(options?: any): AxiosPromise<PagedARBudget> {
            return localVarFp.aRBudgetGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARBudgetApi - interface
 * @export
 * @interface ARBudgetApi
 */
export interface ARBudgetApiInterface {
    /**
     * 
     * @param {string} customerCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARBudgetApiInterface
     */
    aRBudgetCustomerCodeGet(customerCode: string, options?: AxiosRequestConfig): AxiosPromise<ARBudget>;

    /**
     * 
     * @param {string} customerCode 
     * @param {ARBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARBudgetApiInterface
     */
    aRBudgetCustomerCodePatch(customerCode: string, body: ARBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} customerCode 
     * @param {ARBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARBudgetApiInterface
     */
    aRBudgetCustomerCodePut(customerCode: string, body: ARBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARBudgetApiInterface
     */
    aRBudgetGet(options?: AxiosRequestConfig): AxiosPromise<PagedARBudget>;

}

/**
 * ARBudgetApi - object-oriented interface
 * @export
 * @class ARBudgetApi
 * @extends {BaseAPI}
 */
export class ARBudgetApi extends BaseAPI implements ARBudgetApiInterface {
    /**
     * 
     * @param {string} customerCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARBudgetApi
     */
    public aRBudgetCustomerCodeGet(customerCode: string, options?: AxiosRequestConfig) {
        return ARBudgetApiFp(this.configuration).aRBudgetCustomerCodeGet(customerCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerCode 
     * @param {ARBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARBudgetApi
     */
    public aRBudgetCustomerCodePatch(customerCode: string, body: ARBudget, options?: AxiosRequestConfig) {
        return ARBudgetApiFp(this.configuration).aRBudgetCustomerCodePatch(customerCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerCode 
     * @param {ARBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARBudgetApi
     */
    public aRBudgetCustomerCodePut(customerCode: string, body: ARBudget, options?: AxiosRequestConfig) {
        return ARBudgetApiFp(this.configuration).aRBudgetCustomerCodePut(customerCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARBudgetApi
     */
    public aRBudgetGet(options?: AxiosRequestConfig) {
        return ARBudgetApiFp(this.configuration).aRBudgetGet(options).then((request) => request(this.axios, this.basePath));
    }
}
