/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARSalesPersonBudget } from '../models';
// @ts-ignore
import { PagedARSalesPersonBudget } from '../models';
/**
 * ARSalesPersonBudgetApi - axios parameter creator
 * @export
 */
export const ARSalesPersonBudgetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonBudgetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARSalesPersonBudget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonBudgetSalesPersonCodeGet: async (salesPersonCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesPersonCode' is not null or undefined
            assertParamExists('aRSalesPersonBudgetSalesPersonCodeGet', 'salesPersonCode', salesPersonCode)
            const localVarPath = `/ARSalesPersonBudget('{SalesPersonCode}')`
                .replace(`{${"SalesPersonCode"}}`, encodeURIComponent(String(salesPersonCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPersonBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonBudgetSalesPersonCodePatch: async (salesPersonCode: string, body: ARSalesPersonBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesPersonCode' is not null or undefined
            assertParamExists('aRSalesPersonBudgetSalesPersonCodePatch', 'salesPersonCode', salesPersonCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesPersonBudgetSalesPersonCodePatch', 'body', body)
            const localVarPath = `/ARSalesPersonBudget('{SalesPersonCode}')`
                .replace(`{${"SalesPersonCode"}}`, encodeURIComponent(String(salesPersonCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPersonBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonBudgetSalesPersonCodePut: async (salesPersonCode: string, body: ARSalesPersonBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesPersonCode' is not null or undefined
            assertParamExists('aRSalesPersonBudgetSalesPersonCodePut', 'salesPersonCode', salesPersonCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesPersonBudgetSalesPersonCodePut', 'body', body)
            const localVarPath = `/ARSalesPersonBudget('{SalesPersonCode}')`
                .replace(`{${"SalesPersonCode"}}`, encodeURIComponent(String(salesPersonCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARSalesPersonBudgetApi - functional programming interface
 * @export
 */
export const ARSalesPersonBudgetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARSalesPersonBudgetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonBudgetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARSalesPersonBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonBudgetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonBudgetSalesPersonCodeGet(salesPersonCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARSalesPersonBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonBudgetSalesPersonCodeGet(salesPersonCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPersonBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonBudgetSalesPersonCodePatch(salesPersonCode: string, body: ARSalesPersonBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonBudgetSalesPersonCodePatch(salesPersonCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPersonBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesPersonBudgetSalesPersonCodePut(salesPersonCode: string, body: ARSalesPersonBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesPersonBudgetSalesPersonCodePut(salesPersonCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARSalesPersonBudgetApi - factory interface
 * @export
 */
export const ARSalesPersonBudgetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARSalesPersonBudgetApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonBudgetGet(options?: any): AxiosPromise<PagedARSalesPersonBudget> {
            return localVarFp.aRSalesPersonBudgetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonBudgetSalesPersonCodeGet(salesPersonCode: string, options?: any): AxiosPromise<ARSalesPersonBudget> {
            return localVarFp.aRSalesPersonBudgetSalesPersonCodeGet(salesPersonCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPersonBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonBudgetSalesPersonCodePatch(salesPersonCode: string, body: ARSalesPersonBudget, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesPersonBudgetSalesPersonCodePatch(salesPersonCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesPersonCode 
         * @param {ARSalesPersonBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesPersonBudgetSalesPersonCodePut(salesPersonCode: string, body: ARSalesPersonBudget, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesPersonBudgetSalesPersonCodePut(salesPersonCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARSalesPersonBudgetApi - interface
 * @export
 * @interface ARSalesPersonBudgetApi
 */
export interface ARSalesPersonBudgetApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonBudgetApiInterface
     */
    aRSalesPersonBudgetGet(options?: AxiosRequestConfig): AxiosPromise<PagedARSalesPersonBudget>;

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonBudgetApiInterface
     */
    aRSalesPersonBudgetSalesPersonCodeGet(salesPersonCode: string, options?: AxiosRequestConfig): AxiosPromise<ARSalesPersonBudget>;

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {ARSalesPersonBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonBudgetApiInterface
     */
    aRSalesPersonBudgetSalesPersonCodePatch(salesPersonCode: string, body: ARSalesPersonBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {ARSalesPersonBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonBudgetApiInterface
     */
    aRSalesPersonBudgetSalesPersonCodePut(salesPersonCode: string, body: ARSalesPersonBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ARSalesPersonBudgetApi - object-oriented interface
 * @export
 * @class ARSalesPersonBudgetApi
 * @extends {BaseAPI}
 */
export class ARSalesPersonBudgetApi extends BaseAPI implements ARSalesPersonBudgetApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonBudgetApi
     */
    public aRSalesPersonBudgetGet(options?: AxiosRequestConfig) {
        return ARSalesPersonBudgetApiFp(this.configuration).aRSalesPersonBudgetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonBudgetApi
     */
    public aRSalesPersonBudgetSalesPersonCodeGet(salesPersonCode: string, options?: AxiosRequestConfig) {
        return ARSalesPersonBudgetApiFp(this.configuration).aRSalesPersonBudgetSalesPersonCodeGet(salesPersonCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {ARSalesPersonBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonBudgetApi
     */
    public aRSalesPersonBudgetSalesPersonCodePatch(salesPersonCode: string, body: ARSalesPersonBudget, options?: AxiosRequestConfig) {
        return ARSalesPersonBudgetApiFp(this.configuration).aRSalesPersonBudgetSalesPersonCodePatch(salesPersonCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesPersonCode 
     * @param {ARSalesPersonBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesPersonBudgetApi
     */
    public aRSalesPersonBudgetSalesPersonCodePut(salesPersonCode: string, body: ARSalesPersonBudget, options?: AxiosRequestConfig) {
        return ARSalesPersonBudgetApiFp(this.configuration).aRSalesPersonBudgetSalesPersonCodePut(salesPersonCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
