/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ICTransfer } from '../models';
// @ts-ignore
import { PagedICTransfer } from '../models';
/**
 * ICTransferApi - axios parameter creator
 * @export
 */
export const ICTransferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDDelete: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDDelete', 'documentID', documentID)
            const localVarPath = `/ICTransfer('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICTransfer/Dispatch is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDDispatchPost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDDispatchPost', 'documentID', documentID)
            const localVarPath = `/ICTransfer('{DocumentID}')/Dispatch`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDGet', 'documentID', documentID)
            const localVarPath = `/ICTransfer('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {ICTransfer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPatch: async (documentID: number, body: ICTransfer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDPatch', 'documentID', documentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCTransferDocumentIDPatch', 'body', body)
            const localVarPath = `/ICTransfer('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICTransfer/PrintDispatchLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPrintDispatchLabelsGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDPrintDispatchLabelsGet', 'documentID', documentID)
            const localVarPath = `/ICTransfer('{DocumentID}')/PrintDispatchLabels`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICTransfer/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPrintGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDPrintGet', 'documentID', documentID)
            const localVarPath = `/ICTransfer('{DocumentID}')/Print`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICTransfer/PrintReceiptLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPrintReceiptLabelsGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDPrintReceiptLabelsGet', 'documentID', documentID)
            const localVarPath = `/ICTransfer('{DocumentID}')/PrintReceiptLabels`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {ICTransfer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPut: async (documentID: number, body: ICTransfer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDPut', 'documentID', documentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCTransferDocumentIDPut', 'body', body)
            const localVarPath = `/ICTransfer('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICTransfer/Receipt is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDReceiptPost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDReceiptPost', 'documentID', documentID)
            const localVarPath = `/ICTransfer('{DocumentID}')/Receipt`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ICTransfer/Transfer is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDTransferPost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iCTransferDocumentIDTransferPost', 'documentID', documentID)
            const localVarPath = `/ICTransfer('{DocumentID}')/Transfer`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ICTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICTransfer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferPost: async (body: ICTransfer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCTransferPost', 'body', body)
            const localVarPath = `/ICTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ICTransferApi - functional programming interface
 * @export
 */
export const ICTransferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ICTransferApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDDelete(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDDelete(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICTransfer/Dispatch is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDDispatchPost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDDispatchPost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICTransfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {ICTransfer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDPatch(documentID: number, body: ICTransfer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDPatch(documentID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICTransfer/PrintDispatchLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDPrintDispatchLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDPrintDispatchLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICTransfer/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICTransfer/PrintReceiptLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDPrintReceiptLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDPrintReceiptLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {ICTransfer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDPut(documentID: number, body: ICTransfer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDPut(documentID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICTransfer/Receipt is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDReceiptPost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDReceiptPost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ICTransfer/Transfer is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferDocumentIDTransferPost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferDocumentIDTransferPost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedICTransfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ICTransfer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCTransferPost(body: ICTransfer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCTransferPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ICTransferApi - factory interface
 * @export
 */
export const ICTransferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ICTransferApiFp(configuration)
    return {
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDDelete(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferDocumentIDDelete(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * ICTransfer/Dispatch is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDDispatchPost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferDocumentIDDispatchPost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDGet(documentID: number, options?: any): AxiosPromise<ICTransfer> {
            return localVarFp.iCTransferDocumentIDGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {ICTransfer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPatch(documentID: number, body: ICTransfer, options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferDocumentIDPatch(documentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * ICTransfer/PrintDispatchLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPrintDispatchLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferDocumentIDPrintDispatchLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * ICTransfer/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * ICTransfer/PrintReceiptLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPrintReceiptLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferDocumentIDPrintReceiptLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {ICTransfer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDPut(documentID: number, body: ICTransfer, options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferDocumentIDPut(documentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * ICTransfer/Receipt is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDReceiptPost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferDocumentIDReceiptPost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * ICTransfer/Transfer is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferDocumentIDTransferPost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferDocumentIDTransferPost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferGet(options?: any): AxiosPromise<PagedICTransfer> {
            return localVarFp.iCTransferGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICTransfer} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCTransferPost(body: ICTransfer, options?: any): AxiosPromise<void> {
            return localVarFp.iCTransferPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ICTransferApi - interface
 * @export
 * @interface ICTransferApi
 */
export interface ICTransferApiInterface {
    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDDelete(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICTransfer/Dispatch is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDDispatchPost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<ICTransfer>;

    /**
     * 
     * @param {number} documentID 
     * @param {ICTransfer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDPatch(documentID: number, body: ICTransfer, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICTransfer/PrintDispatchLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDPrintDispatchLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICTransfer/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICTransfer/PrintReceiptLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDPrintReceiptLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {ICTransfer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDPut(documentID: number, body: ICTransfer, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICTransfer/Receipt is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDReceiptPost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ICTransfer/Transfer is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferDocumentIDTransferPost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferGet(options?: AxiosRequestConfig): AxiosPromise<PagedICTransfer>;

    /**
     * 
     * @param {ICTransfer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApiInterface
     */
    iCTransferPost(body: ICTransfer, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ICTransferApi - object-oriented interface
 * @export
 * @class ICTransferApi
 * @extends {BaseAPI}
 */
export class ICTransferApi extends BaseAPI implements ICTransferApiInterface {
    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDDelete(documentID: number, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDDelete(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICTransfer/Dispatch is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDDispatchPost(documentID: number, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDDispatchPost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDGet(documentID: number, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {ICTransfer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDPatch(documentID: number, body: ICTransfer, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDPatch(documentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICTransfer/PrintDispatchLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDPrintDispatchLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDPrintDispatchLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICTransfer/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICTransfer/PrintReceiptLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDPrintReceiptLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDPrintReceiptLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {ICTransfer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDPut(documentID: number, body: ICTransfer, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDPut(documentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICTransfer/Receipt is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDReceiptPost(documentID: number, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDReceiptPost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ICTransfer/Transfer is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferDocumentIDTransferPost(documentID: number, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferDocumentIDTransferPost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferGet(options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ICTransfer} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICTransferApi
     */
    public iCTransferPost(body: ICTransfer, options?: AxiosRequestConfig) {
        return ICTransferApiFp(this.configuration).iCTransferPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
