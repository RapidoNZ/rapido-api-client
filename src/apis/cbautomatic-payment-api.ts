/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBAutomaticPayment } from '../models';
// @ts-ignore
import { PagedCBAutomaticPayment } from '../models';
/**
 * CBAutomaticPaymentApi - axios parameter creator
 * @export
 */
export const CBAutomaticPaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentAutomaticPaymentCodeDelete: async (automaticPaymentCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'automaticPaymentCode' is not null or undefined
            assertParamExists('cBAutomaticPaymentAutomaticPaymentCodeDelete', 'automaticPaymentCode', automaticPaymentCode)
            const localVarPath = `/CBAutomaticPayment('{AutomaticPaymentCode}')`
                .replace(`{${"AutomaticPaymentCode"}}`, encodeURIComponent(String(automaticPaymentCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentAutomaticPaymentCodeGet: async (automaticPaymentCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'automaticPaymentCode' is not null or undefined
            assertParamExists('cBAutomaticPaymentAutomaticPaymentCodeGet', 'automaticPaymentCode', automaticPaymentCode)
            const localVarPath = `/CBAutomaticPayment('{AutomaticPaymentCode}')`
                .replace(`{${"AutomaticPaymentCode"}}`, encodeURIComponent(String(automaticPaymentCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {CBAutomaticPayment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentAutomaticPaymentCodePatch: async (automaticPaymentCode: string, body: CBAutomaticPayment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'automaticPaymentCode' is not null or undefined
            assertParamExists('cBAutomaticPaymentAutomaticPaymentCodePatch', 'automaticPaymentCode', automaticPaymentCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBAutomaticPaymentAutomaticPaymentCodePatch', 'body', body)
            const localVarPath = `/CBAutomaticPayment('{AutomaticPaymentCode}')`
                .replace(`{${"AutomaticPaymentCode"}}`, encodeURIComponent(String(automaticPaymentCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {CBAutomaticPayment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentAutomaticPaymentCodePut: async (automaticPaymentCode: string, body: CBAutomaticPayment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'automaticPaymentCode' is not null or undefined
            assertParamExists('cBAutomaticPaymentAutomaticPaymentCodePut', 'automaticPaymentCode', automaticPaymentCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBAutomaticPaymentAutomaticPaymentCodePut', 'body', body)
            const localVarPath = `/CBAutomaticPayment('{AutomaticPaymentCode}')`
                .replace(`{${"AutomaticPaymentCode"}}`, encodeURIComponent(String(automaticPaymentCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBAutomaticPayment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CBAutomaticPayment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentPost: async (body: CBAutomaticPayment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBAutomaticPaymentPost', 'body', body)
            const localVarPath = `/CBAutomaticPayment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBAutomaticPaymentApi - functional programming interface
 * @export
 */
export const CBAutomaticPaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBAutomaticPaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAutomaticPaymentAutomaticPaymentCodeDelete(automaticPaymentCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAutomaticPaymentAutomaticPaymentCodeDelete(automaticPaymentCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAutomaticPaymentAutomaticPaymentCodeGet(automaticPaymentCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBAutomaticPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAutomaticPaymentAutomaticPaymentCodeGet(automaticPaymentCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {CBAutomaticPayment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAutomaticPaymentAutomaticPaymentCodePatch(automaticPaymentCode: string, body: CBAutomaticPayment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAutomaticPaymentAutomaticPaymentCodePatch(automaticPaymentCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {CBAutomaticPayment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAutomaticPaymentAutomaticPaymentCodePut(automaticPaymentCode: string, body: CBAutomaticPayment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAutomaticPaymentAutomaticPaymentCodePut(automaticPaymentCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAutomaticPaymentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBAutomaticPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAutomaticPaymentGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CBAutomaticPayment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBAutomaticPaymentPost(body: CBAutomaticPayment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBAutomaticPaymentPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBAutomaticPaymentApi - factory interface
 * @export
 */
export const CBAutomaticPaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBAutomaticPaymentApiFp(configuration)
    return {
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentAutomaticPaymentCodeDelete(automaticPaymentCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.cBAutomaticPaymentAutomaticPaymentCodeDelete(automaticPaymentCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentAutomaticPaymentCodeGet(automaticPaymentCode: string, options?: any): AxiosPromise<CBAutomaticPayment> {
            return localVarFp.cBAutomaticPaymentAutomaticPaymentCodeGet(automaticPaymentCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {CBAutomaticPayment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentAutomaticPaymentCodePatch(automaticPaymentCode: string, body: CBAutomaticPayment, options?: any): AxiosPromise<void> {
            return localVarFp.cBAutomaticPaymentAutomaticPaymentCodePatch(automaticPaymentCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} automaticPaymentCode 
         * @param {CBAutomaticPayment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentAutomaticPaymentCodePut(automaticPaymentCode: string, body: CBAutomaticPayment, options?: any): AxiosPromise<void> {
            return localVarFp.cBAutomaticPaymentAutomaticPaymentCodePut(automaticPaymentCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentGet(options?: any): AxiosPromise<PagedCBAutomaticPayment> {
            return localVarFp.cBAutomaticPaymentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CBAutomaticPayment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBAutomaticPaymentPost(body: CBAutomaticPayment, options?: any): AxiosPromise<void> {
            return localVarFp.cBAutomaticPaymentPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBAutomaticPaymentApi - interface
 * @export
 * @interface CBAutomaticPaymentApi
 */
export interface CBAutomaticPaymentApiInterface {
    /**
     * 
     * @param {string} automaticPaymentCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApiInterface
     */
    cBAutomaticPaymentAutomaticPaymentCodeDelete(automaticPaymentCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} automaticPaymentCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApiInterface
     */
    cBAutomaticPaymentAutomaticPaymentCodeGet(automaticPaymentCode: string, options?: AxiosRequestConfig): AxiosPromise<CBAutomaticPayment>;

    /**
     * 
     * @param {string} automaticPaymentCode 
     * @param {CBAutomaticPayment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApiInterface
     */
    cBAutomaticPaymentAutomaticPaymentCodePatch(automaticPaymentCode: string, body: CBAutomaticPayment, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} automaticPaymentCode 
     * @param {CBAutomaticPayment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApiInterface
     */
    cBAutomaticPaymentAutomaticPaymentCodePut(automaticPaymentCode: string, body: CBAutomaticPayment, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApiInterface
     */
    cBAutomaticPaymentGet(options?: AxiosRequestConfig): AxiosPromise<PagedCBAutomaticPayment>;

    /**
     * 
     * @param {CBAutomaticPayment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApiInterface
     */
    cBAutomaticPaymentPost(body: CBAutomaticPayment, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CBAutomaticPaymentApi - object-oriented interface
 * @export
 * @class CBAutomaticPaymentApi
 * @extends {BaseAPI}
 */
export class CBAutomaticPaymentApi extends BaseAPI implements CBAutomaticPaymentApiInterface {
    /**
     * 
     * @param {string} automaticPaymentCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApi
     */
    public cBAutomaticPaymentAutomaticPaymentCodeDelete(automaticPaymentCode: string, options?: AxiosRequestConfig) {
        return CBAutomaticPaymentApiFp(this.configuration).cBAutomaticPaymentAutomaticPaymentCodeDelete(automaticPaymentCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} automaticPaymentCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApi
     */
    public cBAutomaticPaymentAutomaticPaymentCodeGet(automaticPaymentCode: string, options?: AxiosRequestConfig) {
        return CBAutomaticPaymentApiFp(this.configuration).cBAutomaticPaymentAutomaticPaymentCodeGet(automaticPaymentCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} automaticPaymentCode 
     * @param {CBAutomaticPayment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApi
     */
    public cBAutomaticPaymentAutomaticPaymentCodePatch(automaticPaymentCode: string, body: CBAutomaticPayment, options?: AxiosRequestConfig) {
        return CBAutomaticPaymentApiFp(this.configuration).cBAutomaticPaymentAutomaticPaymentCodePatch(automaticPaymentCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} automaticPaymentCode 
     * @param {CBAutomaticPayment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApi
     */
    public cBAutomaticPaymentAutomaticPaymentCodePut(automaticPaymentCode: string, body: CBAutomaticPayment, options?: AxiosRequestConfig) {
        return CBAutomaticPaymentApiFp(this.configuration).cBAutomaticPaymentAutomaticPaymentCodePut(automaticPaymentCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApi
     */
    public cBAutomaticPaymentGet(options?: AxiosRequestConfig) {
        return CBAutomaticPaymentApiFp(this.configuration).cBAutomaticPaymentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CBAutomaticPayment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBAutomaticPaymentApi
     */
    public cBAutomaticPaymentPost(body: CBAutomaticPayment, options?: AxiosRequestConfig) {
        return CBAutomaticPaymentApiFp(this.configuration).cBAutomaticPaymentPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
