/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APExpenseBudget } from '../models';
// @ts-ignore
import { PagedAPExpenseBudget } from '../models';
/**
 * APExpenseBudgetApi - axios parameter creator
 * @export
 */
export const APExpenseBudgetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseBudgetAnalysisCodeGet: async (analysisCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aPExpenseBudgetAnalysisCodeGet', 'analysisCode', analysisCode)
            const localVarPath = `/APExpenseBudget('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseBudgetAnalysisCodePatch: async (analysisCode: string, body: APExpenseBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aPExpenseBudgetAnalysisCodePatch', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPExpenseBudgetAnalysisCodePatch', 'body', body)
            const localVarPath = `/APExpenseBudget('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseBudgetAnalysisCodePut: async (analysisCode: string, body: APExpenseBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analysisCode' is not null or undefined
            assertParamExists('aPExpenseBudgetAnalysisCodePut', 'analysisCode', analysisCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPExpenseBudgetAnalysisCodePut', 'body', body)
            const localVarPath = `/APExpenseBudget('{AnalysisCode}')`
                .replace(`{${"AnalysisCode"}}`, encodeURIComponent(String(analysisCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseBudgetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/APExpenseBudget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APExpenseBudgetApi - functional programming interface
 * @export
 */
export const APExpenseBudgetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APExpenseBudgetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseBudgetAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APExpenseBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseBudgetAnalysisCodeGet(analysisCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseBudgetAnalysisCodePatch(analysisCode: string, body: APExpenseBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseBudgetAnalysisCodePatch(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseBudgetAnalysisCodePut(analysisCode: string, body: APExpenseBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseBudgetAnalysisCodePut(analysisCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPExpenseBudgetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedAPExpenseBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPExpenseBudgetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APExpenseBudgetApi - factory interface
 * @export
 */
export const APExpenseBudgetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APExpenseBudgetApiFp(configuration)
    return {
        /**
         * 
         * @param {string} analysisCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseBudgetAnalysisCodeGet(analysisCode: string, options?: any): AxiosPromise<APExpenseBudget> {
            return localVarFp.aPExpenseBudgetAnalysisCodeGet(analysisCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseBudgetAnalysisCodePatch(analysisCode: string, body: APExpenseBudget, options?: any): AxiosPromise<void> {
            return localVarFp.aPExpenseBudgetAnalysisCodePatch(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} analysisCode 
         * @param {APExpenseBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseBudgetAnalysisCodePut(analysisCode: string, body: APExpenseBudget, options?: any): AxiosPromise<void> {
            return localVarFp.aPExpenseBudgetAnalysisCodePut(analysisCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPExpenseBudgetGet(options?: any): AxiosPromise<PagedAPExpenseBudget> {
            return localVarFp.aPExpenseBudgetGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APExpenseBudgetApi - interface
 * @export
 * @interface APExpenseBudgetApi
 */
export interface APExpenseBudgetApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseBudgetApiInterface
     */
    aPExpenseBudgetAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig): AxiosPromise<APExpenseBudget>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {APExpenseBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseBudgetApiInterface
     */
    aPExpenseBudgetAnalysisCodePatch(analysisCode: string, body: APExpenseBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} analysisCode 
     * @param {APExpenseBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseBudgetApiInterface
     */
    aPExpenseBudgetAnalysisCodePut(analysisCode: string, body: APExpenseBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseBudgetApiInterface
     */
    aPExpenseBudgetGet(options?: AxiosRequestConfig): AxiosPromise<PagedAPExpenseBudget>;

}

/**
 * APExpenseBudgetApi - object-oriented interface
 * @export
 * @class APExpenseBudgetApi
 * @extends {BaseAPI}
 */
export class APExpenseBudgetApi extends BaseAPI implements APExpenseBudgetApiInterface {
    /**
     * 
     * @param {string} analysisCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseBudgetApi
     */
    public aPExpenseBudgetAnalysisCodeGet(analysisCode: string, options?: AxiosRequestConfig) {
        return APExpenseBudgetApiFp(this.configuration).aPExpenseBudgetAnalysisCodeGet(analysisCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {APExpenseBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseBudgetApi
     */
    public aPExpenseBudgetAnalysisCodePatch(analysisCode: string, body: APExpenseBudget, options?: AxiosRequestConfig) {
        return APExpenseBudgetApiFp(this.configuration).aPExpenseBudgetAnalysisCodePatch(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} analysisCode 
     * @param {APExpenseBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseBudgetApi
     */
    public aPExpenseBudgetAnalysisCodePut(analysisCode: string, body: APExpenseBudget, options?: AxiosRequestConfig) {
        return APExpenseBudgetApiFp(this.configuration).aPExpenseBudgetAnalysisCodePut(analysisCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APExpenseBudgetApi
     */
    public aPExpenseBudgetGet(options?: AxiosRequestConfig) {
        return APExpenseBudgetApiFp(this.configuration).aPExpenseBudgetGet(options).then((request) => request(this.axios, this.basePath));
    }
}
