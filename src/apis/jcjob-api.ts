/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JCJob } from '../models';
// @ts-ignore
import { PagedJCJob } from '../models';
/**
 * JCJobApi - axios parameter creator
 * @export
 */
export const JCJobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/JCJob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodeDelete: async (jobCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCJobJobCodeDelete', 'jobCode', jobCode)
            const localVarPath = `/JCJob('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodeGet: async (jobCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCJobJobCodeGet', 'jobCode', jobCode)
            const localVarPath = `/JCJob('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCJob} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodePatch: async (jobCode: string, body: JCJob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCJobJobCodePatch', 'jobCode', jobCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCJobJobCodePatch', 'body', body)
            const localVarPath = `/JCJob('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * JCJob/Print is an ODATA function and Action - use either GET or POST to call
         * @param {string} jobCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodePrintGet: async (jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCJobJobCodePrintGet', 'jobCode', jobCode)
            const localVarPath = `/JCJob('{JobCode}')/Print`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * JCJob/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} jobCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodePrintLabelGet: async (jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCJobJobCodePrintLabelGet', 'jobCode', jobCode)
            const localVarPath = `/JCJob('{JobCode}')/PrintLabel`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCJob} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodePut: async (jobCode: string, body: JCJob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCJobJobCodePut', 'jobCode', jobCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCJobJobCodePut', 'body', body)
            const localVarPath = `/JCJob('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * JCJob/Quote is an ODATA function and Action - use either GET or POST to call
         * @param {string} jobCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodeQuoteGet: async (jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCJobJobCodeQuoteGet', 'jobCode', jobCode)
            const localVarPath = `/JCJob('{JobCode}')/Quote`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JCJob} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobPost: async (body: JCJob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCJobPost', 'body', body)
            const localVarPath = `/JCJob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JCJobApi - functional programming interface
 * @export
 */
export const JCJobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JCJobApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCJobGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedJCJob>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCJobGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCJobJobCodeDelete(jobCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCJobJobCodeDelete(jobCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCJobJobCodeGet(jobCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JCJob>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCJobJobCodeGet(jobCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCJob} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCJobJobCodePatch(jobCode: string, body: JCJob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCJobJobCodePatch(jobCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * JCJob/Print is an ODATA function and Action - use either GET or POST to call
         * @param {string} jobCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCJobJobCodePrintGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCJobJobCodePrintGet(jobCode, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * JCJob/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} jobCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCJobJobCodePrintLabelGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCJobJobCodePrintLabelGet(jobCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCJob} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCJobJobCodePut(jobCode: string, body: JCJob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCJobJobCodePut(jobCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * JCJob/Quote is an ODATA function and Action - use either GET or POST to call
         * @param {string} jobCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCJobJobCodeQuoteGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCJobJobCodeQuoteGet(jobCode, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JCJob} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCJobPost(body: JCJob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCJobPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JCJobApi - factory interface
 * @export
 */
export const JCJobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JCJobApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobGet(options?: any): AxiosPromise<PagedJCJob> {
            return localVarFp.jCJobGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodeDelete(jobCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.jCJobJobCodeDelete(jobCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodeGet(jobCode: string, options?: any): AxiosPromise<JCJob> {
            return localVarFp.jCJobJobCodeGet(jobCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCJob} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodePatch(jobCode: string, body: JCJob, options?: any): AxiosPromise<void> {
            return localVarFp.jCJobJobCodePatch(jobCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * JCJob/Print is an ODATA function and Action - use either GET or POST to call
         * @param {string} jobCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodePrintGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.jCJobJobCodePrintGet(jobCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * JCJob/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {string} jobCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodePrintLabelGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.jCJobJobCodePrintLabelGet(jobCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCJob} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodePut(jobCode: string, body: JCJob, options?: any): AxiosPromise<void> {
            return localVarFp.jCJobJobCodePut(jobCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * JCJob/Quote is an ODATA function and Action - use either GET or POST to call
         * @param {string} jobCode 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobJobCodeQuoteGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.jCJobJobCodeQuoteGet(jobCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JCJob} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCJobPost(body: JCJob, options?: any): AxiosPromise<void> {
            return localVarFp.jCJobPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JCJobApi - interface
 * @export
 * @interface JCJobApi
 */
export interface JCJobApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApiInterface
     */
    jCJobGet(options?: AxiosRequestConfig): AxiosPromise<PagedJCJob>;

    /**
     * 
     * @param {string} jobCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApiInterface
     */
    jCJobJobCodeDelete(jobCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} jobCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApiInterface
     */
    jCJobJobCodeGet(jobCode: string, options?: AxiosRequestConfig): AxiosPromise<JCJob>;

    /**
     * 
     * @param {string} jobCode 
     * @param {JCJob} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApiInterface
     */
    jCJobJobCodePatch(jobCode: string, body: JCJob, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * JCJob/Print is an ODATA function and Action - use either GET or POST to call
     * @param {string} jobCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApiInterface
     */
    jCJobJobCodePrintGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * JCJob/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} jobCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApiInterface
     */
    jCJobJobCodePrintLabelGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} jobCode 
     * @param {JCJob} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApiInterface
     */
    jCJobJobCodePut(jobCode: string, body: JCJob, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * JCJob/Quote is an ODATA function and Action - use either GET or POST to call
     * @param {string} jobCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApiInterface
     */
    jCJobJobCodeQuoteGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {JCJob} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApiInterface
     */
    jCJobPost(body: JCJob, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * JCJobApi - object-oriented interface
 * @export
 * @class JCJobApi
 * @extends {BaseAPI}
 */
export class JCJobApi extends BaseAPI implements JCJobApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApi
     */
    public jCJobGet(options?: AxiosRequestConfig) {
        return JCJobApiFp(this.configuration).jCJobGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApi
     */
    public jCJobJobCodeDelete(jobCode: string, options?: AxiosRequestConfig) {
        return JCJobApiFp(this.configuration).jCJobJobCodeDelete(jobCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApi
     */
    public jCJobJobCodeGet(jobCode: string, options?: AxiosRequestConfig) {
        return JCJobApiFp(this.configuration).jCJobJobCodeGet(jobCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {JCJob} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApi
     */
    public jCJobJobCodePatch(jobCode: string, body: JCJob, options?: AxiosRequestConfig) {
        return JCJobApiFp(this.configuration).jCJobJobCodePatch(jobCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * JCJob/Print is an ODATA function and Action - use either GET or POST to call
     * @param {string} jobCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApi
     */
    public jCJobJobCodePrintGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return JCJobApiFp(this.configuration).jCJobJobCodePrintGet(jobCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * JCJob/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {string} jobCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApi
     */
    public jCJobJobCodePrintLabelGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return JCJobApiFp(this.configuration).jCJobJobCodePrintLabelGet(jobCode, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {JCJob} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApi
     */
    public jCJobJobCodePut(jobCode: string, body: JCJob, options?: AxiosRequestConfig) {
        return JCJobApiFp(this.configuration).jCJobJobCodePut(jobCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * JCJob/Quote is an ODATA function and Action - use either GET or POST to call
     * @param {string} jobCode 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApi
     */
    public jCJobJobCodeQuoteGet(jobCode: string, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return JCJobApiFp(this.configuration).jCJobJobCodeQuoteGet(jobCode, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JCJob} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCJobApi
     */
    public jCJobPost(body: JCJob, options?: AxiosRequestConfig) {
        return JCJobApiFp(this.configuration).jCJobPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
