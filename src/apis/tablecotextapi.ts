/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagedTABLECOTEXT } from '../models';
// @ts-ignore
import { TABLECOTEXT } from '../models';
/**
 * TABLECOTEXTApi - axios parameter creator
 * @export
 */
export const TABLECOTEXTApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLECOTEXTGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TABLE_COTEXT`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} textCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLECOTEXTTextCodeGet: async (textCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textCode' is not null or undefined
            assertParamExists('tABLECOTEXTTextCodeGet', 'textCode', textCode)
            const localVarPath = `/TABLE_COTEXT('{TextCode}')`
                .replace(`{${"TextCode"}}`, encodeURIComponent(String(textCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TABLECOTEXTApi - functional programming interface
 * @export
 */
export const TABLECOTEXTApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TABLECOTEXTApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLECOTEXTGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedTABLECOTEXT>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLECOTEXTGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} textCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLECOTEXTTextCodeGet(textCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TABLECOTEXT>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLECOTEXTTextCodeGet(textCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TABLECOTEXTApi - factory interface
 * @export
 */
export const TABLECOTEXTApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TABLECOTEXTApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLECOTEXTGet(options?: any): AxiosPromise<PagedTABLECOTEXT> {
            return localVarFp.tABLECOTEXTGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} textCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLECOTEXTTextCodeGet(textCode: string, options?: any): AxiosPromise<TABLECOTEXT> {
            return localVarFp.tABLECOTEXTTextCodeGet(textCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TABLECOTEXTApi - interface
 * @export
 * @interface TABLECOTEXTApi
 */
export interface TABLECOTEXTApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLECOTEXTApiInterface
     */
    tABLECOTEXTGet(options?: AxiosRequestConfig): AxiosPromise<PagedTABLECOTEXT>;

    /**
     * 
     * @param {string} textCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLECOTEXTApiInterface
     */
    tABLECOTEXTTextCodeGet(textCode: string, options?: AxiosRequestConfig): AxiosPromise<TABLECOTEXT>;

}

/**
 * TABLECOTEXTApi - object-oriented interface
 * @export
 * @class TABLECOTEXTApi
 * @extends {BaseAPI}
 */
export class TABLECOTEXTApi extends BaseAPI implements TABLECOTEXTApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLECOTEXTApi
     */
    public tABLECOTEXTGet(options?: AxiosRequestConfig) {
        return TABLECOTEXTApiFp(this.configuration).tABLECOTEXTGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} textCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLECOTEXTApi
     */
    public tABLECOTEXTTextCodeGet(textCode: string, options?: AxiosRequestConfig) {
        return TABLECOTEXTApiFp(this.configuration).tABLECOTEXTTextCodeGet(textCode, options).then((request) => request(this.axios, this.basePath));
    }
}
