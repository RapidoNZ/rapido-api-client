/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ICComponent } from '../models';
// @ts-ignore
import { PagedICComponent } from '../models';
/**
 * ICComponentApi - axios parameter creator
 * @export
 */
export const ICComponentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCComponentGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ICComponent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCComponentProductCodeGet: async (productCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCComponentProductCodeGet', 'productCode', productCode)
            const localVarPath = `/ICComponent('{ProductCode}')`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCComponentProductCodePatch: async (productCode: string, body: ICComponent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCComponentProductCodePatch', 'productCode', productCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCComponentProductCodePatch', 'body', body)
            const localVarPath = `/ICComponent('{ProductCode}')`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCComponentProductCodePut: async (productCode: string, body: ICComponent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCode' is not null or undefined
            assertParamExists('iCComponentProductCodePut', 'productCode', productCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCComponentProductCodePut', 'body', body)
            const localVarPath = `/ICComponent('{ProductCode}')`
                .replace(`{${"ProductCode"}}`, encodeURIComponent(String(productCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ICComponentApi - functional programming interface
 * @export
 */
export const ICComponentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ICComponentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCComponentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedICComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCComponentGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCComponentProductCodeGet(productCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCComponentProductCodeGet(productCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCComponentProductCodePatch(productCode: string, body: ICComponent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCComponentProductCodePatch(productCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCComponentProductCodePut(productCode: string, body: ICComponent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCComponentProductCodePut(productCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ICComponentApi - factory interface
 * @export
 */
export const ICComponentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ICComponentApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCComponentGet(options?: any): AxiosPromise<PagedICComponent> {
            return localVarFp.iCComponentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCComponentProductCodeGet(productCode: string, options?: any): AxiosPromise<ICComponent> {
            return localVarFp.iCComponentProductCodeGet(productCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCComponentProductCodePatch(productCode: string, body: ICComponent, options?: any): AxiosPromise<void> {
            return localVarFp.iCComponentProductCodePatch(productCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productCode 
         * @param {ICComponent} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCComponentProductCodePut(productCode: string, body: ICComponent, options?: any): AxiosPromise<void> {
            return localVarFp.iCComponentProductCodePut(productCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ICComponentApi - interface
 * @export
 * @interface ICComponentApi
 */
export interface ICComponentApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICComponentApiInterface
     */
    iCComponentGet(options?: AxiosRequestConfig): AxiosPromise<PagedICComponent>;

    /**
     * 
     * @param {string} productCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICComponentApiInterface
     */
    iCComponentProductCodeGet(productCode: string, options?: AxiosRequestConfig): AxiosPromise<ICComponent>;

    /**
     * 
     * @param {string} productCode 
     * @param {ICComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICComponentApiInterface
     */
    iCComponentProductCodePatch(productCode: string, body: ICComponent, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} productCode 
     * @param {ICComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICComponentApiInterface
     */
    iCComponentProductCodePut(productCode: string, body: ICComponent, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ICComponentApi - object-oriented interface
 * @export
 * @class ICComponentApi
 * @extends {BaseAPI}
 */
export class ICComponentApi extends BaseAPI implements ICComponentApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICComponentApi
     */
    public iCComponentGet(options?: AxiosRequestConfig) {
        return ICComponentApiFp(this.configuration).iCComponentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICComponentApi
     */
    public iCComponentProductCodeGet(productCode: string, options?: AxiosRequestConfig) {
        return ICComponentApiFp(this.configuration).iCComponentProductCodeGet(productCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productCode 
     * @param {ICComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICComponentApi
     */
    public iCComponentProductCodePatch(productCode: string, body: ICComponent, options?: AxiosRequestConfig) {
        return ICComponentApiFp(this.configuration).iCComponentProductCodePatch(productCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productCode 
     * @param {ICComponent} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICComponentApi
     */
    public iCComponentProductCodePut(productCode: string, body: ICComponent, options?: AxiosRequestConfig) {
        return ICComponentApiFp(this.configuration).iCComponentProductCodePut(productCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
