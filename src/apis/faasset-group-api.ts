/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FAAssetGroup } from '../models';
// @ts-ignore
import { PagedFAAssetGroup } from '../models';
/**
 * FAAssetGroupApi - axios parameter creator
 * @export
 */
export const FAAssetGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupAssetGroupCodeDelete: async (assetGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetGroupCode' is not null or undefined
            assertParamExists('fAAssetGroupAssetGroupCodeDelete', 'assetGroupCode', assetGroupCode)
            const localVarPath = `/FAAssetGroup('{AssetGroupCode}')`
                .replace(`{${"AssetGroupCode"}}`, encodeURIComponent(String(assetGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupAssetGroupCodeGet: async (assetGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetGroupCode' is not null or undefined
            assertParamExists('fAAssetGroupAssetGroupCodeGet', 'assetGroupCode', assetGroupCode)
            const localVarPath = `/FAAssetGroup('{AssetGroupCode}')`
                .replace(`{${"AssetGroupCode"}}`, encodeURIComponent(String(assetGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {FAAssetGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupAssetGroupCodePatch: async (assetGroupCode: string, body: FAAssetGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetGroupCode' is not null or undefined
            assertParamExists('fAAssetGroupAssetGroupCodePatch', 'assetGroupCode', assetGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetGroupAssetGroupCodePatch', 'body', body)
            const localVarPath = `/FAAssetGroup('{AssetGroupCode}')`
                .replace(`{${"AssetGroupCode"}}`, encodeURIComponent(String(assetGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {FAAssetGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupAssetGroupCodePut: async (assetGroupCode: string, body: FAAssetGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetGroupCode' is not null or undefined
            assertParamExists('fAAssetGroupAssetGroupCodePut', 'assetGroupCode', assetGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetGroupAssetGroupCodePut', 'body', body)
            const localVarPath = `/FAAssetGroup('{AssetGroupCode}')`
                .replace(`{${"AssetGroupCode"}}`, encodeURIComponent(String(assetGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/FAAssetGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FAAssetGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupPost: async (body: FAAssetGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fAAssetGroupPost', 'body', body)
            const localVarPath = `/FAAssetGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FAAssetGroupApi - functional programming interface
 * @export
 */
export const FAAssetGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FAAssetGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetGroupAssetGroupCodeDelete(assetGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetGroupAssetGroupCodeDelete(assetGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetGroupAssetGroupCodeGet(assetGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAAssetGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetGroupAssetGroupCodeGet(assetGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {FAAssetGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetGroupAssetGroupCodePatch(assetGroupCode: string, body: FAAssetGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetGroupAssetGroupCodePatch(assetGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {FAAssetGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetGroupAssetGroupCodePut(assetGroupCode: string, body: FAAssetGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetGroupAssetGroupCodePut(assetGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetGroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedFAAssetGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetGroupGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FAAssetGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fAAssetGroupPost(body: FAAssetGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fAAssetGroupPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FAAssetGroupApi - factory interface
 * @export
 */
export const FAAssetGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FAAssetGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupAssetGroupCodeDelete(assetGroupCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetGroupAssetGroupCodeDelete(assetGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupAssetGroupCodeGet(assetGroupCode: string, options?: any): AxiosPromise<FAAssetGroup> {
            return localVarFp.fAAssetGroupAssetGroupCodeGet(assetGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {FAAssetGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupAssetGroupCodePatch(assetGroupCode: string, body: FAAssetGroup, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetGroupAssetGroupCodePatch(assetGroupCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assetGroupCode 
         * @param {FAAssetGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupAssetGroupCodePut(assetGroupCode: string, body: FAAssetGroup, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetGroupAssetGroupCodePut(assetGroupCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupGet(options?: any): AxiosPromise<PagedFAAssetGroup> {
            return localVarFp.fAAssetGroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FAAssetGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fAAssetGroupPost(body: FAAssetGroup, options?: any): AxiosPromise<void> {
            return localVarFp.fAAssetGroupPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FAAssetGroupApi - interface
 * @export
 * @interface FAAssetGroupApi
 */
export interface FAAssetGroupApiInterface {
    /**
     * 
     * @param {string} assetGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApiInterface
     */
    fAAssetGroupAssetGroupCodeDelete(assetGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} assetGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApiInterface
     */
    fAAssetGroupAssetGroupCodeGet(assetGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<FAAssetGroup>;

    /**
     * 
     * @param {string} assetGroupCode 
     * @param {FAAssetGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApiInterface
     */
    fAAssetGroupAssetGroupCodePatch(assetGroupCode: string, body: FAAssetGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} assetGroupCode 
     * @param {FAAssetGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApiInterface
     */
    fAAssetGroupAssetGroupCodePut(assetGroupCode: string, body: FAAssetGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApiInterface
     */
    fAAssetGroupGet(options?: AxiosRequestConfig): AxiosPromise<PagedFAAssetGroup>;

    /**
     * 
     * @param {FAAssetGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApiInterface
     */
    fAAssetGroupPost(body: FAAssetGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * FAAssetGroupApi - object-oriented interface
 * @export
 * @class FAAssetGroupApi
 * @extends {BaseAPI}
 */
export class FAAssetGroupApi extends BaseAPI implements FAAssetGroupApiInterface {
    /**
     * 
     * @param {string} assetGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApi
     */
    public fAAssetGroupAssetGroupCodeDelete(assetGroupCode: string, options?: AxiosRequestConfig) {
        return FAAssetGroupApiFp(this.configuration).fAAssetGroupAssetGroupCodeDelete(assetGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} assetGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApi
     */
    public fAAssetGroupAssetGroupCodeGet(assetGroupCode: string, options?: AxiosRequestConfig) {
        return FAAssetGroupApiFp(this.configuration).fAAssetGroupAssetGroupCodeGet(assetGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} assetGroupCode 
     * @param {FAAssetGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApi
     */
    public fAAssetGroupAssetGroupCodePatch(assetGroupCode: string, body: FAAssetGroup, options?: AxiosRequestConfig) {
        return FAAssetGroupApiFp(this.configuration).fAAssetGroupAssetGroupCodePatch(assetGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} assetGroupCode 
     * @param {FAAssetGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApi
     */
    public fAAssetGroupAssetGroupCodePut(assetGroupCode: string, body: FAAssetGroup, options?: AxiosRequestConfig) {
        return FAAssetGroupApiFp(this.configuration).fAAssetGroupAssetGroupCodePut(assetGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApi
     */
    public fAAssetGroupGet(options?: AxiosRequestConfig) {
        return FAAssetGroupApiFp(this.configuration).fAAssetGroupGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FAAssetGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FAAssetGroupApi
     */
    public fAAssetGroupPost(body: FAAssetGroup, options?: AxiosRequestConfig) {
        return FAAssetGroupApiFp(this.configuration).fAAssetGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
