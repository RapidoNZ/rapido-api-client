/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APContact } from '../models';
// @ts-ignore
import { PagedAPContact } from '../models';
/**
 * APContactApi - axios parameter creator
 * @export
 */
export const APContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactContactIDDelete: async (contactID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactID' is not null or undefined
            assertParamExists('aPContactContactIDDelete', 'contactID', contactID)
            const localVarPath = `/APContact('{ContactID}')`
                .replace(`{${"ContactID"}}`, encodeURIComponent(String(contactID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactContactIDGet: async (contactID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactID' is not null or undefined
            assertParamExists('aPContactContactIDGet', 'contactID', contactID)
            const localVarPath = `/APContact('{ContactID}')`
                .replace(`{${"ContactID"}}`, encodeURIComponent(String(contactID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} contactID 
         * @param {APContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactContactIDPatch: async (contactID: number, body: APContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactID' is not null or undefined
            assertParamExists('aPContactContactIDPatch', 'contactID', contactID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPContactContactIDPatch', 'body', body)
            const localVarPath = `/APContact('{ContactID}')`
                .replace(`{${"ContactID"}}`, encodeURIComponent(String(contactID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} contactID 
         * @param {APContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactContactIDPut: async (contactID: number, body: APContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactID' is not null or undefined
            assertParamExists('aPContactContactIDPut', 'contactID', contactID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPContactContactIDPut', 'body', body)
            const localVarPath = `/APContact('{ContactID}')`
                .replace(`{${"ContactID"}}`, encodeURIComponent(String(contactID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/APContact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {APContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactPost: async (body: APContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPContactPost', 'body', body)
            const localVarPath = `/APContact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APContactApi - functional programming interface
 * @export
 */
export const APContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APContactApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPContactContactIDDelete(contactID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPContactContactIDDelete(contactID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPContactContactIDGet(contactID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPContactContactIDGet(contactID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} contactID 
         * @param {APContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPContactContactIDPatch(contactID: number, body: APContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPContactContactIDPatch(contactID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} contactID 
         * @param {APContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPContactContactIDPut(contactID: number, body: APContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPContactContactIDPut(contactID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPContactGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedAPContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPContactGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {APContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPContactPost(body: APContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPContactPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APContactApi - factory interface
 * @export
 */
export const APContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APContactApiFp(configuration)
    return {
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactContactIDDelete(contactID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPContactContactIDDelete(contactID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} contactID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactContactIDGet(contactID: number, options?: any): AxiosPromise<APContact> {
            return localVarFp.aPContactContactIDGet(contactID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} contactID 
         * @param {APContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactContactIDPatch(contactID: number, body: APContact, options?: any): AxiosPromise<void> {
            return localVarFp.aPContactContactIDPatch(contactID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} contactID 
         * @param {APContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactContactIDPut(contactID: number, body: APContact, options?: any): AxiosPromise<void> {
            return localVarFp.aPContactContactIDPut(contactID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactGet(options?: any): AxiosPromise<PagedAPContact> {
            return localVarFp.aPContactGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APContact} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPContactPost(body: APContact, options?: any): AxiosPromise<void> {
            return localVarFp.aPContactPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APContactApi - interface
 * @export
 * @interface APContactApi
 */
export interface APContactApiInterface {
    /**
     * 
     * @param {number} contactID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApiInterface
     */
    aPContactContactIDDelete(contactID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} contactID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApiInterface
     */
    aPContactContactIDGet(contactID: number, options?: AxiosRequestConfig): AxiosPromise<APContact>;

    /**
     * 
     * @param {number} contactID 
     * @param {APContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApiInterface
     */
    aPContactContactIDPatch(contactID: number, body: APContact, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} contactID 
     * @param {APContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApiInterface
     */
    aPContactContactIDPut(contactID: number, body: APContact, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApiInterface
     */
    aPContactGet(options?: AxiosRequestConfig): AxiosPromise<PagedAPContact>;

    /**
     * 
     * @param {APContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApiInterface
     */
    aPContactPost(body: APContact, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * APContactApi - object-oriented interface
 * @export
 * @class APContactApi
 * @extends {BaseAPI}
 */
export class APContactApi extends BaseAPI implements APContactApiInterface {
    /**
     * 
     * @param {number} contactID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApi
     */
    public aPContactContactIDDelete(contactID: number, options?: AxiosRequestConfig) {
        return APContactApiFp(this.configuration).aPContactContactIDDelete(contactID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} contactID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApi
     */
    public aPContactContactIDGet(contactID: number, options?: AxiosRequestConfig) {
        return APContactApiFp(this.configuration).aPContactContactIDGet(contactID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} contactID 
     * @param {APContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApi
     */
    public aPContactContactIDPatch(contactID: number, body: APContact, options?: AxiosRequestConfig) {
        return APContactApiFp(this.configuration).aPContactContactIDPatch(contactID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} contactID 
     * @param {APContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApi
     */
    public aPContactContactIDPut(contactID: number, body: APContact, options?: AxiosRequestConfig) {
        return APContactApiFp(this.configuration).aPContactContactIDPut(contactID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApi
     */
    public aPContactGet(options?: AxiosRequestConfig) {
        return APContactApiFp(this.configuration).aPContactGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APContact} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APContactApi
     */
    public aPContactPost(body: APContact, options?: AxiosRequestConfig) {
        return APContactApiFp(this.configuration).aPContactPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
