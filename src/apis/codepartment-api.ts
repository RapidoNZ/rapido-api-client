/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CODepartment } from '../models';
// @ts-ignore
import { PagedCODepartment } from '../models';
/**
 * CODepartmentApi - axios parameter creator
 * @export
 */
export const CODepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} departmentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentDepartmentCodeDelete: async (departmentCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentCode' is not null or undefined
            assertParamExists('cODepartmentDepartmentCodeDelete', 'departmentCode', departmentCode)
            const localVarPath = `/CODepartment('{DepartmentCode}')`
                .replace(`{${"DepartmentCode"}}`, encodeURIComponent(String(departmentCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} departmentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentDepartmentCodeGet: async (departmentCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentCode' is not null or undefined
            assertParamExists('cODepartmentDepartmentCodeGet', 'departmentCode', departmentCode)
            const localVarPath = `/CODepartment('{DepartmentCode}')`
                .replace(`{${"DepartmentCode"}}`, encodeURIComponent(String(departmentCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} departmentCode 
         * @param {CODepartment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentDepartmentCodePatch: async (departmentCode: string, body: CODepartment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentCode' is not null or undefined
            assertParamExists('cODepartmentDepartmentCodePatch', 'departmentCode', departmentCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cODepartmentDepartmentCodePatch', 'body', body)
            const localVarPath = `/CODepartment('{DepartmentCode}')`
                .replace(`{${"DepartmentCode"}}`, encodeURIComponent(String(departmentCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} departmentCode 
         * @param {CODepartment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentDepartmentCodePut: async (departmentCode: string, body: CODepartment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentCode' is not null or undefined
            assertParamExists('cODepartmentDepartmentCodePut', 'departmentCode', departmentCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cODepartmentDepartmentCodePut', 'body', body)
            const localVarPath = `/CODepartment('{DepartmentCode}')`
                .replace(`{${"DepartmentCode"}}`, encodeURIComponent(String(departmentCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CODepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CODepartment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentPost: async (body: CODepartment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cODepartmentPost', 'body', body)
            const localVarPath = `/CODepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CODepartmentApi - functional programming interface
 * @export
 */
export const CODepartmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CODepartmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} departmentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cODepartmentDepartmentCodeDelete(departmentCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cODepartmentDepartmentCodeDelete(departmentCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} departmentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cODepartmentDepartmentCodeGet(departmentCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CODepartment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cODepartmentDepartmentCodeGet(departmentCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} departmentCode 
         * @param {CODepartment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cODepartmentDepartmentCodePatch(departmentCode: string, body: CODepartment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cODepartmentDepartmentCodePatch(departmentCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} departmentCode 
         * @param {CODepartment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cODepartmentDepartmentCodePut(departmentCode: string, body: CODepartment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cODepartmentDepartmentCodePut(departmentCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cODepartmentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCODepartment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cODepartmentGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CODepartment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cODepartmentPost(body: CODepartment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cODepartmentPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CODepartmentApi - factory interface
 * @export
 */
export const CODepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CODepartmentApiFp(configuration)
    return {
        /**
         * 
         * @param {string} departmentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentDepartmentCodeDelete(departmentCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.cODepartmentDepartmentCodeDelete(departmentCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} departmentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentDepartmentCodeGet(departmentCode: string, options?: any): AxiosPromise<CODepartment> {
            return localVarFp.cODepartmentDepartmentCodeGet(departmentCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} departmentCode 
         * @param {CODepartment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentDepartmentCodePatch(departmentCode: string, body: CODepartment, options?: any): AxiosPromise<void> {
            return localVarFp.cODepartmentDepartmentCodePatch(departmentCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} departmentCode 
         * @param {CODepartment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentDepartmentCodePut(departmentCode: string, body: CODepartment, options?: any): AxiosPromise<void> {
            return localVarFp.cODepartmentDepartmentCodePut(departmentCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentGet(options?: any): AxiosPromise<PagedCODepartment> {
            return localVarFp.cODepartmentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CODepartment} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cODepartmentPost(body: CODepartment, options?: any): AxiosPromise<void> {
            return localVarFp.cODepartmentPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CODepartmentApi - interface
 * @export
 * @interface CODepartmentApi
 */
export interface CODepartmentApiInterface {
    /**
     * 
     * @param {string} departmentCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApiInterface
     */
    cODepartmentDepartmentCodeDelete(departmentCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} departmentCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApiInterface
     */
    cODepartmentDepartmentCodeGet(departmentCode: string, options?: AxiosRequestConfig): AxiosPromise<CODepartment>;

    /**
     * 
     * @param {string} departmentCode 
     * @param {CODepartment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApiInterface
     */
    cODepartmentDepartmentCodePatch(departmentCode: string, body: CODepartment, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} departmentCode 
     * @param {CODepartment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApiInterface
     */
    cODepartmentDepartmentCodePut(departmentCode: string, body: CODepartment, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApiInterface
     */
    cODepartmentGet(options?: AxiosRequestConfig): AxiosPromise<PagedCODepartment>;

    /**
     * 
     * @param {CODepartment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApiInterface
     */
    cODepartmentPost(body: CODepartment, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CODepartmentApi - object-oriented interface
 * @export
 * @class CODepartmentApi
 * @extends {BaseAPI}
 */
export class CODepartmentApi extends BaseAPI implements CODepartmentApiInterface {
    /**
     * 
     * @param {string} departmentCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApi
     */
    public cODepartmentDepartmentCodeDelete(departmentCode: string, options?: AxiosRequestConfig) {
        return CODepartmentApiFp(this.configuration).cODepartmentDepartmentCodeDelete(departmentCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} departmentCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApi
     */
    public cODepartmentDepartmentCodeGet(departmentCode: string, options?: AxiosRequestConfig) {
        return CODepartmentApiFp(this.configuration).cODepartmentDepartmentCodeGet(departmentCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} departmentCode 
     * @param {CODepartment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApi
     */
    public cODepartmentDepartmentCodePatch(departmentCode: string, body: CODepartment, options?: AxiosRequestConfig) {
        return CODepartmentApiFp(this.configuration).cODepartmentDepartmentCodePatch(departmentCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} departmentCode 
     * @param {CODepartment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApi
     */
    public cODepartmentDepartmentCodePut(departmentCode: string, body: CODepartment, options?: AxiosRequestConfig) {
        return CODepartmentApiFp(this.configuration).cODepartmentDepartmentCodePut(departmentCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApi
     */
    public cODepartmentGet(options?: AxiosRequestConfig) {
        return CODepartmentApiFp(this.configuration).cODepartmentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CODepartment} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CODepartmentApi
     */
    public cODepartmentPost(body: CODepartment, options?: AxiosRequestConfig) {
        return CODepartmentApiFp(this.configuration).cODepartmentPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
