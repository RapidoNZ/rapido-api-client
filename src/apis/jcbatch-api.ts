/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JCBatch } from '../models';
// @ts-ignore
import { PagedJCBatch } from '../models';
/**
 * JCBatchApi - axios parameter creator
 * @export
 */
export const JCBatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDDelete: async (batchID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCBatchBatchIDDelete', 'batchID', batchID)
            const localVarPath = `/JCBatch('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDGet: async (batchID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCBatchBatchIDGet', 'batchID', batchID)
            const localVarPath = `/JCBatch('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDPatch: async (batchID: number, body: JCBatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCBatchBatchIDPatch', 'batchID', batchID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCBatchBatchIDPatch', 'body', body)
            const localVarPath = `/JCBatch('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * JCBatch/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} batchID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDPrintGet: async (batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCBatchBatchIDPrintGet', 'batchID', batchID)
            const localVarPath = `/JCBatch('{BatchID}')/Print`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDPut: async (batchID: number, body: JCBatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCBatchBatchIDPut', 'batchID', batchID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCBatchBatchIDPut', 'body', body)
            const localVarPath = `/JCBatch('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/JCBatch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JCBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchPost: async (body: JCBatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCBatchPost', 'body', body)
            const localVarPath = `/JCBatch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JCBatchApi - functional programming interface
 * @export
 */
export const JCBatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JCBatchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBatchBatchIDDelete(batchID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBatchBatchIDDelete(batchID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBatchBatchIDGet(batchID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JCBatch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBatchBatchIDGet(batchID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBatchBatchIDPatch(batchID: number, body: JCBatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBatchBatchIDPatch(batchID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * JCBatch/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} batchID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBatchBatchIDPrintGet(batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBatchBatchIDPrintGet(batchID, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBatchBatchIDPut(batchID: number, body: JCBatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBatchBatchIDPut(batchID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBatchGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedJCBatch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBatchGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JCBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBatchPost(body: JCBatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBatchPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JCBatchApi - factory interface
 * @export
 */
export const JCBatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JCBatchApiFp(configuration)
    return {
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDDelete(batchID: number, options?: any): AxiosPromise<void> {
            return localVarFp.jCBatchBatchIDDelete(batchID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDGet(batchID: number, options?: any): AxiosPromise<JCBatch> {
            return localVarFp.jCBatchBatchIDGet(batchID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDPatch(batchID: number, body: JCBatch, options?: any): AxiosPromise<void> {
            return localVarFp.jCBatchBatchIDPatch(batchID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * JCBatch/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} batchID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDPrintGet(batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.jCBatchBatchIDPrintGet(batchID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchBatchIDPut(batchID: number, body: JCBatch, options?: any): AxiosPromise<void> {
            return localVarFp.jCBatchBatchIDPut(batchID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchGet(options?: any): AxiosPromise<PagedJCBatch> {
            return localVarFp.jCBatchGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JCBatch} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBatchPost(body: JCBatch, options?: any): AxiosPromise<void> {
            return localVarFp.jCBatchPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JCBatchApi - interface
 * @export
 * @interface JCBatchApi
 */
export interface JCBatchApiInterface {
    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApiInterface
     */
    jCBatchBatchIDDelete(batchID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApiInterface
     */
    jCBatchBatchIDGet(batchID: number, options?: AxiosRequestConfig): AxiosPromise<JCBatch>;

    /**
     * 
     * @param {number} batchID 
     * @param {JCBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApiInterface
     */
    jCBatchBatchIDPatch(batchID: number, body: JCBatch, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * JCBatch/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} batchID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApiInterface
     */
    jCBatchBatchIDPrintGet(batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} batchID 
     * @param {JCBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApiInterface
     */
    jCBatchBatchIDPut(batchID: number, body: JCBatch, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApiInterface
     */
    jCBatchGet(options?: AxiosRequestConfig): AxiosPromise<PagedJCBatch>;

    /**
     * 
     * @param {JCBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApiInterface
     */
    jCBatchPost(body: JCBatch, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * JCBatchApi - object-oriented interface
 * @export
 * @class JCBatchApi
 * @extends {BaseAPI}
 */
export class JCBatchApi extends BaseAPI implements JCBatchApiInterface {
    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApi
     */
    public jCBatchBatchIDDelete(batchID: number, options?: AxiosRequestConfig) {
        return JCBatchApiFp(this.configuration).jCBatchBatchIDDelete(batchID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApi
     */
    public jCBatchBatchIDGet(batchID: number, options?: AxiosRequestConfig) {
        return JCBatchApiFp(this.configuration).jCBatchBatchIDGet(batchID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} batchID 
     * @param {JCBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApi
     */
    public jCBatchBatchIDPatch(batchID: number, body: JCBatch, options?: AxiosRequestConfig) {
        return JCBatchApiFp(this.configuration).jCBatchBatchIDPatch(batchID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * JCBatch/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} batchID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApi
     */
    public jCBatchBatchIDPrintGet(batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return JCBatchApiFp(this.configuration).jCBatchBatchIDPrintGet(batchID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} batchID 
     * @param {JCBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApi
     */
    public jCBatchBatchIDPut(batchID: number, body: JCBatch, options?: AxiosRequestConfig) {
        return JCBatchApiFp(this.configuration).jCBatchBatchIDPut(batchID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApi
     */
    public jCBatchGet(options?: AxiosRequestConfig) {
        return JCBatchApiFp(this.configuration).jCBatchGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JCBatch} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBatchApi
     */
    public jCBatchPost(body: JCBatch, options?: AxiosRequestConfig) {
        return JCBatchApiFp(this.configuration).jCBatchPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
