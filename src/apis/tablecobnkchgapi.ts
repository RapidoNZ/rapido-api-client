/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagedTABLECOBNKCHG } from '../models';
// @ts-ignore
import { TABLECOBNKCHG } from '../models';
/**
 * TABLECOBNKCHGApi - axios parameter creator
 * @export
 */
export const TABLECOBNKCHGApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} changeID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLECOBNKCHGChangeIDGet: async (changeID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeID' is not null or undefined
            assertParamExists('tABLECOBNKCHGChangeIDGet', 'changeID', changeID)
            const localVarPath = `/TABLE_COBNKCHG('{ChangeID}')`
                .replace(`{${"ChangeID"}}`, encodeURIComponent(String(changeID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLECOBNKCHGGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TABLE_COBNKCHG`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TABLECOBNKCHGApi - functional programming interface
 * @export
 */
export const TABLECOBNKCHGApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TABLECOBNKCHGApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} changeID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLECOBNKCHGChangeIDGet(changeID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TABLECOBNKCHG>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLECOBNKCHGChangeIDGet(changeID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tABLECOBNKCHGGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedTABLECOBNKCHG>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tABLECOBNKCHGGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TABLECOBNKCHGApi - factory interface
 * @export
 */
export const TABLECOBNKCHGApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TABLECOBNKCHGApiFp(configuration)
    return {
        /**
         * 
         * @param {number} changeID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLECOBNKCHGChangeIDGet(changeID: number, options?: any): AxiosPromise<TABLECOBNKCHG> {
            return localVarFp.tABLECOBNKCHGChangeIDGet(changeID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tABLECOBNKCHGGet(options?: any): AxiosPromise<PagedTABLECOBNKCHG> {
            return localVarFp.tABLECOBNKCHGGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TABLECOBNKCHGApi - interface
 * @export
 * @interface TABLECOBNKCHGApi
 */
export interface TABLECOBNKCHGApiInterface {
    /**
     * 
     * @param {number} changeID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLECOBNKCHGApiInterface
     */
    tABLECOBNKCHGChangeIDGet(changeID: number, options?: AxiosRequestConfig): AxiosPromise<TABLECOBNKCHG>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLECOBNKCHGApiInterface
     */
    tABLECOBNKCHGGet(options?: AxiosRequestConfig): AxiosPromise<PagedTABLECOBNKCHG>;

}

/**
 * TABLECOBNKCHGApi - object-oriented interface
 * @export
 * @class TABLECOBNKCHGApi
 * @extends {BaseAPI}
 */
export class TABLECOBNKCHGApi extends BaseAPI implements TABLECOBNKCHGApiInterface {
    /**
     * 
     * @param {number} changeID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLECOBNKCHGApi
     */
    public tABLECOBNKCHGChangeIDGet(changeID: number, options?: AxiosRequestConfig) {
        return TABLECOBNKCHGApiFp(this.configuration).tABLECOBNKCHGChangeIDGet(changeID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TABLECOBNKCHGApi
     */
    public tABLECOBNKCHGGet(options?: AxiosRequestConfig) {
        return TABLECOBNKCHGApiFp(this.configuration).tABLECOBNKCHGGet(options).then((request) => request(this.axios, this.basePath));
    }
}
