/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CONarrative } from '../models';
// @ts-ignore
import { PagedCONarrative } from '../models';
/**
 * CONarrativeApi - axios parameter creator
 * @export
 */
export const CONarrativeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CONarrative`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CONarrative} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativePost: async (body: CONarrative, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cONarrativePost', 'body', body)
            const localVarPath = `/CONarrative`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} textCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeTextCodeDelete: async (textCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textCode' is not null or undefined
            assertParamExists('cONarrativeTextCodeDelete', 'textCode', textCode)
            const localVarPath = `/CONarrative('{TextCode}')`
                .replace(`{${"TextCode"}}`, encodeURIComponent(String(textCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} textCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeTextCodeGet: async (textCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textCode' is not null or undefined
            assertParamExists('cONarrativeTextCodeGet', 'textCode', textCode)
            const localVarPath = `/CONarrative('{TextCode}')`
                .replace(`{${"TextCode"}}`, encodeURIComponent(String(textCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} textCode 
         * @param {CONarrative} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeTextCodePatch: async (textCode: string, body: CONarrative, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textCode' is not null or undefined
            assertParamExists('cONarrativeTextCodePatch', 'textCode', textCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cONarrativeTextCodePatch', 'body', body)
            const localVarPath = `/CONarrative('{TextCode}')`
                .replace(`{${"TextCode"}}`, encodeURIComponent(String(textCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} textCode 
         * @param {CONarrative} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeTextCodePut: async (textCode: string, body: CONarrative, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textCode' is not null or undefined
            assertParamExists('cONarrativeTextCodePut', 'textCode', textCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cONarrativeTextCodePut', 'body', body)
            const localVarPath = `/CONarrative('{TextCode}')`
                .replace(`{${"TextCode"}}`, encodeURIComponent(String(textCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CONarrativeApi - functional programming interface
 * @export
 */
export const CONarrativeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CONarrativeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cONarrativeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCONarrative>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cONarrativeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CONarrative} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cONarrativePost(body: CONarrative, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cONarrativePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} textCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cONarrativeTextCodeDelete(textCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cONarrativeTextCodeDelete(textCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} textCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cONarrativeTextCodeGet(textCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CONarrative>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cONarrativeTextCodeGet(textCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} textCode 
         * @param {CONarrative} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cONarrativeTextCodePatch(textCode: string, body: CONarrative, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cONarrativeTextCodePatch(textCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} textCode 
         * @param {CONarrative} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cONarrativeTextCodePut(textCode: string, body: CONarrative, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cONarrativeTextCodePut(textCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CONarrativeApi - factory interface
 * @export
 */
export const CONarrativeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CONarrativeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeGet(options?: any): AxiosPromise<PagedCONarrative> {
            return localVarFp.cONarrativeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CONarrative} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativePost(body: CONarrative, options?: any): AxiosPromise<void> {
            return localVarFp.cONarrativePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} textCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeTextCodeDelete(textCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.cONarrativeTextCodeDelete(textCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} textCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeTextCodeGet(textCode: string, options?: any): AxiosPromise<CONarrative> {
            return localVarFp.cONarrativeTextCodeGet(textCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} textCode 
         * @param {CONarrative} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeTextCodePatch(textCode: string, body: CONarrative, options?: any): AxiosPromise<void> {
            return localVarFp.cONarrativeTextCodePatch(textCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} textCode 
         * @param {CONarrative} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cONarrativeTextCodePut(textCode: string, body: CONarrative, options?: any): AxiosPromise<void> {
            return localVarFp.cONarrativeTextCodePut(textCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CONarrativeApi - interface
 * @export
 * @interface CONarrativeApi
 */
export interface CONarrativeApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApiInterface
     */
    cONarrativeGet(options?: AxiosRequestConfig): AxiosPromise<PagedCONarrative>;

    /**
     * 
     * @param {CONarrative} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApiInterface
     */
    cONarrativePost(body: CONarrative, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} textCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApiInterface
     */
    cONarrativeTextCodeDelete(textCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} textCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApiInterface
     */
    cONarrativeTextCodeGet(textCode: string, options?: AxiosRequestConfig): AxiosPromise<CONarrative>;

    /**
     * 
     * @param {string} textCode 
     * @param {CONarrative} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApiInterface
     */
    cONarrativeTextCodePatch(textCode: string, body: CONarrative, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} textCode 
     * @param {CONarrative} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApiInterface
     */
    cONarrativeTextCodePut(textCode: string, body: CONarrative, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CONarrativeApi - object-oriented interface
 * @export
 * @class CONarrativeApi
 * @extends {BaseAPI}
 */
export class CONarrativeApi extends BaseAPI implements CONarrativeApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApi
     */
    public cONarrativeGet(options?: AxiosRequestConfig) {
        return CONarrativeApiFp(this.configuration).cONarrativeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CONarrative} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApi
     */
    public cONarrativePost(body: CONarrative, options?: AxiosRequestConfig) {
        return CONarrativeApiFp(this.configuration).cONarrativePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} textCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApi
     */
    public cONarrativeTextCodeDelete(textCode: string, options?: AxiosRequestConfig) {
        return CONarrativeApiFp(this.configuration).cONarrativeTextCodeDelete(textCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} textCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApi
     */
    public cONarrativeTextCodeGet(textCode: string, options?: AxiosRequestConfig) {
        return CONarrativeApiFp(this.configuration).cONarrativeTextCodeGet(textCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} textCode 
     * @param {CONarrative} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApi
     */
    public cONarrativeTextCodePatch(textCode: string, body: CONarrative, options?: AxiosRequestConfig) {
        return CONarrativeApiFp(this.configuration).cONarrativeTextCodePatch(textCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} textCode 
     * @param {CONarrative} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CONarrativeApi
     */
    public cONarrativeTextCodePut(textCode: string, body: CONarrative, options?: AxiosRequestConfig) {
        return CONarrativeApiFp(this.configuration).cONarrativeTextCodePut(textCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
