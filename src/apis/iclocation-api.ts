/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ICLocation } from '../models';
// @ts-ignore
import { PagedICLocation } from '../models';
/**
 * ICLocationApi - axios parameter creator
 * @export
 */
export const ICLocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ICLocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationLocationCodeDelete: async (locationCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationCode' is not null or undefined
            assertParamExists('iCLocationLocationCodeDelete', 'locationCode', locationCode)
            const localVarPath = `/ICLocation('{LocationCode}')`
                .replace(`{${"LocationCode"}}`, encodeURIComponent(String(locationCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationLocationCodeGet: async (locationCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationCode' is not null or undefined
            assertParamExists('iCLocationLocationCodeGet', 'locationCode', locationCode)
            const localVarPath = `/ICLocation('{LocationCode}')`
                .replace(`{${"LocationCode"}}`, encodeURIComponent(String(locationCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {ICLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationLocationCodePatch: async (locationCode: string, body: ICLocation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationCode' is not null or undefined
            assertParamExists('iCLocationLocationCodePatch', 'locationCode', locationCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCLocationLocationCodePatch', 'body', body)
            const localVarPath = `/ICLocation('{LocationCode}')`
                .replace(`{${"LocationCode"}}`, encodeURIComponent(String(locationCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {ICLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationLocationCodePut: async (locationCode: string, body: ICLocation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationCode' is not null or undefined
            assertParamExists('iCLocationLocationCodePut', 'locationCode', locationCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCLocationLocationCodePut', 'body', body)
            const localVarPath = `/ICLocation('{LocationCode}')`
                .replace(`{${"LocationCode"}}`, encodeURIComponent(String(locationCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationPost: async (body: ICLocation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCLocationPost', 'body', body)
            const localVarPath = `/ICLocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ICLocationApi - functional programming interface
 * @export
 */
export const ICLocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ICLocationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCLocationGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedICLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCLocationGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCLocationLocationCodeDelete(locationCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCLocationLocationCodeDelete(locationCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCLocationLocationCodeGet(locationCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCLocationLocationCodeGet(locationCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {ICLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCLocationLocationCodePatch(locationCode: string, body: ICLocation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCLocationLocationCodePatch(locationCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {ICLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCLocationLocationCodePut(locationCode: string, body: ICLocation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCLocationLocationCodePut(locationCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ICLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCLocationPost(body: ICLocation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCLocationPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ICLocationApi - factory interface
 * @export
 */
export const ICLocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ICLocationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationGet(options?: any): AxiosPromise<PagedICLocation> {
            return localVarFp.iCLocationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationLocationCodeDelete(locationCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.iCLocationLocationCodeDelete(locationCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationLocationCodeGet(locationCode: string, options?: any): AxiosPromise<ICLocation> {
            return localVarFp.iCLocationLocationCodeGet(locationCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {ICLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationLocationCodePatch(locationCode: string, body: ICLocation, options?: any): AxiosPromise<void> {
            return localVarFp.iCLocationLocationCodePatch(locationCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationCode 
         * @param {ICLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationLocationCodePut(locationCode: string, body: ICLocation, options?: any): AxiosPromise<void> {
            return localVarFp.iCLocationLocationCodePut(locationCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICLocation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCLocationPost(body: ICLocation, options?: any): AxiosPromise<void> {
            return localVarFp.iCLocationPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ICLocationApi - interface
 * @export
 * @interface ICLocationApi
 */
export interface ICLocationApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApiInterface
     */
    iCLocationGet(options?: AxiosRequestConfig): AxiosPromise<PagedICLocation>;

    /**
     * 
     * @param {string} locationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApiInterface
     */
    iCLocationLocationCodeDelete(locationCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} locationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApiInterface
     */
    iCLocationLocationCodeGet(locationCode: string, options?: AxiosRequestConfig): AxiosPromise<ICLocation>;

    /**
     * 
     * @param {string} locationCode 
     * @param {ICLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApiInterface
     */
    iCLocationLocationCodePatch(locationCode: string, body: ICLocation, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} locationCode 
     * @param {ICLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApiInterface
     */
    iCLocationLocationCodePut(locationCode: string, body: ICLocation, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {ICLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApiInterface
     */
    iCLocationPost(body: ICLocation, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ICLocationApi - object-oriented interface
 * @export
 * @class ICLocationApi
 * @extends {BaseAPI}
 */
export class ICLocationApi extends BaseAPI implements ICLocationApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApi
     */
    public iCLocationGet(options?: AxiosRequestConfig) {
        return ICLocationApiFp(this.configuration).iCLocationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApi
     */
    public iCLocationLocationCodeDelete(locationCode: string, options?: AxiosRequestConfig) {
        return ICLocationApiFp(this.configuration).iCLocationLocationCodeDelete(locationCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApi
     */
    public iCLocationLocationCodeGet(locationCode: string, options?: AxiosRequestConfig) {
        return ICLocationApiFp(this.configuration).iCLocationLocationCodeGet(locationCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationCode 
     * @param {ICLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApi
     */
    public iCLocationLocationCodePatch(locationCode: string, body: ICLocation, options?: AxiosRequestConfig) {
        return ICLocationApiFp(this.configuration).iCLocationLocationCodePatch(locationCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} locationCode 
     * @param {ICLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApi
     */
    public iCLocationLocationCodePut(locationCode: string, body: ICLocation, options?: AxiosRequestConfig) {
        return ICLocationApiFp(this.configuration).iCLocationLocationCodePut(locationCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ICLocation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICLocationApi
     */
    public iCLocationPost(body: ICLocation, options?: AxiosRequestConfig) {
        return ICLocationApiFp(this.configuration).iCLocationPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
