/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ARSalesAreaBudget } from '../models';
// @ts-ignore
import { PagedARSalesAreaBudget } from '../models';
/**
 * ARSalesAreaBudgetApi - axios parameter creator
 * @export
 */
export const ARSalesAreaBudgetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaBudgetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ARSalesAreaBudget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaBudgetSalesAreaCodeGet: async (salesAreaCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesAreaCode' is not null or undefined
            assertParamExists('aRSalesAreaBudgetSalesAreaCodeGet', 'salesAreaCode', salesAreaCode)
            const localVarPath = `/ARSalesAreaBudget('{SalesAreaCode}')`
                .replace(`{${"SalesAreaCode"}}`, encodeURIComponent(String(salesAreaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesAreaBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaBudgetSalesAreaCodePatch: async (salesAreaCode: string, body: ARSalesAreaBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesAreaCode' is not null or undefined
            assertParamExists('aRSalesAreaBudgetSalesAreaCodePatch', 'salesAreaCode', salesAreaCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesAreaBudgetSalesAreaCodePatch', 'body', body)
            const localVarPath = `/ARSalesAreaBudget('{SalesAreaCode}')`
                .replace(`{${"SalesAreaCode"}}`, encodeURIComponent(String(salesAreaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesAreaBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaBudgetSalesAreaCodePut: async (salesAreaCode: string, body: ARSalesAreaBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesAreaCode' is not null or undefined
            assertParamExists('aRSalesAreaBudgetSalesAreaCodePut', 'salesAreaCode', salesAreaCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aRSalesAreaBudgetSalesAreaCodePut', 'body', body)
            const localVarPath = `/ARSalesAreaBudget('{SalesAreaCode}')`
                .replace(`{${"SalesAreaCode"}}`, encodeURIComponent(String(salesAreaCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ARSalesAreaBudgetApi - functional programming interface
 * @export
 */
export const ARSalesAreaBudgetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ARSalesAreaBudgetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaBudgetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedARSalesAreaBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaBudgetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaBudgetSalesAreaCodeGet(salesAreaCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ARSalesAreaBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaBudgetSalesAreaCodeGet(salesAreaCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesAreaBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaBudgetSalesAreaCodePatch(salesAreaCode: string, body: ARSalesAreaBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaBudgetSalesAreaCodePatch(salesAreaCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesAreaBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aRSalesAreaBudgetSalesAreaCodePut(salesAreaCode: string, body: ARSalesAreaBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aRSalesAreaBudgetSalesAreaCodePut(salesAreaCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ARSalesAreaBudgetApi - factory interface
 * @export
 */
export const ARSalesAreaBudgetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ARSalesAreaBudgetApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaBudgetGet(options?: any): AxiosPromise<PagedARSalesAreaBudget> {
            return localVarFp.aRSalesAreaBudgetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaBudgetSalesAreaCodeGet(salesAreaCode: string, options?: any): AxiosPromise<ARSalesAreaBudget> {
            return localVarFp.aRSalesAreaBudgetSalesAreaCodeGet(salesAreaCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesAreaBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaBudgetSalesAreaCodePatch(salesAreaCode: string, body: ARSalesAreaBudget, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesAreaBudgetSalesAreaCodePatch(salesAreaCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} salesAreaCode 
         * @param {ARSalesAreaBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aRSalesAreaBudgetSalesAreaCodePut(salesAreaCode: string, body: ARSalesAreaBudget, options?: any): AxiosPromise<void> {
            return localVarFp.aRSalesAreaBudgetSalesAreaCodePut(salesAreaCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ARSalesAreaBudgetApi - interface
 * @export
 * @interface ARSalesAreaBudgetApi
 */
export interface ARSalesAreaBudgetApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaBudgetApiInterface
     */
    aRSalesAreaBudgetGet(options?: AxiosRequestConfig): AxiosPromise<PagedARSalesAreaBudget>;

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaBudgetApiInterface
     */
    aRSalesAreaBudgetSalesAreaCodeGet(salesAreaCode: string, options?: AxiosRequestConfig): AxiosPromise<ARSalesAreaBudget>;

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {ARSalesAreaBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaBudgetApiInterface
     */
    aRSalesAreaBudgetSalesAreaCodePatch(salesAreaCode: string, body: ARSalesAreaBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {ARSalesAreaBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaBudgetApiInterface
     */
    aRSalesAreaBudgetSalesAreaCodePut(salesAreaCode: string, body: ARSalesAreaBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ARSalesAreaBudgetApi - object-oriented interface
 * @export
 * @class ARSalesAreaBudgetApi
 * @extends {BaseAPI}
 */
export class ARSalesAreaBudgetApi extends BaseAPI implements ARSalesAreaBudgetApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaBudgetApi
     */
    public aRSalesAreaBudgetGet(options?: AxiosRequestConfig) {
        return ARSalesAreaBudgetApiFp(this.configuration).aRSalesAreaBudgetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaBudgetApi
     */
    public aRSalesAreaBudgetSalesAreaCodeGet(salesAreaCode: string, options?: AxiosRequestConfig) {
        return ARSalesAreaBudgetApiFp(this.configuration).aRSalesAreaBudgetSalesAreaCodeGet(salesAreaCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {ARSalesAreaBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaBudgetApi
     */
    public aRSalesAreaBudgetSalesAreaCodePatch(salesAreaCode: string, body: ARSalesAreaBudget, options?: AxiosRequestConfig) {
        return ARSalesAreaBudgetApiFp(this.configuration).aRSalesAreaBudgetSalesAreaCodePatch(salesAreaCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} salesAreaCode 
     * @param {ARSalesAreaBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ARSalesAreaBudgetApi
     */
    public aRSalesAreaBudgetSalesAreaCodePut(salesAreaCode: string, body: ARSalesAreaBudget, options?: AxiosRequestConfig) {
        return ARSalesAreaBudgetApiFp(this.configuration).aRSalesAreaBudgetSalesAreaCodePut(salesAreaCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
