/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ICStockGroup } from '../models';
// @ts-ignore
import { PagedICStockGroup } from '../models';
/**
 * ICStockGroupApi - axios parameter creator
 * @export
 */
export const ICStockGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ICStockGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICStockGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupPost: async (body: ICStockGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCStockGroupPost', 'body', body)
            const localVarPath = `/ICStockGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupStockGroupCodeDelete: async (stockGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stockGroupCode' is not null or undefined
            assertParamExists('iCStockGroupStockGroupCodeDelete', 'stockGroupCode', stockGroupCode)
            const localVarPath = `/ICStockGroup('{StockGroupCode}')`
                .replace(`{${"StockGroupCode"}}`, encodeURIComponent(String(stockGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupStockGroupCodeGet: async (stockGroupCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stockGroupCode' is not null or undefined
            assertParamExists('iCStockGroupStockGroupCodeGet', 'stockGroupCode', stockGroupCode)
            const localVarPath = `/ICStockGroup('{StockGroupCode}')`
                .replace(`{${"StockGroupCode"}}`, encodeURIComponent(String(stockGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {ICStockGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupStockGroupCodePatch: async (stockGroupCode: string, body: ICStockGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stockGroupCode' is not null or undefined
            assertParamExists('iCStockGroupStockGroupCodePatch', 'stockGroupCode', stockGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCStockGroupStockGroupCodePatch', 'body', body)
            const localVarPath = `/ICStockGroup('{StockGroupCode}')`
                .replace(`{${"StockGroupCode"}}`, encodeURIComponent(String(stockGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {ICStockGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupStockGroupCodePut: async (stockGroupCode: string, body: ICStockGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stockGroupCode' is not null or undefined
            assertParamExists('iCStockGroupStockGroupCodePut', 'stockGroupCode', stockGroupCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iCStockGroupStockGroupCodePut', 'body', body)
            const localVarPath = `/ICStockGroup('{StockGroupCode}')`
                .replace(`{${"StockGroupCode"}}`, encodeURIComponent(String(stockGroupCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ICStockGroupApi - functional programming interface
 * @export
 */
export const ICStockGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ICStockGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCStockGroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedICStockGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCStockGroupGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ICStockGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCStockGroupPost(body: ICStockGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCStockGroupPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCStockGroupStockGroupCodeDelete(stockGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCStockGroupStockGroupCodeDelete(stockGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCStockGroupStockGroupCodeGet(stockGroupCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICStockGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCStockGroupStockGroupCodeGet(stockGroupCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {ICStockGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCStockGroupStockGroupCodePatch(stockGroupCode: string, body: ICStockGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCStockGroupStockGroupCodePatch(stockGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {ICStockGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iCStockGroupStockGroupCodePut(stockGroupCode: string, body: ICStockGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iCStockGroupStockGroupCodePut(stockGroupCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ICStockGroupApi - factory interface
 * @export
 */
export const ICStockGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ICStockGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupGet(options?: any): AxiosPromise<PagedICStockGroup> {
            return localVarFp.iCStockGroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICStockGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupPost(body: ICStockGroup, options?: any): AxiosPromise<void> {
            return localVarFp.iCStockGroupPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupStockGroupCodeDelete(stockGroupCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.iCStockGroupStockGroupCodeDelete(stockGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupStockGroupCodeGet(stockGroupCode: string, options?: any): AxiosPromise<ICStockGroup> {
            return localVarFp.iCStockGroupStockGroupCodeGet(stockGroupCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {ICStockGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupStockGroupCodePatch(stockGroupCode: string, body: ICStockGroup, options?: any): AxiosPromise<void> {
            return localVarFp.iCStockGroupStockGroupCodePatch(stockGroupCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stockGroupCode 
         * @param {ICStockGroup} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iCStockGroupStockGroupCodePut(stockGroupCode: string, body: ICStockGroup, options?: any): AxiosPromise<void> {
            return localVarFp.iCStockGroupStockGroupCodePut(stockGroupCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ICStockGroupApi - interface
 * @export
 * @interface ICStockGroupApi
 */
export interface ICStockGroupApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApiInterface
     */
    iCStockGroupGet(options?: AxiosRequestConfig): AxiosPromise<PagedICStockGroup>;

    /**
     * 
     * @param {ICStockGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApiInterface
     */
    iCStockGroupPost(body: ICStockGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} stockGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApiInterface
     */
    iCStockGroupStockGroupCodeDelete(stockGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} stockGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApiInterface
     */
    iCStockGroupStockGroupCodeGet(stockGroupCode: string, options?: AxiosRequestConfig): AxiosPromise<ICStockGroup>;

    /**
     * 
     * @param {string} stockGroupCode 
     * @param {ICStockGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApiInterface
     */
    iCStockGroupStockGroupCodePatch(stockGroupCode: string, body: ICStockGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} stockGroupCode 
     * @param {ICStockGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApiInterface
     */
    iCStockGroupStockGroupCodePut(stockGroupCode: string, body: ICStockGroup, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ICStockGroupApi - object-oriented interface
 * @export
 * @class ICStockGroupApi
 * @extends {BaseAPI}
 */
export class ICStockGroupApi extends BaseAPI implements ICStockGroupApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApi
     */
    public iCStockGroupGet(options?: AxiosRequestConfig) {
        return ICStockGroupApiFp(this.configuration).iCStockGroupGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ICStockGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApi
     */
    public iCStockGroupPost(body: ICStockGroup, options?: AxiosRequestConfig) {
        return ICStockGroupApiFp(this.configuration).iCStockGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stockGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApi
     */
    public iCStockGroupStockGroupCodeDelete(stockGroupCode: string, options?: AxiosRequestConfig) {
        return ICStockGroupApiFp(this.configuration).iCStockGroupStockGroupCodeDelete(stockGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stockGroupCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApi
     */
    public iCStockGroupStockGroupCodeGet(stockGroupCode: string, options?: AxiosRequestConfig) {
        return ICStockGroupApiFp(this.configuration).iCStockGroupStockGroupCodeGet(stockGroupCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stockGroupCode 
     * @param {ICStockGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApi
     */
    public iCStockGroupStockGroupCodePatch(stockGroupCode: string, body: ICStockGroup, options?: AxiosRequestConfig) {
        return ICStockGroupApiFp(this.configuration).iCStockGroupStockGroupCodePatch(stockGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stockGroupCode 
     * @param {ICStockGroup} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ICStockGroupApi
     */
    public iCStockGroupStockGroupCodePut(stockGroupCode: string, body: ICStockGroup, options?: AxiosRequestConfig) {
        return ICStockGroupApiFp(this.configuration).iCStockGroupStockGroupCodePut(stockGroupCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
