/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APTransaction } from '../models';
// @ts-ignore
import { PagedAPTransaction } from '../models';
/**
 * APTransactionApi - axios parameter creator
 * @export
 */
export const APTransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/APTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {APTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionPost: async (body: APTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPTransactionPost', 'body', body)
            const localVarPath = `/APTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDDelete: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('aPTransactionTransactionIDDelete', 'transactionID', transactionID)
            const localVarPath = `/APTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APTransaction/DuplicateContra is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDDuplicateContraGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('aPTransactionTransactionIDDuplicateContraGet', 'transactionID', transactionID)
            const localVarPath = `/APTransaction('{TransactionID}')/DuplicateContra`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APTransaction/Duplicate is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDDuplicateGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('aPTransactionTransactionIDDuplicateGet', 'transactionID', transactionID)
            const localVarPath = `/APTransaction('{TransactionID}')/Duplicate`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDGet: async (transactionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('aPTransactionTransactionIDGet', 'transactionID', transactionID)
            const localVarPath = `/APTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {APTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDPatch: async (transactionID: number, body: APTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('aPTransactionTransactionIDPatch', 'transactionID', transactionID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPTransactionTransactionIDPatch', 'body', body)
            const localVarPath = `/APTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APTransaction/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} transactionID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDPrintGet: async (transactionID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('aPTransactionTransactionIDPrintGet', 'transactionID', transactionID)
            const localVarPath = `/APTransaction('{TransactionID}')/Print`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {APTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDPut: async (transactionID: number, body: APTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('aPTransactionTransactionIDPut', 'transactionID', transactionID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('aPTransactionTransactionIDPut', 'body', body)
            const localVarPath = `/APTransaction('{TransactionID}')`
                .replace(`{${"TransactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APTransactionApi - functional programming interface
 * @export
 */
export const APTransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APTransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPTransactionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedAPTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPTransactionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {APTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPTransactionPost(body: APTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPTransactionPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPTransactionTransactionIDDelete(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APTransaction/DuplicateContra is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPTransactionTransactionIDDuplicateContraGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APTransaction/Duplicate is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPTransactionTransactionIDDuplicateGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPTransactionTransactionIDDuplicateGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPTransactionTransactionIDGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {APTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPTransactionTransactionIDPatch(transactionID: number, body: APTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPTransactionTransactionIDPatch(transactionID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APTransaction/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} transactionID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPTransactionTransactionIDPrintGet(transactionID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPTransactionTransactionIDPrintGet(transactionID, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {APTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aPTransactionTransactionIDPut(transactionID: number, body: APTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aPTransactionTransactionIDPut(transactionID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APTransactionApi - factory interface
 * @export
 */
export const APTransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APTransactionApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionGet(options?: any): AxiosPromise<PagedAPTransaction> {
            return localVarFp.aPTransactionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {APTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionPost(body: APTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.aPTransactionPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDDelete(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPTransactionTransactionIDDelete(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * APTransaction/DuplicateContra is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPTransactionTransactionIDDuplicateContraGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * APTransaction/Duplicate is an ODATA function - use GET to call
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDDuplicateGet(transactionID: number, options?: any): AxiosPromise<void> {
            return localVarFp.aPTransactionTransactionIDDuplicateGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDGet(transactionID: number, options?: any): AxiosPromise<APTransaction> {
            return localVarFp.aPTransactionTransactionIDGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {APTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDPatch(transactionID: number, body: APTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.aPTransactionTransactionIDPatch(transactionID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * APTransaction/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} transactionID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDPrintGet(transactionID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.aPTransactionTransactionIDPrintGet(transactionID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} transactionID 
         * @param {APTransaction} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aPTransactionTransactionIDPut(transactionID: number, body: APTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.aPTransactionTransactionIDPut(transactionID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APTransactionApi - interface
 * @export
 * @interface APTransactionApi
 */
export interface APTransactionApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApiInterface
     */
    aPTransactionGet(options?: AxiosRequestConfig): AxiosPromise<PagedAPTransaction>;

    /**
     * 
     * @param {APTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApiInterface
     */
    aPTransactionPost(body: APTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApiInterface
     */
    aPTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APTransaction/DuplicateContra is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApiInterface
     */
    aPTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APTransaction/Duplicate is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApiInterface
     */
    aPTransactionTransactionIDDuplicateGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApiInterface
     */
    aPTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig): AxiosPromise<APTransaction>;

    /**
     * 
     * @param {number} transactionID 
     * @param {APTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApiInterface
     */
    aPTransactionTransactionIDPatch(transactionID: number, body: APTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * APTransaction/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} transactionID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApiInterface
     */
    aPTransactionTransactionIDPrintGet(transactionID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} transactionID 
     * @param {APTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApiInterface
     */
    aPTransactionTransactionIDPut(transactionID: number, body: APTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * APTransactionApi - object-oriented interface
 * @export
 * @class APTransactionApi
 * @extends {BaseAPI}
 */
export class APTransactionApi extends BaseAPI implements APTransactionApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApi
     */
    public aPTransactionGet(options?: AxiosRequestConfig) {
        return APTransactionApiFp(this.configuration).aPTransactionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {APTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApi
     */
    public aPTransactionPost(body: APTransaction, options?: AxiosRequestConfig) {
        return APTransactionApiFp(this.configuration).aPTransactionPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApi
     */
    public aPTransactionTransactionIDDelete(transactionID: number, options?: AxiosRequestConfig) {
        return APTransactionApiFp(this.configuration).aPTransactionTransactionIDDelete(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APTransaction/DuplicateContra is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApi
     */
    public aPTransactionTransactionIDDuplicateContraGet(transactionID: number, options?: AxiosRequestConfig) {
        return APTransactionApiFp(this.configuration).aPTransactionTransactionIDDuplicateContraGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APTransaction/Duplicate is an ODATA function - use GET to call
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApi
     */
    public aPTransactionTransactionIDDuplicateGet(transactionID: number, options?: AxiosRequestConfig) {
        return APTransactionApiFp(this.configuration).aPTransactionTransactionIDDuplicateGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApi
     */
    public aPTransactionTransactionIDGet(transactionID: number, options?: AxiosRequestConfig) {
        return APTransactionApiFp(this.configuration).aPTransactionTransactionIDGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {APTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApi
     */
    public aPTransactionTransactionIDPatch(transactionID: number, body: APTransaction, options?: AxiosRequestConfig) {
        return APTransactionApiFp(this.configuration).aPTransactionTransactionIDPatch(transactionID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APTransaction/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} transactionID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApi
     */
    public aPTransactionTransactionIDPrintGet(transactionID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return APTransactionApiFp(this.configuration).aPTransactionTransactionIDPrintGet(transactionID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} transactionID 
     * @param {APTransaction} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APTransactionApi
     */
    public aPTransactionTransactionIDPut(transactionID: number, body: APTransaction, options?: AxiosRequestConfig) {
        return APTransactionApiFp(this.configuration).aPTransactionTransactionIDPut(transactionID, body, options).then((request) => request(this.axios, this.basePath));
    }
}
