/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JCBudget } from '../models';
// @ts-ignore
import { PagedJCBudget } from '../models';
/**
 * JCBudgetApi - axios parameter creator
 * @export
 */
export const JCBudgetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBudgetGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/JCBudget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBudgetJobCodeGet: async (jobCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCBudgetJobCodeGet', 'jobCode', jobCode)
            const localVarPath = `/JCBudget('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBudgetJobCodePatch: async (jobCode: string, body: JCBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCBudgetJobCodePatch', 'jobCode', jobCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCBudgetJobCodePatch', 'body', body)
            const localVarPath = `/JCBudget('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBudgetJobCodePut: async (jobCode: string, body: JCBudget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCode' is not null or undefined
            assertParamExists('jCBudgetJobCodePut', 'jobCode', jobCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCBudgetJobCodePut', 'body', body)
            const localVarPath = `/JCBudget('{JobCode}')`
                .replace(`{${"JobCode"}}`, encodeURIComponent(String(jobCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JCBudgetApi - functional programming interface
 * @export
 */
export const JCBudgetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JCBudgetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBudgetGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedJCBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBudgetGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBudgetJobCodeGet(jobCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JCBudget>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBudgetJobCodeGet(jobCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBudgetJobCodePatch(jobCode: string, body: JCBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBudgetJobCodePatch(jobCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCBudgetJobCodePut(jobCode: string, body: JCBudget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCBudgetJobCodePut(jobCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JCBudgetApi - factory interface
 * @export
 */
export const JCBudgetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JCBudgetApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBudgetGet(options?: any): AxiosPromise<PagedJCBudget> {
            return localVarFp.jCBudgetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBudgetJobCodeGet(jobCode: string, options?: any): AxiosPromise<JCBudget> {
            return localVarFp.jCBudgetJobCodeGet(jobCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBudgetJobCodePatch(jobCode: string, body: JCBudget, options?: any): AxiosPromise<void> {
            return localVarFp.jCBudgetJobCodePatch(jobCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobCode 
         * @param {JCBudget} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCBudgetJobCodePut(jobCode: string, body: JCBudget, options?: any): AxiosPromise<void> {
            return localVarFp.jCBudgetJobCodePut(jobCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JCBudgetApi - interface
 * @export
 * @interface JCBudgetApi
 */
export interface JCBudgetApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBudgetApiInterface
     */
    jCBudgetGet(options?: AxiosRequestConfig): AxiosPromise<PagedJCBudget>;

    /**
     * 
     * @param {string} jobCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBudgetApiInterface
     */
    jCBudgetJobCodeGet(jobCode: string, options?: AxiosRequestConfig): AxiosPromise<JCBudget>;

    /**
     * 
     * @param {string} jobCode 
     * @param {JCBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBudgetApiInterface
     */
    jCBudgetJobCodePatch(jobCode: string, body: JCBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} jobCode 
     * @param {JCBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBudgetApiInterface
     */
    jCBudgetJobCodePut(jobCode: string, body: JCBudget, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * JCBudgetApi - object-oriented interface
 * @export
 * @class JCBudgetApi
 * @extends {BaseAPI}
 */
export class JCBudgetApi extends BaseAPI implements JCBudgetApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBudgetApi
     */
    public jCBudgetGet(options?: AxiosRequestConfig) {
        return JCBudgetApiFp(this.configuration).jCBudgetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBudgetApi
     */
    public jCBudgetJobCodeGet(jobCode: string, options?: AxiosRequestConfig) {
        return JCBudgetApiFp(this.configuration).jCBudgetJobCodeGet(jobCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {JCBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBudgetApi
     */
    public jCBudgetJobCodePatch(jobCode: string, body: JCBudget, options?: AxiosRequestConfig) {
        return JCBudgetApiFp(this.configuration).jCBudgetJobCodePatch(jobCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} jobCode 
     * @param {JCBudget} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCBudgetApi
     */
    public jCBudgetJobCodePut(jobCode: string, body: JCBudget, options?: AxiosRequestConfig) {
        return JCBudgetApiFp(this.configuration).jCBudgetJobCodePut(jobCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
