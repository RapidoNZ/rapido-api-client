/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { INShipper } from '../models';
// @ts-ignore
import { PagedINShipper } from '../models';
/**
 * INShipperApi - axios parameter creator
 * @export
 */
export const INShipperApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/INShipper`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {INShipper} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperPost: async (body: INShipper, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iNShipperPost', 'body', body)
            const localVarPath = `/INShipper`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperShipperCodeDelete: async (shipperCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipperCode' is not null or undefined
            assertParamExists('iNShipperShipperCodeDelete', 'shipperCode', shipperCode)
            const localVarPath = `/INShipper('{ShipperCode}')`
                .replace(`{${"ShipperCode"}}`, encodeURIComponent(String(shipperCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperShipperCodeGet: async (shipperCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipperCode' is not null or undefined
            assertParamExists('iNShipperShipperCodeGet', 'shipperCode', shipperCode)
            const localVarPath = `/INShipper('{ShipperCode}')`
                .replace(`{${"ShipperCode"}}`, encodeURIComponent(String(shipperCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {INShipper} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperShipperCodePatch: async (shipperCode: string, body: INShipper, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipperCode' is not null or undefined
            assertParamExists('iNShipperShipperCodePatch', 'shipperCode', shipperCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iNShipperShipperCodePatch', 'body', body)
            const localVarPath = `/INShipper('{ShipperCode}')`
                .replace(`{${"ShipperCode"}}`, encodeURIComponent(String(shipperCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {INShipper} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperShipperCodePut: async (shipperCode: string, body: INShipper, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipperCode' is not null or undefined
            assertParamExists('iNShipperShipperCodePut', 'shipperCode', shipperCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iNShipperShipperCodePut', 'body', body)
            const localVarPath = `/INShipper('{ShipperCode}')`
                .replace(`{${"ShipperCode"}}`, encodeURIComponent(String(shipperCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * INShipperApi - functional programming interface
 * @export
 */
export const INShipperApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = INShipperApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNShipperGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedINShipper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNShipperGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {INShipper} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNShipperPost(body: INShipper, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNShipperPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNShipperShipperCodeDelete(shipperCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNShipperShipperCodeDelete(shipperCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNShipperShipperCodeGet(shipperCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<INShipper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNShipperShipperCodeGet(shipperCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {INShipper} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNShipperShipperCodePatch(shipperCode: string, body: INShipper, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNShipperShipperCodePatch(shipperCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {INShipper} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNShipperShipperCodePut(shipperCode: string, body: INShipper, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNShipperShipperCodePut(shipperCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * INShipperApi - factory interface
 * @export
 */
export const INShipperApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = INShipperApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperGet(options?: any): AxiosPromise<PagedINShipper> {
            return localVarFp.iNShipperGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {INShipper} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperPost(body: INShipper, options?: any): AxiosPromise<void> {
            return localVarFp.iNShipperPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperShipperCodeDelete(shipperCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.iNShipperShipperCodeDelete(shipperCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperShipperCodeGet(shipperCode: string, options?: any): AxiosPromise<INShipper> {
            return localVarFp.iNShipperShipperCodeGet(shipperCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {INShipper} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperShipperCodePatch(shipperCode: string, body: INShipper, options?: any): AxiosPromise<void> {
            return localVarFp.iNShipperShipperCodePatch(shipperCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} shipperCode 
         * @param {INShipper} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNShipperShipperCodePut(shipperCode: string, body: INShipper, options?: any): AxiosPromise<void> {
            return localVarFp.iNShipperShipperCodePut(shipperCode, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * INShipperApi - interface
 * @export
 * @interface INShipperApi
 */
export interface INShipperApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApiInterface
     */
    iNShipperGet(options?: AxiosRequestConfig): AxiosPromise<PagedINShipper>;

    /**
     * 
     * @param {INShipper} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApiInterface
     */
    iNShipperPost(body: INShipper, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} shipperCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApiInterface
     */
    iNShipperShipperCodeDelete(shipperCode: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} shipperCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApiInterface
     */
    iNShipperShipperCodeGet(shipperCode: string, options?: AxiosRequestConfig): AxiosPromise<INShipper>;

    /**
     * 
     * @param {string} shipperCode 
     * @param {INShipper} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApiInterface
     */
    iNShipperShipperCodePatch(shipperCode: string, body: INShipper, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} shipperCode 
     * @param {INShipper} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApiInterface
     */
    iNShipperShipperCodePut(shipperCode: string, body: INShipper, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * INShipperApi - object-oriented interface
 * @export
 * @class INShipperApi
 * @extends {BaseAPI}
 */
export class INShipperApi extends BaseAPI implements INShipperApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApi
     */
    public iNShipperGet(options?: AxiosRequestConfig) {
        return INShipperApiFp(this.configuration).iNShipperGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {INShipper} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApi
     */
    public iNShipperPost(body: INShipper, options?: AxiosRequestConfig) {
        return INShipperApiFp(this.configuration).iNShipperPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shipperCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApi
     */
    public iNShipperShipperCodeDelete(shipperCode: string, options?: AxiosRequestConfig) {
        return INShipperApiFp(this.configuration).iNShipperShipperCodeDelete(shipperCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shipperCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApi
     */
    public iNShipperShipperCodeGet(shipperCode: string, options?: AxiosRequestConfig) {
        return INShipperApiFp(this.configuration).iNShipperShipperCodeGet(shipperCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shipperCode 
     * @param {INShipper} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApi
     */
    public iNShipperShipperCodePatch(shipperCode: string, body: INShipper, options?: AxiosRequestConfig) {
        return INShipperApiFp(this.configuration).iNShipperShipperCodePatch(shipperCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} shipperCode 
     * @param {INShipper} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INShipperApi
     */
    public iNShipperShipperCodePut(shipperCode: string, body: INShipper, options?: AxiosRequestConfig) {
        return INShipperApiFp(this.configuration).iNShipperShipperCodePut(shipperCode, body, options).then((request) => request(this.axios, this.basePath));
    }
}
