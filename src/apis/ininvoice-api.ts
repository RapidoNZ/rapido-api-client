/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { INInvoice } from '../models';
// @ts-ignore
import { PagedINInvoice } from '../models';
/**
 * INInvoiceApi - axios parameter creator
 * @export
 */
export const INInvoiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDelete: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDDelete', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/DuplicateCredit is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDuplicateCreditGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDDuplicateCreditGet', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/DuplicateCredit`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/DuplicateInvoice is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDuplicateInvoiceGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDDuplicateInvoiceGet', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/DuplicateInvoice`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/DuplicateQuote is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDuplicateQuoteGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDDuplicateQuoteGet', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/DuplicateQuote`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/DuplicateStandingInvoice is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDuplicateStandingInvoiceGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDDuplicateStandingInvoiceGet', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/DuplicateStandingInvoice`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDGet: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDGet', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/InvoiceFromQuote is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [orderNo] 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDInvoiceFromQuotePost: async (documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDInvoiceFromQuotePost', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/InvoiceFromQuote`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderNo !== undefined) {
                localVarQueryParameter['OrderNo'] = orderNo;
            }

            if (documentDate !== undefined) {
                localVarQueryParameter['DocumentDate'] = documentDate;
            }

            if (periodID !== undefined) {
                localVarQueryParameter['PeriodID'] = periodID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/ManualInvoice is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDManualInvoicePost: async (documentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDManualInvoicePost', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/ManualInvoice`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/OrderFromQuote is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [orderNo] 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDOrderFromQuotePost: async (documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDOrderFromQuotePost', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/OrderFromQuote`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderNo !== undefined) {
                localVarQueryParameter['OrderNo'] = orderNo;
            }

            if (documentDate !== undefined) {
                localVarQueryParameter['DocumentDate'] = documentDate;
            }

            if (periodID !== undefined) {
                localVarQueryParameter['PeriodID'] = periodID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {INInvoice} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPatch: async (documentID: number, body: INInvoice, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDPatch', 'documentID', documentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDPatch', 'body', body)
            const localVarPath = `/INInvoice('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/Post is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {boolean} [cashSale] 
         * @param {boolean} [bankThrough] 
         * @param {string} [bankAccountCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPostPost: async (documentID: number, cashSale?: boolean, bankThrough?: boolean, bankAccountCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDPostPost', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/Post`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cashSale !== undefined) {
                localVarQueryParameter['CashSale'] = cashSale;
            }

            if (bankThrough !== undefined) {
                localVarQueryParameter['BankThrough'] = bankThrough;
            }

            if (bankAccountCode !== undefined) {
                localVarQueryParameter['BankAccountCode'] = bankAccountCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {string} [cashSale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPrintGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', cashSale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDPrintGet', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/Print`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (cashSale !== undefined) {
                localVarQueryParameter['CashSale'] = cashSale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPrintLabelGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDPrintLabelGet', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/PrintLabel`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/PrintPackingSlip is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPrintPackingSlipGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDPrintPackingSlipGet', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/PrintPackingSlip`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * INInvoice/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPrintProductLabelsGet: async (documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDPrintProductLabelsGet', 'documentID', documentID)
            const localVarPath = `/INInvoice('{DocumentID}')/PrintProductLabels`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }

            if (numberOfLabelCopies !== undefined) {
                localVarQueryParameter['NumberOfLabelCopies'] = numberOfLabelCopies;
            }

            if (startFromLabel !== undefined) {
                localVarQueryParameter['StartFromLabel'] = startFromLabel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} documentID 
         * @param {INInvoice} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPut: async (documentID: number, body: INInvoice, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentID' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDPut', 'documentID', documentID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iNInvoiceDocumentIDPut', 'body', body)
            const localVarPath = `/INInvoice('{DocumentID}')`
                .replace(`{${"DocumentID"}}`, encodeURIComponent(String(documentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/INInvoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {INInvoice} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoicePost: async (body: INInvoice, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iNInvoicePost', 'body', body)
            const localVarPath = `/INInvoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * INInvoiceApi - functional programming interface
 * @export
 */
export const INInvoiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = INInvoiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDDelete(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDDelete(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/DuplicateCredit is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDDuplicateCreditGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDDuplicateCreditGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/DuplicateInvoice is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDDuplicateInvoiceGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDDuplicateInvoiceGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/DuplicateQuote is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDDuplicateQuoteGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDDuplicateQuoteGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/DuplicateStandingInvoice is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDDuplicateStandingInvoiceGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDDuplicateStandingInvoiceGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDGet(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<INInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDGet(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/InvoiceFromQuote is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [orderNo] 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDInvoiceFromQuotePost(documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDInvoiceFromQuotePost(documentID, orderNo, documentDate, periodID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/ManualInvoice is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDManualInvoicePost(documentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDManualInvoicePost(documentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/OrderFromQuote is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [orderNo] 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDOrderFromQuotePost(documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDOrderFromQuotePost(documentID, orderNo, documentDate, periodID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {INInvoice} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDPatch(documentID: number, body: INInvoice, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDPatch(documentID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/Post is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {boolean} [cashSale] 
         * @param {boolean} [bankThrough] 
         * @param {string} [bankAccountCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDPostPost(documentID: number, cashSale?: boolean, bankThrough?: boolean, bankAccountCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDPostPost(documentID, cashSale, bankThrough, bankAccountCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {string} [cashSale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', cashSale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, cashSale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDPrintLabelGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDPrintLabelGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/PrintPackingSlip is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDPrintPackingSlipGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDPrintPackingSlipGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * INInvoice/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDPrintProductLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} documentID 
         * @param {INInvoice} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceDocumentIDPut(documentID: number, body: INInvoice, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceDocumentIDPut(documentID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoiceGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedINInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoiceGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {INInvoice} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iNInvoicePost(body: INInvoice, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iNInvoicePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * INInvoiceApi - factory interface
 * @export
 */
export const INInvoiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = INInvoiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDelete(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDDelete(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/DuplicateCredit is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDuplicateCreditGet(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDDuplicateCreditGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/DuplicateInvoice is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDuplicateInvoiceGet(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDDuplicateInvoiceGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/DuplicateQuote is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDuplicateQuoteGet(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDDuplicateQuoteGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/DuplicateStandingInvoice is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDDuplicateStandingInvoiceGet(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDDuplicateStandingInvoiceGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDGet(documentID: number, options?: any): AxiosPromise<INInvoice> {
            return localVarFp.iNInvoiceDocumentIDGet(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/InvoiceFromQuote is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [orderNo] 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDInvoiceFromQuotePost(documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDInvoiceFromQuotePost(documentID, orderNo, documentDate, periodID, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/ManualInvoice is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDManualInvoicePost(documentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDManualInvoicePost(documentID, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/OrderFromQuote is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {string} [orderNo] 
         * @param {string} [documentDate] 
         * @param {number} [periodID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDOrderFromQuotePost(documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDOrderFromQuotePost(documentID, orderNo, documentDate, periodID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {INInvoice} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPatch(documentID: number, body: INInvoice, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDPatch(documentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/Post is an ODATA action - use POST to call
         * @param {number} documentID 
         * @param {boolean} [cashSale] 
         * @param {boolean} [bankThrough] 
         * @param {string} [bankAccountCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPostPost(documentID: number, cashSale?: boolean, bankThrough?: boolean, bankAccountCode?: string, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDPostPost(documentID, cashSale, bankThrough, bankAccountCode, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {string} [cashSale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', cashSale?: string, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, cashSale, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/PrintLabel is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPrintLabelGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDPrintLabelGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/PrintPackingSlip is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPrintPackingSlipGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDPrintPackingSlipGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * INInvoice/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
         * @param {number} documentID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {number} [numberOfLabelCopies] 
         * @param {number} [startFromLabel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDPrintProductLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} documentID 
         * @param {INInvoice} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceDocumentIDPut(documentID: number, body: INInvoice, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoiceDocumentIDPut(documentID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoiceGet(options?: any): AxiosPromise<PagedINInvoice> {
            return localVarFp.iNInvoiceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {INInvoice} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iNInvoicePost(body: INInvoice, options?: any): AxiosPromise<void> {
            return localVarFp.iNInvoicePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * INInvoiceApi - interface
 * @export
 * @interface INInvoiceApi
 */
export interface INInvoiceApiInterface {
    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDDelete(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/DuplicateCredit is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDDuplicateCreditGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/DuplicateInvoice is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDDuplicateInvoiceGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/DuplicateQuote is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDDuplicateQuoteGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/DuplicateStandingInvoice is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDDuplicateStandingInvoiceGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDGet(documentID: number, options?: AxiosRequestConfig): AxiosPromise<INInvoice>;

    /**
     * INInvoice/InvoiceFromQuote is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [orderNo] 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDInvoiceFromQuotePost(documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/ManualInvoice is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDManualInvoicePost(documentID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/OrderFromQuote is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [orderNo] 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDOrderFromQuotePost(documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {INInvoice} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDPatch(documentID: number, body: INInvoice, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/Post is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {boolean} [cashSale] 
     * @param {boolean} [bankThrough] 
     * @param {string} [bankAccountCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDPostPost(documentID: number, cashSale?: boolean, bankThrough?: boolean, bankAccountCode?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {string} [cashSale] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', cashSale?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDPrintLabelGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/PrintPackingSlip is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDPrintPackingSlipGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * INInvoice/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} documentID 
     * @param {INInvoice} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceDocumentIDPut(documentID: number, body: INInvoice, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoiceGet(options?: AxiosRequestConfig): AxiosPromise<PagedINInvoice>;

    /**
     * 
     * @param {INInvoice} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApiInterface
     */
    iNInvoicePost(body: INInvoice, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * INInvoiceApi - object-oriented interface
 * @export
 * @class INInvoiceApi
 * @extends {BaseAPI}
 */
export class INInvoiceApi extends BaseAPI implements INInvoiceApiInterface {
    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDDelete(documentID: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDDelete(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/DuplicateCredit is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDDuplicateCreditGet(documentID: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDDuplicateCreditGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/DuplicateInvoice is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDDuplicateInvoiceGet(documentID: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDDuplicateInvoiceGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/DuplicateQuote is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDDuplicateQuoteGet(documentID: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDDuplicateQuoteGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/DuplicateStandingInvoice is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDDuplicateStandingInvoiceGet(documentID: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDDuplicateStandingInvoiceGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDGet(documentID: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDGet(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/InvoiceFromQuote is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [orderNo] 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDInvoiceFromQuotePost(documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDInvoiceFromQuotePost(documentID, orderNo, documentDate, periodID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/ManualInvoice is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDManualInvoicePost(documentID: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDManualInvoicePost(documentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/OrderFromQuote is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {string} [orderNo] 
     * @param {string} [documentDate] 
     * @param {number} [periodID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDOrderFromQuotePost(documentID: number, orderNo?: string, documentDate?: string, periodID?: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDOrderFromQuotePost(documentID, orderNo, documentDate, periodID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {INInvoice} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDPatch(documentID: number, body: INInvoice, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDPatch(documentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/Post is an ODATA action - use POST to call
     * @param {number} documentID 
     * @param {boolean} [cashSale] 
     * @param {boolean} [bankThrough] 
     * @param {string} [bankAccountCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDPostPost(documentID: number, cashSale?: boolean, bankThrough?: boolean, bankAccountCode?: string, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDPostPost(documentID, cashSale, bankThrough, bankAccountCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {string} [cashSale] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDPrintGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', cashSale?: string, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDPrintGet(documentID, destination, reportFileName, format, printerName, fileName, intent, cashSale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/PrintLabel is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDPrintLabelGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDPrintLabelGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/PrintPackingSlip is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDPrintPackingSlipGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDPrintPackingSlipGet(documentID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * INInvoice/PrintProductLabels is an ODATA function and Action - use either GET or POST to call
     * @param {number} documentID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {number} [numberOfLabelCopies] 
     * @param {number} [startFromLabel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDPrintProductLabelsGet(documentID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', numberOfLabelCopies?: number, startFromLabel?: number, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDPrintProductLabelsGet(documentID, destination, reportFileName, format, printerName, fileName, intent, numberOfLabelCopies, startFromLabel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} documentID 
     * @param {INInvoice} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceDocumentIDPut(documentID: number, body: INInvoice, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceDocumentIDPut(documentID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoiceGet(options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoiceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {INInvoice} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof INInvoiceApi
     */
    public iNInvoicePost(body: INInvoice, options?: AxiosRequestConfig) {
        return INInvoiceApiFp(this.configuration).iNInvoicePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
