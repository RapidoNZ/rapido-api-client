/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBStatement } from '../models';
// @ts-ignore
import { PagedCBStatement } from '../models';
/**
 * CBStatementApi - axios parameter creator
 * @export
 */
export const CBStatementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBStatement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CBStatement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementPost: async (body: CBStatement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBStatementPost', 'body', body)
            const localVarPath = `/CBStatement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} statementID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDDelete: async (statementID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statementID' is not null or undefined
            assertParamExists('cBStatementStatementIDDelete', 'statementID', statementID)
            const localVarPath = `/CBStatement('{StatementID}')`
                .replace(`{${"StatementID"}}`, encodeURIComponent(String(statementID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} statementID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDGet: async (statementID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statementID' is not null or undefined
            assertParamExists('cBStatementStatementIDGet', 'statementID', statementID)
            const localVarPath = `/CBStatement('{StatementID}')`
                .replace(`{${"StatementID"}}`, encodeURIComponent(String(statementID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} statementID 
         * @param {CBStatement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDPatch: async (statementID: number, body: CBStatement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statementID' is not null or undefined
            assertParamExists('cBStatementStatementIDPatch', 'statementID', statementID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBStatementStatementIDPatch', 'body', body)
            const localVarPath = `/CBStatement('{StatementID}')`
                .replace(`{${"StatementID"}}`, encodeURIComponent(String(statementID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CBStatement/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} statementID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDPrintGet: async (statementID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statementID' is not null or undefined
            assertParamExists('cBStatementStatementIDPrintGet', 'statementID', statementID)
            const localVarPath = `/CBStatement('{StatementID}')/Print`
                .replace(`{${"StatementID"}}`, encodeURIComponent(String(statementID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} statementID 
         * @param {CBStatement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDPut: async (statementID: number, body: CBStatement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statementID' is not null or undefined
            assertParamExists('cBStatementStatementIDPut', 'statementID', statementID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBStatementStatementIDPut', 'body', body)
            const localVarPath = `/CBStatement('{StatementID}')`
                .replace(`{${"StatementID"}}`, encodeURIComponent(String(statementID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBStatementApi - functional programming interface
 * @export
 */
export const CBStatementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBStatementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBStatementGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBStatement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBStatementGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CBStatement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBStatementPost(body: CBStatement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBStatementPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} statementID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBStatementStatementIDDelete(statementID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBStatementStatementIDDelete(statementID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} statementID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBStatementStatementIDGet(statementID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBStatement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBStatementStatementIDGet(statementID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} statementID 
         * @param {CBStatement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBStatementStatementIDPatch(statementID: number, body: CBStatement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBStatementStatementIDPatch(statementID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CBStatement/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} statementID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBStatementStatementIDPrintGet(statementID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBStatementStatementIDPrintGet(statementID, destination, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} statementID 
         * @param {CBStatement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBStatementStatementIDPut(statementID: number, body: CBStatement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBStatementStatementIDPut(statementID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBStatementApi - factory interface
 * @export
 */
export const CBStatementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBStatementApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementGet(options?: any): AxiosPromise<PagedCBStatement> {
            return localVarFp.cBStatementGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CBStatement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementPost(body: CBStatement, options?: any): AxiosPromise<void> {
            return localVarFp.cBStatementPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} statementID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDDelete(statementID: number, options?: any): AxiosPromise<void> {
            return localVarFp.cBStatementStatementIDDelete(statementID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} statementID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDGet(statementID: number, options?: any): AxiosPromise<CBStatement> {
            return localVarFp.cBStatementStatementIDGet(statementID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} statementID 
         * @param {CBStatement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDPatch(statementID: number, body: CBStatement, options?: any): AxiosPromise<void> {
            return localVarFp.cBStatementStatementIDPatch(statementID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * CBStatement/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} statementID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDPrintGet(statementID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.cBStatementStatementIDPrintGet(statementID, destination, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} statementID 
         * @param {CBStatement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBStatementStatementIDPut(statementID: number, body: CBStatement, options?: any): AxiosPromise<void> {
            return localVarFp.cBStatementStatementIDPut(statementID, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBStatementApi - interface
 * @export
 * @interface CBStatementApi
 */
export interface CBStatementApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApiInterface
     */
    cBStatementGet(options?: AxiosRequestConfig): AxiosPromise<PagedCBStatement>;

    /**
     * 
     * @param {CBStatement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApiInterface
     */
    cBStatementPost(body: CBStatement, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} statementID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApiInterface
     */
    cBStatementStatementIDDelete(statementID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} statementID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApiInterface
     */
    cBStatementStatementIDGet(statementID: number, options?: AxiosRequestConfig): AxiosPromise<CBStatement>;

    /**
     * 
     * @param {number} statementID 
     * @param {CBStatement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApiInterface
     */
    cBStatementStatementIDPatch(statementID: number, body: CBStatement, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CBStatement/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} statementID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApiInterface
     */
    cBStatementStatementIDPrintGet(statementID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} statementID 
     * @param {CBStatement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApiInterface
     */
    cBStatementStatementIDPut(statementID: number, body: CBStatement, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CBStatementApi - object-oriented interface
 * @export
 * @class CBStatementApi
 * @extends {BaseAPI}
 */
export class CBStatementApi extends BaseAPI implements CBStatementApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApi
     */
    public cBStatementGet(options?: AxiosRequestConfig) {
        return CBStatementApiFp(this.configuration).cBStatementGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CBStatement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApi
     */
    public cBStatementPost(body: CBStatement, options?: AxiosRequestConfig) {
        return CBStatementApiFp(this.configuration).cBStatementPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} statementID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApi
     */
    public cBStatementStatementIDDelete(statementID: number, options?: AxiosRequestConfig) {
        return CBStatementApiFp(this.configuration).cBStatementStatementIDDelete(statementID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} statementID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApi
     */
    public cBStatementStatementIDGet(statementID: number, options?: AxiosRequestConfig) {
        return CBStatementApiFp(this.configuration).cBStatementStatementIDGet(statementID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} statementID 
     * @param {CBStatement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApi
     */
    public cBStatementStatementIDPatch(statementID: number, body: CBStatement, options?: AxiosRequestConfig) {
        return CBStatementApiFp(this.configuration).cBStatementStatementIDPatch(statementID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CBStatement/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} statementID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApi
     */
    public cBStatementStatementIDPrintGet(statementID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return CBStatementApiFp(this.configuration).cBStatementStatementIDPrintGet(statementID, destination, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} statementID 
     * @param {CBStatement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBStatementApi
     */
    public cBStatementStatementIDPut(statementID: number, body: CBStatement, options?: AxiosRequestConfig) {
        return CBStatementApiFp(this.configuration).cBStatementStatementIDPut(statementID, body, options).then((request) => request(this.axios, this.basePath));
    }
}
