/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CBCategory1 } from '../models';
// @ts-ignore
import { PagedCBCategory1 } from '../models';
/**
 * CBCategory1Api - axios parameter creator
 * @export
 */
export const CBCategory1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1CodeDelete: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('cBCategory1CodeDelete', 'code', code)
            const localVarPath = `/CBCategory1('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1CodeGet: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('cBCategory1CodeGet', 'code', code)
            const localVarPath = `/CBCategory1('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {CBCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1CodePatch: async (code: string, body: CBCategory1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('cBCategory1CodePatch', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBCategory1CodePatch', 'body', body)
            const localVarPath = `/CBCategory1('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {CBCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1CodePut: async (code: string, body: CBCategory1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('cBCategory1CodePut', 'code', code)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBCategory1CodePut', 'body', body)
            const localVarPath = `/CBCategory1('{Code}')`
                .replace(`{${"Code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1Get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CBCategory1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CBCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1Post: async (body: CBCategory1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cBCategory1Post', 'body', body)
            const localVarPath = `/CBCategory1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CBCategory1Api - functional programming interface
 * @export
 */
export const CBCategory1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CBCategory1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBCategory1CodeDelete(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBCategory1CodeDelete(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBCategory1CodeGet(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CBCategory1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBCategory1CodeGet(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {CBCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBCategory1CodePatch(code: string, body: CBCategory1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBCategory1CodePatch(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {CBCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBCategory1CodePut(code: string, body: CBCategory1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBCategory1CodePut(code, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBCategory1Get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCBCategory1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBCategory1Get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CBCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cBCategory1Post(body: CBCategory1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cBCategory1Post(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CBCategory1Api - factory interface
 * @export
 */
export const CBCategory1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CBCategory1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1CodeDelete(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.cBCategory1CodeDelete(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1CodeGet(code: string, options?: any): AxiosPromise<CBCategory1> {
            return localVarFp.cBCategory1CodeGet(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {CBCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1CodePatch(code: string, body: CBCategory1, options?: any): AxiosPromise<void> {
            return localVarFp.cBCategory1CodePatch(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {CBCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1CodePut(code: string, body: CBCategory1, options?: any): AxiosPromise<void> {
            return localVarFp.cBCategory1CodePut(code, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1Get(options?: any): AxiosPromise<PagedCBCategory1> {
            return localVarFp.cBCategory1Get(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CBCategory1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cBCategory1Post(body: CBCategory1, options?: any): AxiosPromise<void> {
            return localVarFp.cBCategory1Post(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CBCategory1Api - interface
 * @export
 * @interface CBCategory1Api
 */
export interface CBCategory1ApiInterface {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1ApiInterface
     */
    cBCategory1CodeDelete(code: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1ApiInterface
     */
    cBCategory1CodeGet(code: string, options?: AxiosRequestConfig): AxiosPromise<CBCategory1>;

    /**
     * 
     * @param {string} code 
     * @param {CBCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1ApiInterface
     */
    cBCategory1CodePatch(code: string, body: CBCategory1, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} code 
     * @param {CBCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1ApiInterface
     */
    cBCategory1CodePut(code: string, body: CBCategory1, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1ApiInterface
     */
    cBCategory1Get(options?: AxiosRequestConfig): AxiosPromise<PagedCBCategory1>;

    /**
     * 
     * @param {CBCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1ApiInterface
     */
    cBCategory1Post(body: CBCategory1, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CBCategory1Api - object-oriented interface
 * @export
 * @class CBCategory1Api
 * @extends {BaseAPI}
 */
export class CBCategory1Api extends BaseAPI implements CBCategory1ApiInterface {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1Api
     */
    public cBCategory1CodeDelete(code: string, options?: AxiosRequestConfig) {
        return CBCategory1ApiFp(this.configuration).cBCategory1CodeDelete(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1Api
     */
    public cBCategory1CodeGet(code: string, options?: AxiosRequestConfig) {
        return CBCategory1ApiFp(this.configuration).cBCategory1CodeGet(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {CBCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1Api
     */
    public cBCategory1CodePatch(code: string, body: CBCategory1, options?: AxiosRequestConfig) {
        return CBCategory1ApiFp(this.configuration).cBCategory1CodePatch(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {CBCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1Api
     */
    public cBCategory1CodePut(code: string, body: CBCategory1, options?: AxiosRequestConfig) {
        return CBCategory1ApiFp(this.configuration).cBCategory1CodePut(code, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1Api
     */
    public cBCategory1Get(options?: AxiosRequestConfig) {
        return CBCategory1ApiFp(this.configuration).cBCategory1Get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CBCategory1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBCategory1Api
     */
    public cBCategory1Post(body: CBCategory1, options?: AxiosRequestConfig) {
        return CBCategory1ApiFp(this.configuration).cBCategory1Post(body, options).then((request) => request(this.axios, this.basePath));
    }
}
