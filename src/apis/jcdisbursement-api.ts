/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JCDisbursement } from '../models';
// @ts-ignore
import { PagedJCDisbursement } from '../models';
/**
 * JCDisbursementApi - axios parameter creator
 * @export
 */
export const JCDisbursementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDDelete: async (batchID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCDisbursementBatchIDDelete', 'batchID', batchID)
            const localVarPath = `/JCDisbursement('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDGet: async (batchID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCDisbursementBatchIDGet', 'batchID', batchID)
            const localVarPath = `/JCDisbursement('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCDisbursement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDPatch: async (batchID: number, body: JCDisbursement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCDisbursementBatchIDPatch', 'batchID', batchID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCDisbursementBatchIDPatch', 'body', body)
            const localVarPath = `/JCDisbursement('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * JCDisbursement/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} batchID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDPrintGet: async (batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCDisbursementBatchIDPrintGet', 'batchID', batchID)
            const localVarPath = `/JCDisbursement('{BatchID}')/Print`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destination !== undefined) {
                localVarQueryParameter['Destination'] = destination;
            }

            if (reportFileName !== undefined) {
                localVarQueryParameter['ReportFileName'] = reportFileName;
            }

            if (format !== undefined) {
                localVarQueryParameter['Format'] = format;
            }

            if (printerName !== undefined) {
                localVarQueryParameter['PrinterName'] = printerName;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (intent !== undefined) {
                localVarQueryParameter['Intent'] = intent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCDisbursement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDPut: async (batchID: number, body: JCDisbursement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchID' is not null or undefined
            assertParamExists('jCDisbursementBatchIDPut', 'batchID', batchID)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCDisbursementBatchIDPut', 'body', body)
            const localVarPath = `/JCDisbursement('{BatchID}')`
                .replace(`{${"BatchID"}}`, encodeURIComponent(String(batchID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/JCDisbursement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JCDisbursement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementPost: async (body: JCDisbursement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('jCDisbursementPost', 'body', body)
            const localVarPath = `/JCDisbursement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JCDisbursementApi - functional programming interface
 * @export
 */
export const JCDisbursementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JCDisbursementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCDisbursementBatchIDDelete(batchID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCDisbursementBatchIDDelete(batchID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCDisbursementBatchIDGet(batchID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JCDisbursement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCDisbursementBatchIDGet(batchID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCDisbursement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCDisbursementBatchIDPatch(batchID: number, body: JCDisbursement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCDisbursementBatchIDPatch(batchID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * JCDisbursement/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} batchID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCDisbursementBatchIDPrintGet(batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCDisbursementBatchIDPrintGet(batchID, destination, reportFileName, format, printerName, fileName, intent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCDisbursement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCDisbursementBatchIDPut(batchID: number, body: JCDisbursement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCDisbursementBatchIDPut(batchID, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCDisbursementGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedJCDisbursement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCDisbursementGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JCDisbursement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jCDisbursementPost(body: JCDisbursement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jCDisbursementPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JCDisbursementApi - factory interface
 * @export
 */
export const JCDisbursementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JCDisbursementApiFp(configuration)
    return {
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDDelete(batchID: number, options?: any): AxiosPromise<void> {
            return localVarFp.jCDisbursementBatchIDDelete(batchID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} batchID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDGet(batchID: number, options?: any): AxiosPromise<JCDisbursement> {
            return localVarFp.jCDisbursementBatchIDGet(batchID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCDisbursement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDPatch(batchID: number, body: JCDisbursement, options?: any): AxiosPromise<void> {
            return localVarFp.jCDisbursementBatchIDPatch(batchID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * JCDisbursement/Print is an ODATA function and Action - use either GET or POST to call
         * @param {number} batchID 
         * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
         * @param {string} [reportFileName] 
         * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
         * @param {string} [printerName] 
         * @param {string} [fileName] 
         * @param {'attachment' | 'inline'} [intent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDPrintGet(batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: any): AxiosPromise<void> {
            return localVarFp.jCDisbursementBatchIDPrintGet(batchID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} batchID 
         * @param {JCDisbursement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementBatchIDPut(batchID: number, body: JCDisbursement, options?: any): AxiosPromise<void> {
            return localVarFp.jCDisbursementBatchIDPut(batchID, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementGet(options?: any): AxiosPromise<PagedJCDisbursement> {
            return localVarFp.jCDisbursementGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JCDisbursement} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jCDisbursementPost(body: JCDisbursement, options?: any): AxiosPromise<void> {
            return localVarFp.jCDisbursementPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JCDisbursementApi - interface
 * @export
 * @interface JCDisbursementApi
 */
export interface JCDisbursementApiInterface {
    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApiInterface
     */
    jCDisbursementBatchIDDelete(batchID: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApiInterface
     */
    jCDisbursementBatchIDGet(batchID: number, options?: AxiosRequestConfig): AxiosPromise<JCDisbursement>;

    /**
     * 
     * @param {number} batchID 
     * @param {JCDisbursement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApiInterface
     */
    jCDisbursementBatchIDPatch(batchID: number, body: JCDisbursement, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * JCDisbursement/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} batchID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApiInterface
     */
    jCDisbursementBatchIDPrintGet(batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} batchID 
     * @param {JCDisbursement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApiInterface
     */
    jCDisbursementBatchIDPut(batchID: number, body: JCDisbursement, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApiInterface
     */
    jCDisbursementGet(options?: AxiosRequestConfig): AxiosPromise<PagedJCDisbursement>;

    /**
     * 
     * @param {JCDisbursement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApiInterface
     */
    jCDisbursementPost(body: JCDisbursement, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * JCDisbursementApi - object-oriented interface
 * @export
 * @class JCDisbursementApi
 * @extends {BaseAPI}
 */
export class JCDisbursementApi extends BaseAPI implements JCDisbursementApiInterface {
    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApi
     */
    public jCDisbursementBatchIDDelete(batchID: number, options?: AxiosRequestConfig) {
        return JCDisbursementApiFp(this.configuration).jCDisbursementBatchIDDelete(batchID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} batchID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApi
     */
    public jCDisbursementBatchIDGet(batchID: number, options?: AxiosRequestConfig) {
        return JCDisbursementApiFp(this.configuration).jCDisbursementBatchIDGet(batchID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} batchID 
     * @param {JCDisbursement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApi
     */
    public jCDisbursementBatchIDPatch(batchID: number, body: JCDisbursement, options?: AxiosRequestConfig) {
        return JCDisbursementApiFp(this.configuration).jCDisbursementBatchIDPatch(batchID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * JCDisbursement/Print is an ODATA function and Action - use either GET or POST to call
     * @param {number} batchID 
     * @param {'Disk File' | 'Printer' | 'Mail Message'} [destination] 
     * @param {string} [reportFileName] 
     * @param {'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File'} [format] 
     * @param {string} [printerName] 
     * @param {string} [fileName] 
     * @param {'attachment' | 'inline'} [intent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApi
     */
    public jCDisbursementBatchIDPrintGet(batchID: number, destination?: 'Disk File' | 'Printer' | 'Mail Message', reportFileName?: string, format?: 'Adobe PDF' | 'CSV File' | 'Tab Delimited File' | 'Quoted CSV File' | 'Excel XLSX File', printerName?: string, fileName?: string, intent?: 'attachment' | 'inline', options?: AxiosRequestConfig) {
        return JCDisbursementApiFp(this.configuration).jCDisbursementBatchIDPrintGet(batchID, destination, reportFileName, format, printerName, fileName, intent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} batchID 
     * @param {JCDisbursement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApi
     */
    public jCDisbursementBatchIDPut(batchID: number, body: JCDisbursement, options?: AxiosRequestConfig) {
        return JCDisbursementApiFp(this.configuration).jCDisbursementBatchIDPut(batchID, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApi
     */
    public jCDisbursementGet(options?: AxiosRequestConfig) {
        return JCDisbursementApiFp(this.configuration).jCDisbursementGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JCDisbursement} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JCDisbursementApi
     */
    public jCDisbursementPost(body: JCDisbursement, options?: AxiosRequestConfig) {
        return JCDisbursementApiFp(this.configuration).jCDisbursementPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
