/* tslint:disable */
/* eslint-disable */
/**
 * Accredo Web Service
 * Accredo Web Service
 *
 * The version of the OpenAPI document: 5.0.11.125
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FADepreciationDefaults } from '../models';
// @ts-ignore
import { PagedFADepreciationDefaults } from '../models';
/**
 * FADepreciationDefaultsApi - axios parameter creator
 * @export
 */
export const FADepreciationDefaultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} bookCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fADepreciationDefaultsBookCodeGet: async (bookCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookCode' is not null or undefined
            assertParamExists('fADepreciationDefaultsBookCodeGet', 'bookCode', bookCode)
            const localVarPath = `/FADepreciationDefaults('{BookCode}')`
                .replace(`{${"BookCode"}}`, encodeURIComponent(String(bookCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FADepreciationDefaults} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fADepreciationDefaultsBookCodePatch: async (bookCode: string, body: FADepreciationDefaults, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookCode' is not null or undefined
            assertParamExists('fADepreciationDefaultsBookCodePatch', 'bookCode', bookCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fADepreciationDefaultsBookCodePatch', 'body', body)
            const localVarPath = `/FADepreciationDefaults('{BookCode}')`
                .replace(`{${"BookCode"}}`, encodeURIComponent(String(bookCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FADepreciationDefaults} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fADepreciationDefaultsBookCodePut: async (bookCode: string, body: FADepreciationDefaults, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookCode' is not null or undefined
            assertParamExists('fADepreciationDefaultsBookCodePut', 'bookCode', bookCode)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('fADepreciationDefaultsBookCodePut', 'body', body)
            const localVarPath = `/FADepreciationDefaults('{BookCode}')`
                .replace(`{${"BookCode"}}`, encodeURIComponent(String(bookCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fADepreciationDefaultsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/FADepreciationDefaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FADepreciationDefaultsApi - functional programming interface
 * @export
 */
export const FADepreciationDefaultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FADepreciationDefaultsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} bookCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fADepreciationDefaultsBookCodeGet(bookCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FADepreciationDefaults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fADepreciationDefaultsBookCodeGet(bookCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FADepreciationDefaults} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fADepreciationDefaultsBookCodePatch(bookCode: string, body: FADepreciationDefaults, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fADepreciationDefaultsBookCodePatch(bookCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FADepreciationDefaults} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fADepreciationDefaultsBookCodePut(bookCode: string, body: FADepreciationDefaults, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fADepreciationDefaultsBookCodePut(bookCode, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fADepreciationDefaultsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedFADepreciationDefaults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fADepreciationDefaultsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FADepreciationDefaultsApi - factory interface
 * @export
 */
export const FADepreciationDefaultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FADepreciationDefaultsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} bookCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fADepreciationDefaultsBookCodeGet(bookCode: string, options?: any): AxiosPromise<FADepreciationDefaults> {
            return localVarFp.fADepreciationDefaultsBookCodeGet(bookCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FADepreciationDefaults} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fADepreciationDefaultsBookCodePatch(bookCode: string, body: FADepreciationDefaults, options?: any): AxiosPromise<void> {
            return localVarFp.fADepreciationDefaultsBookCodePatch(bookCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bookCode 
         * @param {FADepreciationDefaults} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fADepreciationDefaultsBookCodePut(bookCode: string, body: FADepreciationDefaults, options?: any): AxiosPromise<void> {
            return localVarFp.fADepreciationDefaultsBookCodePut(bookCode, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fADepreciationDefaultsGet(options?: any): AxiosPromise<PagedFADepreciationDefaults> {
            return localVarFp.fADepreciationDefaultsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FADepreciationDefaultsApi - interface
 * @export
 * @interface FADepreciationDefaultsApi
 */
export interface FADepreciationDefaultsApiInterface {
    /**
     * 
     * @param {string} bookCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FADepreciationDefaultsApiInterface
     */
    fADepreciationDefaultsBookCodeGet(bookCode: string, options?: AxiosRequestConfig): AxiosPromise<FADepreciationDefaults>;

    /**
     * 
     * @param {string} bookCode 
     * @param {FADepreciationDefaults} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FADepreciationDefaultsApiInterface
     */
    fADepreciationDefaultsBookCodePatch(bookCode: string, body: FADepreciationDefaults, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} bookCode 
     * @param {FADepreciationDefaults} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FADepreciationDefaultsApiInterface
     */
    fADepreciationDefaultsBookCodePut(bookCode: string, body: FADepreciationDefaults, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FADepreciationDefaultsApiInterface
     */
    fADepreciationDefaultsGet(options?: AxiosRequestConfig): AxiosPromise<PagedFADepreciationDefaults>;

}

/**
 * FADepreciationDefaultsApi - object-oriented interface
 * @export
 * @class FADepreciationDefaultsApi
 * @extends {BaseAPI}
 */
export class FADepreciationDefaultsApi extends BaseAPI implements FADepreciationDefaultsApiInterface {
    /**
     * 
     * @param {string} bookCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FADepreciationDefaultsApi
     */
    public fADepreciationDefaultsBookCodeGet(bookCode: string, options?: AxiosRequestConfig) {
        return FADepreciationDefaultsApiFp(this.configuration).fADepreciationDefaultsBookCodeGet(bookCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bookCode 
     * @param {FADepreciationDefaults} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FADepreciationDefaultsApi
     */
    public fADepreciationDefaultsBookCodePatch(bookCode: string, body: FADepreciationDefaults, options?: AxiosRequestConfig) {
        return FADepreciationDefaultsApiFp(this.configuration).fADepreciationDefaultsBookCodePatch(bookCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bookCode 
     * @param {FADepreciationDefaults} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FADepreciationDefaultsApi
     */
    public fADepreciationDefaultsBookCodePut(bookCode: string, body: FADepreciationDefaults, options?: AxiosRequestConfig) {
        return FADepreciationDefaultsApiFp(this.configuration).fADepreciationDefaultsBookCodePut(bookCode, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FADepreciationDefaultsApi
     */
    public fADepreciationDefaultsGet(options?: AxiosRequestConfig) {
        return FADepreciationDefaultsApiFp(this.configuration).fADepreciationDefaultsGet(options).then((request) => request(this.axios, this.basePath));
    }
}
